@startuml
set namespaceSeparator ::

class "lib::ui::ui.dart::_ChannelCallbackRecord" {
  -void Function(ByteData?, void Function(ByteData?)) _callback
  -Zone _zone
  +void invoke()
}

class "lib::ui::ui.dart::_StoredMessage" {
  +ByteData? data
  -void Function(ByteData?) _callback
  -Zone _zone
  +void invoke()
}

class "lib::ui::ui.dart::_Channel" {
  -ListQueue<_StoredMessage> _queue
  +bool debugEnableDiscardWarnings
  -int _capacity
  -bool _draining
  -_ChannelCallbackRecord? _channelCallbackRecord
  +int length
  +int capacity
  +bool push()
  +_StoredMessage pop()
  -bool _dropOverflowMessages()
  +void setListener()
  +void clearListener()
  -void _drain()
  -void _drainStep()
}



abstract class "lib::ui::ui.dart::Scene" {
  +Image toImageSync()
  +dynamic toImage()
  +void dispose()
}

class "lib::ui::ui.dart::_NativeScene" {
  +Image toImageSync()
  -String? _toImageSync()
  +dynamic toImage()
  -String? _toImage()
  +void dispose()
}

abstract class "lib::ui::ui.dart::_EngineLayerWrapper" {
  -EngineLayer? _nativeLayer
  -List<_EngineLayerWrapper>? _debugChildren
  -bool _debugWasUsedAsOldLayer
  +void dispose()
  -bool _debugCheckNotUsedAsOldLayer()
}

class "lib::ui::ui.dart::TransformEngineLayer" {
}

class "lib::ui::ui.dart::OffsetEngineLayer" {
}

class "lib::ui::ui.dart::ClipRectEngineLayer" {
}

class "lib::ui::ui.dart::ClipRRectEngineLayer" {
}

class "lib::ui::ui.dart::ClipPathEngineLayer" {
}

class "lib::ui::ui.dart::OpacityEngineLayer" {
}

class "lib::ui::ui.dart::ColorFilterEngineLayer" {
}

class "lib::ui::ui.dart::ImageFilterEngineLayer" {
}

class "lib::ui::ui.dart::BackdropFilterEngineLayer" {
}

class "lib::ui::ui.dart::ShaderMaskEngineLayer" {
}

abstract class "lib::ui::ui.dart::SceneBuilder" {
  +TransformEngineLayer pushTransform()
  +OffsetEngineLayer pushOffset()
  +ClipRectEngineLayer pushClipRect()
  +ClipRRectEngineLayer pushClipRRect()
  +ClipPathEngineLayer pushClipPath()
  +OpacityEngineLayer pushOpacity()
  +ColorFilterEngineLayer pushColorFilter()
  +ImageFilterEngineLayer pushImageFilter()
  +BackdropFilterEngineLayer pushBackdropFilter()
  +ShaderMaskEngineLayer pushShaderMask()
  +void pop()
  +void addRetained()
  +void addPerformanceOverlay()
  +void addPicture()
  +void addTexture()
  +void addPlatformView()
  +void setRasterizerTracingThreshold()
  +void setCheckerboardRasterCacheImages()
  +void setCheckerboardOffscreenLayers()
  +Scene build()
}

class "lib::ui::ui.dart::_NativeSceneBuilder" {
  -Map<EngineLayer, String> _usedLayers
  -List<_EngineLayerWrapper> _layerStack
  -void _constructor()
  -bool _debugCheckUsedOnce()
  -bool _debugCheckCanBeUsedAsOldLayer()
  -bool _debugPushLayer()
  +TransformEngineLayer pushTransform()
  -void _pushTransform()
  +OffsetEngineLayer pushOffset()
  -void _pushOffset()
  +ClipRectEngineLayer pushClipRect()
  -void _pushClipRect()
  +ClipRRectEngineLayer pushClipRRect()
  -void _pushClipRRect()
  +ClipPathEngineLayer pushClipPath()
  -void _pushClipPath()
  +OpacityEngineLayer pushOpacity()
  -void _pushOpacity()
  +ColorFilterEngineLayer pushColorFilter()
  -void _pushColorFilter()
  +ImageFilterEngineLayer pushImageFilter()
  -void _pushImageFilter()
  +BackdropFilterEngineLayer pushBackdropFilter()
  -void _pushBackdropFilter()
  +ShaderMaskEngineLayer pushShaderMask()
  -void _pushShaderMask()
  +void pop()
  -void _pop()
  +void addRetained()
  -void _addRetained()
  +void addPerformanceOverlay()
  -void _addPerformanceOverlay()
  +void addPicture()
  -void _addPicture()
  +void addTexture()
  -void _addTexture()
  +void addPlatformView()
  -void _addPlatformView()
  +void setRasterizerTracingThreshold()
  +void setCheckerboardRasterCacheImages()
  +void setCheckerboardOffscreenLayers()
  +Scene build()
  -void _build()
}

abstract class "lib::ui::ui.dart::OffsetBase" {
  -double _dx
  -double _dy
  +bool isInfinite
  +bool isFinite
  +int hashCode
  +bool <()
  +bool <=()
  +bool >()
  +bool >=()
  +bool ==()
  +String toString()
}

class "lib::ui::ui.dart::Offset" {
  {static} +Offset zero
  {static} +Offset infinite
  +double dx
  +double dy
  +double distance
  +double distanceSquared
  +double direction
  +int hashCode
  +Offset scale()
  +Offset translate()
  +Offset unary-()
  +Offset -()
  +Offset +()
  +Offset *()
  +Offset /()
  +Offset ~/()
  +Offset %()
  +Rect &()
  {static} +Offset? lerp()
  +bool ==()
  +String toString()
}

class "lib::ui::ui.dart::Size" {
  {static} +Size zero
  {static} +Size infinite
  +double width
  +double height
  +double aspectRatio
  +bool isEmpty
  +double shortestSide
  +double longestSide
  +Size flipped
  +int hashCode
  +OffsetBase -()
  +Size +()
  +Size *()
  +Size /()
  +Size ~/()
  +Size %()
  +Offset topLeft()
  +Offset topCenter()
  +Offset topRight()
  +Offset centerLeft()
  +Offset center()
  +Offset centerRight()
  +Offset bottomLeft()
  +Offset bottomCenter()
  +Offset bottomRight()
  +bool contains()
  {static} +Size? lerp()
  +bool ==()
  +String toString()
}

class "lib::ui::ui.dart::Rect" {
  +double left
  +double top
  +double right
  +double bottom
  {static} +Rect zero
  {static} -double _giantScalar
  {static} +Rect largest
  +double width
  +double height
  +Size size
  +bool hasNaN
  +bool isInfinite
  +bool isFinite
  +bool isEmpty
  +double shortestSide
  +double longestSide
  +Offset topLeft
  +Offset topCenter
  +Offset topRight
  +Offset centerLeft
  +Offset center
  +Offset centerRight
  +Offset bottomLeft
  +Offset bottomCenter
  +Offset bottomRight
  +int hashCode
  -Float32List _getValue32()
  +Rect shift()
  +Rect translate()
  +Rect inflate()
  +Rect deflate()
  +Rect intersect()
  +Rect expandToInclude()
  +bool overlaps()
  +bool contains()
  {static} +Rect? lerp()
  +bool ==()
  +String toString()
}

class "lib::ui::ui.dart::Radius" {
  +double x
  +double y
  {static} +Radius zero
  +int hashCode
  +Radius clamp()
  +Radius clampValues()
  +Radius unary-()
  +Radius -()
  +Radius +()
  +Radius *()
  +Radius /()
  +Radius ~/()
  +Radius %()
  {static} +Radius? lerp()
  +bool ==()
  +String toString()
}

class "lib::ui::ui.dart::RRect" {
  +double left
  +double top
  +double right
  +double bottom
  +double tlRadiusX
  +double tlRadiusY
  +double trRadiusX
  +double trRadiusY
  +double brRadiusX
  +double brRadiusY
  +double blRadiusX
  +double blRadiusY
  {static} +RRect zero
  +Radius tlRadius
  +Radius trRadius
  +Radius brRadius
  +Radius blRadius
  +double width
  +double height
  +Rect outerRect
  +Rect safeInnerRect
  +Rect middleRect
  +Rect wideMiddleRect
  +Rect tallMiddleRect
  +bool isEmpty
  +bool isFinite
  +bool isRect
  +bool isStadium
  +bool isEllipse
  +bool isCircle
  +double shortestSide
  +double longestSide
  +bool hasNaN
  +Offset center
  +int hashCode
  -Float32List _getValue32()
  +RRect shift()
  +RRect inflate()
  +RRect deflate()
  -double _getMin()
  +RRect scaleRadii()
  +bool contains()
  {static} +RRect? lerp()
  +bool ==()
  +String toString()
}

class "lib::ui::ui.dart::RSTransform" {
  -Float32List _value
  +double scos
  +double ssin
  +double tx
  +double ty
}

class "lib::ui::ui.dart::_HashEnd" {
}

class "lib::ui::ui.dart::_Jenkins" {
  {static} +int combine()
  {static} +int finish()
}

abstract class "lib::ui::ui.dart::IsolateNameServer" {
  {static} +SendPort? lookupPortByName()
  {static} +bool registerPortWithName()
  {static} +bool removePortNameMapping()
  {static} -SendPort? _lookupPortByName()
  {static} -bool _registerPortWithName()
  {static} -bool _removePortNameMapping()
}

class "lib::ui::ui.dart::KeyData" {
  +Duration timeStamp
  +KeyEventType type
  +KeyEventDeviceType deviceType
  +int physical
  +int logical
  +String? character
  +bool synthesized
  {static} -int _nonValueBits()
  -String _logicalToString()
  -String? _escapeCharacter()
  -String? _quotedCharCode()
  +String toString()
  +String toStringFull()
}

class "lib::ui::ui.dart::KeyEventType" {
  +int index
  {static} +List<KeyEventType> values
  {static} +KeyEventType down
  {static} +KeyEventType up
  {static} +KeyEventType repeat
}

class "lib::ui::ui.dart::KeyEventDeviceType" {
  +int index
  {static} +List<KeyEventDeviceType> values
  {static} +KeyEventDeviceType keyboard
  {static} +KeyEventDeviceType directionalPad
  {static} +KeyEventDeviceType gamepad
  {static} +KeyEventDeviceType joystick
  {static} +KeyEventDeviceType hdmi
}

abstract class "lib::ui::ui.dart::DartPluginRegistrant" {
  {static} -bool _wasInitialized
  {static} +void ensureInitialized()
  {static} -void _ensureInitialized()
}

class "lib::ui::ui.dart::_Logger" {
  {static} -void _printString()
  {static} -void _printDebugString()
}

class "lib::ui::ui.dart::Color" {
  +int value
  +int alpha
  +double opacity
  +int red
  +int green
  +int blue
  +int hashCode
  +Color withAlpha()
  +Color withOpacity()
  +Color withRed()
  +Color withGreen()
  +Color withBlue()
  {static} -double _linearizeColorComponent()
  +double computeLuminance()
  {static} +Color? lerp()
  {static} +Color alphaBlend()
  {static} +int getAlphaFromOpacity()
  +bool ==()
  +String toString()
}

class "lib::ui::ui.dart::Paint" {
  -ByteData _data
  {static} -int _kIsAntiAliasIndex
  {static} -int _kColorIndex
  {static} -int _kBlendModeIndex
  {static} -int _kStyleIndex
  {static} -int _kStrokeWidthIndex
  {static} -int _kStrokeCapIndex
  {static} -int _kStrokeJoinIndex
  {static} -int _kStrokeMiterLimitIndex
  {static} -int _kFilterQualityIndex
  {static} -int _kMaskFilterIndex
  {static} -int _kMaskFilterBlurStyleIndex
  {static} -int _kMaskFilterSigmaIndex
  {static} -int _kInvertColorIndex
  {static} -int _kIsAntiAliasOffset
  {static} -int _kColorOffset
  {static} -int _kBlendModeOffset
  {static} -int _kStyleOffset
  {static} -int _kStrokeWidthOffset
  {static} -int _kStrokeCapOffset
  {static} -int _kStrokeJoinOffset
  {static} -int _kStrokeMiterLimitOffset
  {static} -int _kFilterQualityOffset
  {static} -int _kMaskFilterOffset
  {static} -int _kMaskFilterBlurStyleOffset
  {static} -int _kMaskFilterSigmaOffset
  {static} -int _kInvertColorOffset
  {static} -int _kDataByteCount
  -List<Object?>? _objects
  {static} -int _kShaderIndex
  {static} -int _kColorFilterIndex
  {static} -int _kImageFilterIndex
  {static} -int _kObjectCount
  {static} -int _kColorDefault
  {static} -int _kBlendModeDefault
  {static} -double _kStrokeMiterLimitDefault
  +bool isAntiAlias
  +Color color
  +BlendMode blendMode
  +PaintingStyle style
  +double strokeWidth
  +StrokeCap strokeCap
  +StrokeJoin strokeJoin
  +double strokeMiterLimit
  +MaskFilter? maskFilter
  +FilterQuality filterQuality
  +Shader? shader
  +ColorFilter? colorFilter
  +ImageFilter? imageFilter
  +bool invertColors
  -List<Object?> _ensureObjectsInitialized()
  +String toString()
}

class "lib::ui::ui.dart::Image" {
  -_Image _image
  {static} +void Function(Image)? onCreate
  {static} +void Function(Image)? onDispose
  -StackTrace? _debugStack
  +int width
  +int height
  -bool _disposed
  +bool debugDisposed
  +ColorSpace colorSpace
  +void dispose()
  +dynamic toByteData()
  +List<StackTrace>? debugGetOpenHandleStackTraces()
  +Image clone()
  +bool isCloneOf()
  +String toString()
}

class "lib::ui::ui.dart::_Image" {
  -bool _disposed
  -Set<Image> _handles
  +int width
  +int height
  +int colorSpace
  +dynamic toByteData()
  -String? _toByteData()
  +void dispose()
  -void _dispose()
  +String toString()
}

class "lib::ui::ui.dart::FrameInfo" {
  +Duration duration
  +Image image
}

abstract class "lib::ui::ui.dart::Codec" {
  +int frameCount
  +int repetitionCount
  +dynamic getNextFrame()
  +void dispose()
}

class "lib::ui::ui.dart::_NativeCodec" {
  -int? _cachedFrameCount
  -int? _cachedRepetitionCount
  +int frameCount
  -int _frameCount
  +int repetitionCount
  -int _repetitionCount
  +dynamic getNextFrame()
  -String? _getNextFrame()
  +void dispose()
}

class "lib::ui::ui.dart::TargetImageSize" {
  +int? width
  +int? height
  +String toString()
}

abstract class "lib::ui::ui.dart::EngineLayer" {
  +void dispose()
}

class "lib::ui::ui.dart::_NativeEngineLayer" {
  +void dispose()
}

abstract class "lib::ui::ui.dart::Path" {
  +PathFillType fillType
  +void moveTo()
  +void relativeMoveTo()
  +void lineTo()
  +void relativeLineTo()
  +void quadraticBezierTo()
  +void relativeQuadraticBezierTo()
  +void cubicTo()
  +void relativeCubicTo()
  +void conicTo()
  +void relativeConicTo()
  +void arcTo()
  +void arcToPoint()
  +void relativeArcToPoint()
  +void addRect()
  +void addOval()
  +void addArc()
  +void addPolygon()
  +void addRRect()
  +void addPath()
  +void extendWithPath()
  +void close()
  +void reset()
  +bool contains()
  +Path shift()
  +Path transform()
  +Rect getBounds()
  {static} +Path combine()
  +PathMetrics computeMetrics()
}

class "lib::ui::ui.dart::_NativePath" {
  +PathFillType fillType
  -void _constructor()
  -void _clone()
  -int _getFillType()
  -void _setFillType()
  +void moveTo()
  +void relativeMoveTo()
  +void lineTo()
  +void relativeLineTo()
  +void quadraticBezierTo()
  +void relativeQuadraticBezierTo()
  +void cubicTo()
  +void relativeCubicTo()
  +void conicTo()
  +void relativeConicTo()
  +void arcTo()
  -void _arcTo()
  +void arcToPoint()
  -void _arcToPoint()
  +void relativeArcToPoint()
  -void _relativeArcToPoint()
  +void addRect()
  -void _addRect()
  +void addOval()
  -void _addOval()
  +void addArc()
  -void _addArc()
  +void addPolygon()
  -void _addPolygon()
  +void addRRect()
  -void _addRRect()
  +void addPath()
  -void _addPath()
  -void _addPathWithMatrix()
  +void extendWithPath()
  -void _extendWithPath()
  -void _extendWithPathAndMatrix()
  +void close()
  +void reset()
  +bool contains()
  -bool _contains()
  +Path shift()
  -void _shift()
  +Path transform()
  -void _transform()
  +Rect getBounds()
  -Float32List _getBounds()
  -bool _op()
  +PathMetrics computeMetrics()
}

class "lib::ui::ui.dart::Tangent" {
  +Offset position
  +Offset vector
  +double angle
}

class "lib::ui::ui.dart::PathMetrics" {
  -Iterator<PathMetric> _iterator
  +Iterator<PathMetric> iterator
}

class "lib::ui::ui.dart::PathMetricIterator" {
  -PathMetric? _pathMetric
  -_PathMeasure _pathMeasure
  +PathMetric current
  +bool moveNext()
}

class "lib::ui::ui.dart::PathMetric" {
  +double length
  +bool isClosed
  +int contourIndex
  -_PathMeasure _measure
  +Tangent? getTangentForOffset()
  +Path extractPath()
  +String toString()
}

class "lib::ui::ui.dart::_PathMeasure" {
  +int currentContourIndex
  -void _constructor()
  +double length()
  -double _length()
  +Tangent? getTangentForOffset()
  -Float32List _getPosTan()
  +Path extractPath()
  -void _extractPath()
  +bool isClosed()
  -bool _isClosed()
  -bool _nextContour()
  -bool _nativeNextContour()
}

class "lib::ui::ui.dart::MaskFilter" {
  -BlurStyle _style
  -double _sigma
  {static} -int _TypeNone
  {static} -int _TypeBlur
  +int hashCode
  +bool ==()
  +String toString()
}

class "lib::ui::ui.dart::ColorFilter" {
  -Color? _color
  -BlendMode? _blendMode
  -List<double>? _matrix
  -int _type
  {static} -int _kTypeMode
  {static} -int _kTypeMatrix
  {static} -int _kTypeLinearToSrgbGamma
  {static} -int _kTypeSrgbToLinearGamma
  +int hashCode
  -String _shortDescription
  -_ImageFilter _toNativeImageFilter()
  -_ColorFilter? _toNativeColorFilter()
  +bool ==()
  +String toString()
}

class "lib::ui::ui.dart::_ColorFilter" {
  +ColorFilter creator
  -void _constructor()
  -void _initMode()
  -void _initMatrix()
  -void _initLinearToSrgbGamma()
  -void _initSrgbToLinearGamma()
}

abstract class "lib::ui::ui.dart::ImageFilter" {
  -String _shortDescription
  -_ImageFilter _toNativeImageFilter()
}

class "lib::ui::ui.dart::_MatrixImageFilter" {
  +Float64List data
  +FilterQuality filterQuality
  +_ImageFilter nativeFilter
  -String _shortDescription
  +int hashCode
  -_ImageFilter _toNativeImageFilter()
  +String toString()
  +bool ==()
}

class "lib::ui::ui.dart::_GaussianBlurImageFilter" {
  +double sigmaX
  +double sigmaY
  +TileMode tileMode
  +_ImageFilter nativeFilter
  -String _modeString
  -String _shortDescription
  +int hashCode
  -_ImageFilter _toNativeImageFilter()
  +String toString()
  +bool ==()
}

class "lib::ui::ui.dart::_DilateImageFilter" {
  +double radiusX
  +double radiusY
  +_ImageFilter nativeFilter
  -String _shortDescription
  +int hashCode
  -_ImageFilter _toNativeImageFilter()
  +String toString()
  +bool ==()
}

class "lib::ui::ui.dart::_ErodeImageFilter" {
  +double radiusX
  +double radiusY
  +_ImageFilter nativeFilter
  -String _shortDescription
  +int hashCode
  -_ImageFilter _toNativeImageFilter()
  +String toString()
  +bool ==()
}

class "lib::ui::ui.dart::_ComposeImageFilter" {
  +ImageFilter innerFilter
  +ImageFilter outerFilter
  +_ImageFilter nativeFilter
  -String _shortDescription
  +int hashCode
  -_ImageFilter _toNativeImageFilter()
  +String toString()
  +bool ==()
}

class "lib::ui::ui.dart::_ImageFilter" {
  +ImageFilter creator
  -void _constructor()
  -void _initBlur()
  -void _initDilate()
  -void _initErode()
  -void _initMatrix()
  -void _initColorFilter()
  -void _initComposed()
}

class "lib::ui::ui.dart::Shader" {
  -bool _debugDisposed
  +bool debugDisposed
  +void dispose()
}

class "lib::ui::ui.dart::Gradient" {
  -void _constructor()
  -void _initLinear()
  -void _initRadial()
  -void _initConical()
  -void _initSweep()
  {static} -void _validateColorStops()
}

class "lib::ui::ui.dart::ImageShader" {
  +void dispose()
  -void _constructor()
  -String? _initWithImage()
  -void _dispose()
}

class "lib::ui::ui.dart::FragmentProgram" {
  -String? _debugName
  {static} -Map<String, WeakReference<FragmentProgram>> _shaderRegistry
  -int _uniformFloatCount
  -int _samplerCount
  {static} +dynamic fromAsset()
  {static} -void _reinitializeShader()
  -void _constructor()
  -String _initFromAsset()
  +FragmentShader fragmentShader()
}

class "lib::ui::ui.dart::FragmentShader" {
  -String? _debugName
  {static} -Float32List _kEmptyFloat32List
  -Float32List _floats
  +void setFloat()
  +void setImageSampler()
  +void dispose()
  -Float32List _constructor()
  -void _setImageSampler()
  -bool _validateSamplers()
  -void _dispose()
}

class "lib::ui::ui.dart::Vertices" {
  -bool _disposed
  +bool debugDisposed
  {static} -bool _init()
  +void dispose()
  -void _dispose()
}

abstract class "lib::ui::ui.dart::Canvas" {
  +void save()
  +void saveLayer()
  +void restore()
  +void restoreToCount()
  +int getSaveCount()
  +void translate()
  +void scale()
  +void rotate()
  +void skew()
  +void transform()
  +Float64List getTransform()
  +void clipRect()
  +void clipRRect()
  +void clipPath()
  +Rect getLocalClipBounds()
  +Rect getDestinationClipBounds()
  +void drawColor()
  +void drawLine()
  +void drawPaint()
  +void drawRect()
  +void drawRRect()
  +void drawDRRect()
  +void drawOval()
  +void drawCircle()
  +void drawArc()
  +void drawPath()
  +void drawImage()
  +void drawImageRect()
  +void drawImageNine()
  +void drawPicture()
  +void drawParagraph()
  +void drawPoints()
  +void drawRawPoints()
  +void drawVertices()
  +void drawAtlas()
  +void drawRawAtlas()
  +void drawShadow()
}

class "lib::ui::ui.dart::_NativeCanvas" {
  -_NativePictureRecorder? _recorder
  -void _constructor()
  +void save()
  {static} -Rect _sorted()
  +void saveLayer()
  -void _saveLayerWithoutBounds()
  -void _saveLayer()
  +void restore()
  +void restoreToCount()
  +int getSaveCount()
  +void translate()
  +void scale()
  -void _scale()
  +void rotate()
  +void skew()
  +void transform()
  -void _transform()
  +Float64List getTransform()
  -void _getTransform()
  +void clipRect()
  -void _clipRect()
  +void clipRRect()
  -void _clipRRect()
  +void clipPath()
  -void _clipPath()
  +Rect getLocalClipBounds()
  -void _getLocalClipBounds()
  +Rect getDestinationClipBounds()
  -void _getDestinationClipBounds()
  +void drawColor()
  -void _drawColor()
  +void drawLine()
  -void _drawLine()
  +void drawPaint()
  -void _drawPaint()
  +void drawRect()
  -void _drawRect()
  +void drawRRect()
  -void _drawRRect()
  +void drawDRRect()
  -void _drawDRRect()
  +void drawOval()
  -void _drawOval()
  +void drawCircle()
  -void _drawCircle()
  +void drawArc()
  -void _drawArc()
  +void drawPath()
  -void _drawPath()
  +void drawImage()
  -String? _drawImage()
  +void drawImageRect()
  -String? _drawImageRect()
  +void drawImageNine()
  -String? _drawImageNine()
  +void drawPicture()
  -void _drawPicture()
  +void drawParagraph()
  +void drawPoints()
  +void drawRawPoints()
  -void _drawPoints()
  +void drawVertices()
  -void _drawVertices()
  +void drawAtlas()
  +void drawRawAtlas()
  -String? _drawAtlas()
  +void drawShadow()
  -void _drawShadow()
}

abstract class "lib::ui::ui.dart::Picture" {
  {static} +void Function(Picture)? onCreate
  {static} +void Function(Picture)? onDispose
  +bool debugDisposed
  +int approximateBytesUsed
  +dynamic toImage()
  +Image toImageSync()
  +void dispose()
}

class "lib::ui::ui.dart::_NativePicture" {
  -bool _disposed
  +bool debugDisposed
  +int approximateBytesUsed
  +dynamic toImage()
  -String? _toImage()
  +Image toImageSync()
  -void _toImageSync()
  +void dispose()
  -void _dispose()
}

abstract class "lib::ui::ui.dart::PictureRecorder" {
  +bool isRecording
  +Picture endRecording()
}

class "lib::ui::ui.dart::_NativePictureRecorder" {
  -_NativeCanvas? _canvas
  +bool isRecording
  -void _constructor()
  +Picture endRecording()
  -void _endRecording()
}

class "lib::ui::ui.dart::Shadow" {
  {static} -int _kColorDefault
  {static} -int _kBytesPerShadow
  {static} -int _kColorOffset
  {static} -int _kXOffset
  {static} -int _kYOffset
  {static} -int _kBlurOffset
  +Color color
  +Offset offset
  +double blurRadius
  +double blurSigma
  +int hashCode
  {static} +double convertRadiusToSigma()
  +Paint toPaint()
  +Shadow scale()
  {static} +Shadow? lerp()
  {static} +List<Shadow>? lerpList()
  +bool ==()
  {static} -ByteData _encodeShadows()
  +String toString()
}

class "lib::ui::ui.dart::ImmutableBuffer" {
  -int _length
  -bool _debugDisposed
  +int length
  +bool debugDisposed
  {static} +dynamic fromUint8List()
  {static} +dynamic fromAsset()
  {static} +dynamic fromFilePath()
  -String? _init()
  -String? _initFromAsset()
  -String? _initFromFile()
  +void dispose()
  -void _dispose()
}

abstract class "lib::ui::ui.dart::ImageDescriptor" {
  +int width
  +int height
  +int bytesPerPixel
  {static} +dynamic encoded()
  +void dispose()
  +dynamic instantiateCodec()
}

class "lib::ui::ui.dart::_NativeImageDescriptor" {
  -int? _width
  -int? _height
  -int? _bytesPerPixel
  +int width
  +int height
  +int bytesPerPixel
  -String? _initEncoded()
  {static} -void _initRaw()
  -int _getWidth()
  -int _getHeight()
  -int _getBytesPerPixel()
  +void dispose()
  +dynamic instantiateCodec()
  -void _instantiateCodec()
}

class "lib::ui::ui.dart::PictureRasterizationException" {
  +String message
  +StackTrace? stack
  +String toString()
}

class "lib::ui::ui.dart::BlendMode" {
  +int index
  {static} +List<BlendMode> values
  {static} +BlendMode clear
  {static} +BlendMode src
  {static} +BlendMode dst
  {static} +BlendMode srcOver
  {static} +BlendMode dstOver
  {static} +BlendMode srcIn
  {static} +BlendMode dstIn
  {static} +BlendMode srcOut
  {static} +BlendMode dstOut
  {static} +BlendMode srcATop
  {static} +BlendMode dstATop
  {static} +BlendMode xor
  {static} +BlendMode plus
  {static} +BlendMode modulate
  {static} +BlendMode screen
  {static} +BlendMode overlay
  {static} +BlendMode darken
  {static} +BlendMode lighten
  {static} +BlendMode colorDodge
  {static} +BlendMode colorBurn
  {static} +BlendMode hardLight
  {static} +BlendMode softLight
  {static} +BlendMode difference
  {static} +BlendMode exclusion
  {static} +BlendMode multiply
  {static} +BlendMode hue
  {static} +BlendMode saturation
  {static} +BlendMode color
  {static} +BlendMode luminosity
}

class "lib::ui::ui.dart::FilterQuality" {
  +int index
  {static} +List<FilterQuality> values
  {static} +FilterQuality none
  {static} +FilterQuality low
  {static} +FilterQuality medium
  {static} +FilterQuality high
}

class "lib::ui::ui.dart::StrokeCap" {
  +int index
  {static} +List<StrokeCap> values
  {static} +StrokeCap butt
  {static} +StrokeCap round
  {static} +StrokeCap square
}

class "lib::ui::ui.dart::StrokeJoin" {
  +int index
  {static} +List<StrokeJoin> values
  {static} +StrokeJoin miter
  {static} +StrokeJoin round
  {static} +StrokeJoin bevel
}

class "lib::ui::ui.dart::PaintingStyle" {
  +int index
  {static} +List<PaintingStyle> values
  {static} +PaintingStyle fill
  {static} +PaintingStyle stroke
}

class "lib::ui::ui.dart::Clip" {
  +int index
  {static} +List<Clip> values
  {static} +Clip none
  {static} +Clip hardEdge
  {static} +Clip antiAlias
  {static} +Clip antiAliasWithSaveLayer
}

class "lib::ui::ui.dart::ColorSpace" {
  +int index
  {static} +List<ColorSpace> values
  {static} +ColorSpace sRGB
  {static} +ColorSpace extendedSRGB
}

class "lib::ui::ui.dart::ImageByteFormat" {
  +int index
  {static} +List<ImageByteFormat> values
  {static} +ImageByteFormat rawRgba
  {static} +ImageByteFormat rawStraightRgba
  {static} +ImageByteFormat rawUnmodified
  {static} +ImageByteFormat rawExtendedRgba128
  {static} +ImageByteFormat png
}

class "lib::ui::ui.dart::PixelFormat" {
  +int index
  {static} +List<PixelFormat> values
  {static} +PixelFormat rgba8888
  {static} +PixelFormat bgra8888
  {static} +PixelFormat rgbaFloat32
}

class "lib::ui::ui.dart::PathFillType" {
  +int index
  {static} +List<PathFillType> values
  {static} +PathFillType nonZero
  {static} +PathFillType evenOdd
}

class "lib::ui::ui.dart::PathOperation" {
  +int index
  {static} +List<PathOperation> values
  {static} +PathOperation difference
  {static} +PathOperation intersect
  {static} +PathOperation union
  {static} +PathOperation xor
  {static} +PathOperation reverseDifference
}

class "lib::ui::ui.dart::BlurStyle" {
  +int index
  {static} +List<BlurStyle> values
  {static} +BlurStyle normal
  {static} +BlurStyle solid
  {static} +BlurStyle outer
  {static} +BlurStyle inner
}

class "lib::ui::ui.dart::TileMode" {
  +int index
  {static} +List<TileMode> values
  {static} +TileMode clamp
  {static} +TileMode repeated
  {static} +TileMode mirror
  {static} +TileMode decal
}

class "lib::ui::ui.dart::VertexMode" {
  +int index
  {static} +List<VertexMode> values
  {static} +VertexMode triangles
  {static} +VertexMode triangleStrip
  {static} +VertexMode triangleFan
}

class "lib::ui::ui.dart::PointMode" {
  +int index
  {static} +List<PointMode> values
  {static} +PointMode points
  {static} +PointMode lines
  {static} +PointMode polygon
}

class "lib::ui::ui.dart::ClipOp" {
  +int index
  {static} +List<ClipOp> values
  {static} +ClipOp difference
  {static} +ClipOp intersect
}

class "lib::ui::ui.dart::RootIsolateToken" {
  -int _token
  {static} +RootIsolateToken? instance
  {static} -int __getRootIsolateToken()
}

class "lib::ui::ui.dart::PlatformDispatcher" {
  {static} -PlatformDispatcher _instance
  -_PlatformConfiguration _configuration
  -void Function()? _onPlatformConfigurationChanged
  -Zone _onPlatformConfigurationChangedZone
  -Map<int, Display> _displays
  -Map<int, FlutterView> _views
  -FlutterView? _debugLastImplicitView
  -bool _debugRecordedLastImplicitView
  -void Function()? _onMetricsChanged
  -Zone _onMetricsChangedZone
  -Set<FlutterView>? _debugRenderedViews
  -Set<FlutterView>? _debugRenderedViewsBetweenCallbacks
  -void Function(Duration)? _onBeginFrame
  -Zone _onBeginFrameZone
  -void Function()? _onDrawFrame
  -Zone _onDrawFrameZone
  -void Function(PointerDataPacket)? _onPointerDataPacket
  -Zone _onPointerDataPacketZone
  {static} -int _kPointerDataFieldCount
  -bool Function(KeyData)? _onKeyData
  {static} -int _kKeyDataFieldCount
  -void Function(List<FrameTiming>)? _onReportTimings
  -Zone _onReportTimingsZone
  -void Function(bool) _setNeedsReportTimings
  -void Function(String, ByteData?, void Function(ByteData?)?)? _onPlatformMessage
  -Zone _onPlatformMessageZone
  -void Function()? _onAccessibilityFeaturesChanged
  -Zone _onAccessibilityFeaturesChangedZone
  -void Function()? _onLocaleChanged
  -Zone _onLocaleChangedZone
  -String _initialLifecycleState
  -bool _initialLifecycleStateAccessed
  -void Function()? _onTextScaleFactorChanged
  -Zone _onTextScaleFactorChangedZone
  -bool _nativeSpellCheckServiceDefined
  -bool _brieflyShowPassword
  -void Function()? _onPlatformBrightnessChanged
  -Zone _onPlatformBrightnessChangedZone
  -void Function()? _onSystemFontFamilyChanged
  -Zone _onSystemFontFamilyChangedZone
  -void Function()? _onSemanticsEnabledChanged
  -Zone _onSemanticsEnabledChangedZone
  -void Function(SemanticsActionEvent)? _onSemanticsActionEvent
  -Zone _onSemanticsActionEventZone
  -FrameData _frameData
  -void Function()? _onFrameDataChanged
  -Zone _onFrameDataChangedZone
  -bool Function(Object, StackTrace)? _onError
  -Zone? _onErrorZone
  -Map<int, double>? _cachedFontSizes
  {static} +PlatformDispatcher instance
  +void Function()? onPlatformConfigurationChanged
  +Iterable<Display> displays
  +Iterable<FlutterView> views
  +FlutterView? implicitView
  +void Function()? onMetricsChanged
  +void Function(Duration)? onBeginFrame
  +void Function()? onDrawFrame
  +void Function(PointerDataPacket)? onPointerDataPacket
  +bool Function(KeyData)? onKeyData
  +void Function(List<FrameTiming>)? onReportTimings
  +void Function(String, ByteData?, void Function(ByteData?)?)? onPlatformMessage
  +AccessibilityFeatures accessibilityFeatures
  +void Function()? onAccessibilityFeaturesChanged
  +Locale locale
  +List<Locale> locales
  +void Function()? onLocaleChanged
  +String initialLifecycleState
  +bool alwaysUse24HourFormat
  +double textScaleFactor
  +void Function()? onTextScaleFactorChanged
  +bool nativeSpellCheckServiceDefined
  +bool brieflyShowPassword
  +Brightness platformBrightness
  +void Function()? onPlatformBrightnessChanged
  +String? systemFontFamily
  +void Function()? onSystemFontFamilyChanged
  +bool semanticsEnabled
  +void Function()? onSemanticsEnabledChanged
  +void Function(SemanticsActionEvent)? onSemanticsActionEvent
  +FrameData frameData
  +void Function()? onFrameDataChanged
  +bool Function(Object, StackTrace)? onError
  +String defaultRouteName
  +FlutterView? view()
  -void _addView()
  -void _removeView()
  -void _updateDisplays()
  -void _updateWindowMetrics()
  -void _beginFrame()
  -void _drawFrame()
  -void _dispatchPointerDataPacket()
  {static} -PointerDataPacket _unpackPointerDataPacket()
  {static} -void Function(ByteData?, void Function(ByteData?)) _keyDataListener()
  {static} -KeyData _unpackKeyData()
  -void _nativeSetNeedsReportTimings()
  {static} -void __nativeSetNeedsReportTimings()
  -void _reportTimings()
  +void sendPlatformMessage()
  -String? _sendPlatformMessage()
  {static} -String? __sendPlatformMessage()
  +void sendPortPlatformMessage()
  -String? _sendPortPlatformMessage()
  {static} -String? __sendPortPlatformMessage()
  +void registerBackgroundIsolate()
  {static} -void __registerBackgroundIsolate()
  -void _respondToPlatformMessage()
  {static} -void __respondToPlatformMessage()
  {static} -void Function(ByteData?)? _zonedPlatformMessageResponseCallback()
  -void _dispatchPlatformMessage()
  +void setIsolateDebugName()
  {static} -void _setIsolateDebugName()
  +void requestDartPerformanceMode()
  {static} -int _requestDartPerformanceMode()
  +ByteData? getPersistentIsolateData()
  {static} -ByteData? _getPersistentIsolateData()
  +void scheduleFrame()
  {static} -void _scheduleFrame()
  -void _updateAccessibilityFeatures()
  +void updateSemantics()
  {static} -void _updateSemantics()
  +Locale? computePlatformResolvedLocale()
  -List<String> _computePlatformResolvedLocale()
  {static} -List<String> __computePlatformResolvedLocale()
  -void _updateLocales()
  -String _localeClosure()
  -void _updateInitialLifecycleState()
  -void _updateUserSettingsData()
  -void _updateSemanticsEnabled()
  -void _updateFrameData()
  -void _dispatchSemanticsAction()
  -bool _dispatchError()
  {static} -String _defaultRouteName()
  +double scaleFontSize()
  -double? _scaleAndMemoize()
  {static} -double _getScaledFontSize()
}

class "lib::ui::ui.dart::_PlatformConfiguration" {
  +AccessibilityFeatures accessibilityFeatures
  +bool alwaysUse24HourFormat
  +bool semanticsEnabled
  +Brightness platformBrightness
  +double textScaleFactor
  +List<Locale> locales
  +String? defaultRouteName
  +String? systemFontFamily
  +int? configurationId
  +_PlatformConfiguration copyWith()
}

class "lib::ui::ui.dart::_ViewConfiguration" {
  +int displayId
  +double devicePixelRatio
  +Size size
  +ViewPadding viewInsets
  +ViewPadding viewPadding
  +ViewPadding systemGestureInsets
  +ViewPadding padding
  +GestureSettings gestureSettings
  +List<DisplayFeature> displayFeatures
  +String toString()
}

class "lib::ui::ui.dart::FrameTiming" {
  {static} -int _dataLength
  -List<int> _data
  +Duration buildDuration
  +Duration rasterDuration
  +Duration vsyncOverhead
  +Duration totalSpan
  +int layerCacheCount
  +int layerCacheBytes
  +double layerCacheMegabytes
  +int pictureCacheCount
  +int pictureCacheBytes
  +double pictureCacheMegabytes
  +int frameNumber
  +int timestampInMicroseconds()
  -Duration _rawDuration()
  -int _rawInfo()
  -String _formatMS()
  +String toString()
}

class "lib::ui::ui.dart::ViewPadding" {
  +double left
  +double top
  +double right
  +double bottom
  {static} +ViewPadding zero
  +String toString()
}

class "lib::ui::ui.dart::ViewConstraints" {
  +double minWidth
  +double maxWidth
  +double minHeight
  +double maxHeight
  +bool isTight
  +int hashCode
  +bool isSatisfiedBy()
  +ViewConstraints /()
  +bool ==()
  +String toString()
}

class "lib::ui::ui.dart::DisplayFeature" {
  +Rect bounds
  +DisplayFeatureType type
  +DisplayFeatureState state
  +int hashCode
  +bool ==()
  +String toString()
}

class "lib::ui::ui.dart::Locale" {
  -String _languageCode
  {static} -Map<String, String> _deprecatedLanguageSubtagMap
  +String? scriptCode
  -String? _countryCode
  {static} -Map<String, String> _deprecatedRegionSubtagMap
  {static} -Locale? _cachedLocale
  {static} -String? _cachedLocaleString
  +String languageCode
  +String? countryCode
  +int hashCode
  +bool ==()
  +String toString()
  +String toLanguageTag()
  -String _rawToString()
}

class "lib::ui::ui.dart::SemanticsActionEvent" {
  +SemanticsAction type
  +int viewId
  +int nodeId
  +Object? arguments
  {static} -Object _noArgumentPlaceholder
  +SemanticsActionEvent copyWith()
}

class "lib::ui::ui.dart::FramePhase" {
  +int index
  {static} +List<FramePhase> values
  {static} +FramePhase vsyncStart
  {static} +FramePhase buildStart
  {static} +FramePhase buildFinish
  {static} +FramePhase rasterStart
  {static} +FramePhase rasterFinish
  {static} +FramePhase rasterFinishWallTime
}

class "lib::ui::ui.dart::_FrameTimingInfo" {
  +int index
  {static} +List<_FrameTimingInfo> values
  {static} +_FrameTimingInfo layerCacheCount
  {static} +_FrameTimingInfo layerCacheBytes
  {static} +_FrameTimingInfo pictureCacheCount
  {static} +_FrameTimingInfo pictureCacheBytes
  {static} +_FrameTimingInfo frameNumber
}

class "lib::ui::ui.dart::AppLifecycleState" {
  +int index
  {static} +List<AppLifecycleState> values
  {static} +AppLifecycleState detached
  {static} +AppLifecycleState resumed
  {static} +AppLifecycleState inactive
  {static} +AppLifecycleState hidden
  {static} +AppLifecycleState paused
}

class "lib::ui::ui.dart::AppExitResponse" {
  +int index
  {static} +List<AppExitResponse> values
  {static} +AppExitResponse exit
  {static} +AppExitResponse cancel
}

class "lib::ui::ui.dart::AppExitType" {
  +int index
  {static} +List<AppExitType> values
  {static} +AppExitType cancelable
  {static} +AppExitType required
}

class "lib::ui::ui.dart::DisplayFeatureType" {
  +int index
  {static} +List<DisplayFeatureType> values
  {static} +DisplayFeatureType unknown
  {static} +DisplayFeatureType fold
  {static} +DisplayFeatureType hinge
  {static} +DisplayFeatureType cutout
}

class "lib::ui::ui.dart::DisplayFeatureState" {
  +int index
  {static} +List<DisplayFeatureState> values
  {static} +DisplayFeatureState unknown
  {static} +DisplayFeatureState postureFlat
  {static} +DisplayFeatureState postureHalfOpened
}

class "lib::ui::ui.dart::DartPerformanceMode" {
  +int index
  {static} +List<DartPerformanceMode> values
  {static} +DartPerformanceMode balanced
  {static} +DartPerformanceMode latency
  {static} +DartPerformanceMode throughput
  {static} +DartPerformanceMode memory
}

class "lib::ui::ui.dart::CallbackHandle" {
  -int _handle
  +int hashCode
  +int toRawHandle()
  +bool ==()
}

abstract class "lib::ui::ui.dart::PluginUtilities" {
  {static} -Map<Function, CallbackHandle?> _forwardCache
  {static} -Map<CallbackHandle, Function?> _backwardCache
  {static} +CallbackHandle? getCallbackHandle()
  {static} +Function? getCallbackFromHandle()
}

class "lib::ui::ui.dart::PointerData" {
  +int viewId
  +int embedderId
  +Duration timeStamp
  +PointerChange change
  +PointerDeviceKind kind
  +PointerSignalKind? signalKind
  +int device
  +int pointerIdentifier
  +double physicalX
  +double physicalY
  +double physicalDeltaX
  +double physicalDeltaY
  +int buttons
  +bool obscured
  +bool synthesized
  +double pressure
  +double pressureMin
  +double pressureMax
  +double distance
  +double distanceMax
  +double size
  +double radiusMajor
  +double radiusMinor
  +double radiusMin
  +double radiusMax
  +double orientation
  +double tilt
  +int platformData
  +double scrollDeltaX
  +double scrollDeltaY
  +double panX
  +double panY
  +double panDeltaX
  +double panDeltaY
  +double scale
  +double rotation
  +String toString()
  +String toStringFull()
}

class "lib::ui::ui.dart::PointerDataPacket" {
  +List<PointerData> data
}

class "lib::ui::ui.dart::PointerChange" {
  +int index
  {static} +List<PointerChange> values
  {static} +PointerChange cancel
  {static} +PointerChange add
  {static} +PointerChange remove
  {static} +PointerChange hover
  {static} +PointerChange down
  {static} +PointerChange move
  {static} +PointerChange up
  {static} +PointerChange panZoomStart
  {static} +PointerChange panZoomUpdate
  {static} +PointerChange panZoomEnd
}

class "lib::ui::ui.dart::PointerDeviceKind" {
  +int index
  {static} +List<PointerDeviceKind> values
  {static} +PointerDeviceKind touch
  {static} +PointerDeviceKind mouse
  {static} +PointerDeviceKind stylus
  {static} +PointerDeviceKind invertedStylus
  {static} +PointerDeviceKind trackpad
  {static} +PointerDeviceKind unknown
}

class "lib::ui::ui.dart::PointerSignalKind" {
  +int index
  {static} +List<PointerSignalKind> values
  {static} +PointerSignalKind none
  {static} +PointerSignalKind scroll
  {static} +PointerSignalKind scrollInertiaCancel
  {static} +PointerSignalKind scale
  {static} +PointerSignalKind unknown
}

class "lib::ui::ui.dart::SemanticsAction" {
  +int index
  +String name
  {static} -int _kTapIndex
  {static} -int _kLongPressIndex
  {static} -int _kScrollLeftIndex
  {static} -int _kScrollRightIndex
  {static} -int _kScrollUpIndex
  {static} -int _kScrollDownIndex
  {static} -int _kIncreaseIndex
  {static} -int _kDecreaseIndex
  {static} -int _kShowOnScreenIndex
  {static} -int _kMoveCursorForwardByCharacterIndex
  {static} -int _kMoveCursorBackwardByCharacterIndex
  {static} -int _kSetSelectionIndex
  {static} -int _kCopyIndex
  {static} -int _kCutIndex
  {static} -int _kPasteIndex
  {static} -int _kDidGainAccessibilityFocusIndex
  {static} -int _kDidLoseAccessibilityFocusIndex
  {static} -int _kCustomActionIndex
  {static} -int _kDismissIndex
  {static} -int _kMoveCursorForwardByWordIndex
  {static} -int _kMoveCursorBackwardByWordIndex
  {static} -int _kSetTextIndex
  {static} +SemanticsAction tap
  {static} +SemanticsAction longPress
  {static} +SemanticsAction scrollLeft
  {static} +SemanticsAction scrollRight
  {static} +SemanticsAction scrollUp
  {static} +SemanticsAction scrollDown
  {static} +SemanticsAction increase
  {static} +SemanticsAction decrease
  {static} +SemanticsAction showOnScreen
  {static} +SemanticsAction moveCursorForwardByCharacter
  {static} +SemanticsAction moveCursorBackwardByCharacter
  {static} +SemanticsAction setText
  {static} +SemanticsAction setSelection
  {static} +SemanticsAction copy
  {static} +SemanticsAction cut
  {static} +SemanticsAction paste
  {static} +SemanticsAction didGainAccessibilityFocus
  {static} +SemanticsAction didLoseAccessibilityFocus
  {static} +SemanticsAction customAction
  {static} +SemanticsAction dismiss
  {static} +SemanticsAction moveCursorForwardByWord
  {static} +SemanticsAction moveCursorBackwardByWord
  {static} -Map<int, SemanticsAction> _kActionById
  {static} +List<SemanticsAction> values
  {static} +SemanticsAction? fromIndex()
  +String toString()
}

class "lib::ui::ui.dart::SemanticsFlag" {
  +int index
  +String name
  {static} -int _kHasCheckedStateIndex
  {static} -int _kIsCheckedIndex
  {static} -int _kIsSelectedIndex
  {static} -int _kIsButtonIndex
  {static} -int _kIsTextFieldIndex
  {static} -int _kIsFocusedIndex
  {static} -int _kHasEnabledStateIndex
  {static} -int _kIsEnabledIndex
  {static} -int _kIsInMutuallyExclusiveGroupIndex
  {static} -int _kIsHeaderIndex
  {static} -int _kIsObscuredIndex
  {static} -int _kScopesRouteIndex
  {static} -int _kNamesRouteIndex
  {static} -int _kIsHiddenIndex
  {static} -int _kIsImageIndex
  {static} -int _kIsLiveRegionIndex
  {static} -int _kHasToggledStateIndex
  {static} -int _kIsToggledIndex
  {static} -int _kHasImplicitScrollingIndex
  {static} -int _kIsMultilineIndex
  {static} -int _kIsReadOnlyIndex
  {static} -int _kIsFocusableIndex
  {static} -int _kIsLinkIndex
  {static} -int _kIsSliderIndex
  {static} -int _kIsKeyboardKeyIndex
  {static} -int _kIsCheckStateMixedIndex
  {static} -int _kHasExpandedStateIndex
  {static} -int _kIsExpandedIndex
  {static} +SemanticsFlag hasCheckedState
  {static} +SemanticsFlag isChecked
  {static} +SemanticsFlag isCheckStateMixed
  {static} +SemanticsFlag isSelected
  {static} +SemanticsFlag isButton
  {static} +SemanticsFlag isTextField
  {static} +SemanticsFlag isSlider
  {static} +SemanticsFlag isKeyboardKey
  {static} +SemanticsFlag isReadOnly
  {static} +SemanticsFlag isLink
  {static} +SemanticsFlag isFocusable
  {static} +SemanticsFlag isFocused
  {static} +SemanticsFlag hasEnabledState
  {static} +SemanticsFlag isEnabled
  {static} +SemanticsFlag isInMutuallyExclusiveGroup
  {static} +SemanticsFlag isHeader
  {static} +SemanticsFlag isObscured
  {static} +SemanticsFlag isMultiline
  {static} +SemanticsFlag scopesRoute
  {static} +SemanticsFlag namesRoute
  {static} +SemanticsFlag isHidden
  {static} +SemanticsFlag isImage
  {static} +SemanticsFlag isLiveRegion
  {static} +SemanticsFlag hasToggledState
  {static} +SemanticsFlag isToggled
  {static} +SemanticsFlag hasImplicitScrolling
  {static} +SemanticsFlag hasExpandedState
  {static} +SemanticsFlag isExpanded
  {static} -Map<int, SemanticsFlag> _kFlagById
  {static} +List<SemanticsFlag> values
  {static} +SemanticsFlag? fromIndex()
  +String toString()
}

class "lib::ui::ui.dart::StringAttribute" {
  +TextRange range
  +StringAttribute copy()
}

class "lib::ui::ui.dart::SpellOutStringAttribute" {
  {static} -void _initSpellOutStringAttribute()
  +StringAttribute copy()
  +String toString()
}

class "lib::ui::ui.dart::LocaleStringAttribute" {
  +Locale locale
  {static} -void _initLocaleStringAttribute()
  +StringAttribute copy()
  +String toString()
}

abstract class "lib::ui::ui.dart::SemanticsUpdateBuilder" {
  +void updateNode()
  +void updateCustomAction()
  +SemanticsUpdate build()
}

class "lib::ui::ui.dart::_NativeSemanticsUpdateBuilder" {
  -void _constructor()
  +void updateNode()
  -void _updateNode()
  +void updateCustomAction()
  -void _updateCustomAction()
  +SemanticsUpdate build()
  -void _build()
}

abstract class "lib::ui::ui.dart::SemanticsUpdate" {
  +void dispose()
}

class "lib::ui::ui.dart::_NativeSemanticsUpdate" {
  +void dispose()
}

class "lib::ui::ui.dart::FontWeight" {
  +int index
  +int value
  {static} +FontWeight w100
  {static} +FontWeight w200
  {static} +FontWeight w300
  {static} +FontWeight w400
  {static} +FontWeight w500
  {static} +FontWeight w600
  {static} +FontWeight w700
  {static} +FontWeight w800
  {static} +FontWeight w900
  {static} +FontWeight normal
  {static} +FontWeight bold
  {static} +List<FontWeight> values
  {static} +FontWeight? lerp()
  +String toString()
}

class "lib::ui::ui.dart::FontFeature" {
  +String feature
  +int value
  {static} -int _kEncodedSize
  +int hashCode
  -void _encode()
  +bool ==()
  +String toString()
}

class "lib::ui::ui.dart::FontVariation" {
  +String axis
  +double value
  {static} -int _kEncodedSize
  +int hashCode
  -void _encode()
  +bool ==()
  {static} +FontVariation? lerp()
  +String toString()
}

class "lib::ui::ui.dart::GlyphInfo" {
  +Rect graphemeClusterLayoutBounds
  +TextRange graphemeClusterCodeUnitRange
  +TextDirection writingDirection
  +int hashCode
  +bool ==()
  +String toString()
}

class "lib::ui::ui.dart::TextDecoration" {
  -int _mask
  {static} +TextDecoration none
  {static} +TextDecoration underline
  {static} +TextDecoration overline
  {static} +TextDecoration lineThrough
  +int hashCode
  +bool contains()
  +bool ==()
  +String toString()
}

class "lib::ui::ui.dart::TextHeightBehavior" {
  +bool applyHeightToFirstAscent
  +bool applyHeightToLastDescent
  +TextLeadingDistribution leadingDistribution
  +int hashCode
  -int _encode()
  +bool ==()
  +String toString()
}

class "lib::ui::ui.dart::TextStyle" {
  -Int32List _encoded
  -String _fontFamily
  -List<String>? _fontFamilyFallback
  -double? _fontSize
  -double? _letterSpacing
  -double? _wordSpacing
  -double? _height
  -double? _decorationThickness
  -Locale? _locale
  -Paint? _background
  -Paint? _foreground
  -List<Shadow>? _shadows
  -List<FontFeature>? _fontFeatures
  -List<FontVariation>? _fontVariations
  -TextLeadingDistribution? _leadingDistribution
  +int hashCode
  +bool ==()
  +String toString()
}

class "lib::ui::ui.dart::ParagraphStyle" {
  -Int32List _encoded
  -String? _fontFamily
  -double? _fontSize
  -double? _height
  -StrutStyle? _strutStyle
  -String? _ellipsis
  -Locale? _locale
  -TextLeadingDistribution _leadingDistribution
  +int hashCode
  +bool ==()
  +String toString()
}

class "lib::ui::ui.dart::StrutStyle" {
  -ByteData _encoded
  -String? _fontFamily
  -List<String>? _fontFamilyFallback
  -TextLeadingDistribution? _leadingDistribution
  -bool _enabled
  +int hashCode
  +bool ==()
}

class "lib::ui::ui.dart::TextBox" {
  +double left
  +double top
  +double right
  +double bottom
  +TextDirection direction
  +double start
  +double end
  +int hashCode
  +Rect toRect()
  +bool ==()
  +String toString()
}

class "lib::ui::ui.dart::TextPosition" {
  +int offset
  +TextAffinity affinity
  +int hashCode
  +bool ==()
  +String toString()
}

class "lib::ui::ui.dart::TextRange" {
  {static} +TextRange empty
  +int start
  +int end
  +bool isValid
  +bool isCollapsed
  +bool isNormalized
  +int hashCode
  +String textBefore()
  +String textAfter()
  +String textInside()
  +bool ==()
  +String toString()
}

class "lib::ui::ui.dart::ParagraphConstraints" {
  +double width
  +int hashCode
  +bool ==()
  +String toString()
}

class "lib::ui::ui.dart::LineMetrics" {
  +bool hardBreak
  +double ascent
  +double descent
  +double unscaledAscent
  +double height
  +double width
  +double left
  +double baseline
  +int lineNumber
  +int hashCode
  +bool ==()
  +String toString()
}

abstract class "lib::ui::ui.dart::Paragraph" {
  +double width
  +double height
  +double longestLine
  +double minIntrinsicWidth
  +double maxIntrinsicWidth
  +double alphabeticBaseline
  +double ideographicBaseline
  +bool didExceedMaxLines
  +int numberOfLines
  +bool debugDisposed
  +void layout()
  +List<TextBox> getBoxesForRange()
  +List<TextBox> getBoxesForPlaceholders()
  +TextPosition getPositionForOffset()
  +GlyphInfo? getClosestGlyphInfoForOffset()
  +GlyphInfo? getGlyphInfoAt()
  +TextRange getWordBoundary()
  +TextRange getLineBoundary()
  +List<LineMetrics> computeLineMetrics()
  +LineMetrics? getLineMetricsAt()
  +int? getLineNumberAt()
  +void dispose()
}

class "lib::ui::ui.dart::_NativeParagraph" {
  -bool _needsLayout
  -bool _disposed
  +double width
  +double height
  +double longestLine
  +double minIntrinsicWidth
  +double maxIntrinsicWidth
  +double alphabeticBaseline
  +double ideographicBaseline
  +bool didExceedMaxLines
  +int numberOfLines
  +bool debugDisposed
  +void layout()
  -void _layout()
  -List<TextBox> _decodeTextBoxes()
  +List<TextBox> getBoxesForRange()
  -Float32List _getBoxesForRange()
  +List<TextBox> getBoxesForPlaceholders()
  -Float32List _getBoxesForPlaceholders()
  +TextPosition getPositionForOffset()
  -List<int> _getPositionForOffset()
  +GlyphInfo? getGlyphInfoAt()
  -GlyphInfo? _getGlyphInfoAt()
  +GlyphInfo? getClosestGlyphInfoForOffset()
  -GlyphInfo? _getClosestGlyphInfoForOffset()
  +TextRange getWordBoundary()
  -List<int> _getWordBoundary()
  +TextRange getLineBoundary()
  -List<int> _getLineBoundary()
  -void _paint()
  +List<LineMetrics> computeLineMetrics()
  -Float64List _computeLineMetrics()
  +LineMetrics? getLineMetricsAt()
  -LineMetrics? _getLineMetricsAt()
  +int? getLineNumberAt()
  -int _getLineNumber()
  +void dispose()
  -void _dispose()
}

abstract class "lib::ui::ui.dart::ParagraphBuilder" {
  {static} -bool _shouldDisableRoundingHack
  {static} +bool shouldDisableRoundingHack
  +int placeholderCount
  +List<double> placeholderScales
  {static} +void setDisableRoundingHack()
  +void pushStyle()
  +void pop()
  +void addText()
  +void addPlaceholder()
  +Paragraph build()
}

class "lib::ui::ui.dart::_NativeParagraphBuilder" {
  -int _placeholderCount
  -List<double> _placeholderScales
  -TextLeadingDistribution _defaultLeadingDistribution
  +int placeholderCount
  +List<double> placeholderScales
  -void _constructor()
  +void pushStyle()
  -void _pushStyle()
  {static} -String _encodeLocale()
  +void pop()
  +void addText()
  -String? _addText()
  +void addPlaceholder()
  -void _addPlaceholder()
  +Paragraph build()
  -void _build()
}

class "lib::ui::ui.dart::FontStyle" {
  +int index
  {static} +List<FontStyle> values
  {static} +FontStyle normal
  {static} +FontStyle italic
}

class "lib::ui::ui.dart::TextAlign" {
  +int index
  {static} +List<TextAlign> values
  {static} +TextAlign left
  {static} +TextAlign right
  {static} +TextAlign center
  {static} +TextAlign justify
  {static} +TextAlign start
  {static} +TextAlign end
}

class "lib::ui::ui.dart::TextBaseline" {
  +int index
  {static} +List<TextBaseline> values
  {static} +TextBaseline alphabetic
  {static} +TextBaseline ideographic
}

class "lib::ui::ui.dart::TextDecorationStyle" {
  +int index
  {static} +List<TextDecorationStyle> values
  {static} +TextDecorationStyle solid
  {static} +TextDecorationStyle double
  {static} +TextDecorationStyle dotted
  {static} +TextDecorationStyle dashed
  {static} +TextDecorationStyle wavy
}

class "lib::ui::ui.dart::TextLeadingDistribution" {
  +int index
  {static} +List<TextLeadingDistribution> values
  {static} +TextLeadingDistribution proportional
  {static} +TextLeadingDistribution even
}

class "lib::ui::ui.dart::TextDirection" {
  +int index
  {static} +List<TextDirection> values
  {static} +TextDirection rtl
  {static} +TextDirection ltr
}

class "lib::ui::ui.dart::TextAffinity" {
  +int index
  {static} +List<TextAffinity> values
  {static} +TextAffinity upstream
  {static} +TextAffinity downstream
}

class "lib::ui::ui.dart::BoxHeightStyle" {
  +int index
  {static} +List<BoxHeightStyle> values
  {static} +BoxHeightStyle tight
  {static} +BoxHeightStyle max
  {static} +BoxHeightStyle includeLineSpacingMiddle
  {static} +BoxHeightStyle includeLineSpacingTop
  {static} +BoxHeightStyle includeLineSpacingBottom
  {static} +BoxHeightStyle strut
}

class "lib::ui::ui.dart::BoxWidthStyle" {
  +int index
  {static} +List<BoxWidthStyle> values
  {static} +BoxWidthStyle tight
  {static} +BoxWidthStyle max
}

class "lib::ui::ui.dart::PlaceholderAlignment" {
  +int index
  {static} +List<PlaceholderAlignment> values
  {static} +PlaceholderAlignment baseline
  {static} +PlaceholderAlignment aboveBaseline
  {static} +PlaceholderAlignment belowBaseline
  {static} +PlaceholderAlignment top
  {static} +PlaceholderAlignment bottom
  {static} +PlaceholderAlignment middle
}

class "lib::ui::ui.dart::Display" {
  +int id
  +double devicePixelRatio
  +Size size
  +double refreshRate
  +String toString()
}

class "lib::ui::ui.dart::FlutterView" {
  +int viewId
  +PlatformDispatcher platformDispatcher
  -_ViewConfiguration _viewConfiguration
  +Display display
  +double devicePixelRatio
  +ViewConstraints physicalConstraints
  +Size physicalSize
  +ViewPadding viewInsets
  +ViewPadding viewPadding
  +ViewPadding systemGestureInsets
  +ViewPadding padding
  +GestureSettings gestureSettings
  +List<DisplayFeature> displayFeatures
  +void render()
  {static} -void _render()
  +void updateSemantics()
  {static} -void _updateSemantics()
  +String toString()
}

class "lib::ui::ui.dart::SingletonFlutterWindow" {
  -_ViewConfiguration _viewConfiguration
  +void Function()? onMetricsChanged
  +Locale locale
  +List<Locale> locales
  +void Function()? onLocaleChanged
  +String initialLifecycleState
  +double textScaleFactor
  +bool nativeSpellCheckServiceDefined
  +bool brieflyShowPassword
  +bool alwaysUse24HourFormat
  +void Function()? onTextScaleFactorChanged
  +Brightness platformBrightness
  +void Function()? onPlatformBrightnessChanged
  +String? systemFontFamily
  +void Function()? onSystemFontFamilyChanged
  +void Function(Duration)? onBeginFrame
  +void Function()? onDrawFrame
  +void Function(List<FrameTiming>)? onReportTimings
  +void Function(PointerDataPacket)? onPointerDataPacket
  +bool Function(KeyData)? onKeyData
  +String defaultRouteName
  +bool semanticsEnabled
  +void Function()? onSemanticsEnabledChanged
  +FrameData frameData
  +void Function()? onFrameDataChanged
  +AccessibilityFeatures accessibilityFeatures
  +void Function()? onAccessibilityFeaturesChanged
  +void Function(String, ByteData?, void Function(ByteData?)?)? onPlatformMessage
  +Locale? computePlatformResolvedLocale()
  +void scheduleFrame()
  +void sendPlatformMessage()
  +void setIsolateDebugName()
}

class "lib::ui::ui.dart::AccessibilityFeatures" {
  {static} -int _kAccessibleNavigationIndex
  {static} -int _kInvertColorsIndex
  {static} -int _kDisableAnimationsIndex
  {static} -int _kBoldTextIndex
  {static} -int _kReduceMotionIndex
  {static} -int _kHighContrastIndex
  {static} -int _kOnOffSwitchLabelsIndex
  -int _index
  +bool accessibleNavigation
  +bool invertColors
  +bool disableAnimations
  +bool boldText
  +bool reduceMotion
  +bool highContrast
  +bool onOffSwitchLabels
  +int hashCode
  +String toString()
  +bool ==()
}

class "lib::ui::ui.dart::FrameData" {
  +int frameNumber
}

class "lib::ui::ui.dart::GestureSettings" {
  +double? physicalTouchSlop
  +double? physicalDoubleTapSlop
  +int hashCode
  +GestureSettings copyWith()
  +bool ==()
  +String toString()
}

class "lib::ui::ui.dart::Brightness" {
  +int index
  {static} +List<Brightness> values
  {static} +Brightness dark
  {static} +Brightness light
}

abstract class "lib::developer::developer.dart::NativeRuntime" {
  {static} +String? buildId
  {static} +void writeHeapSnapshotToFile()
}

class "lib::developer::developer.dart::ServiceExtensionResponse" {
  +String? result
  +int? errorCode
  +String? errorDetail
  {static} +int invalidParams
  {static} +int extensionError
  {static} +int extensionErrorMax
  {static} +int extensionErrorMin
  {static} -String _errorCodeMessage()
  {static} -dynamic _validateErrorCode()
  +bool isError()
  -String _toString()
}

abstract class "lib::developer::developer.dart::UserTag" {
  {static} +int maxUserTags
  +String label
  {static} +UserTag defaultTag
  +UserTag makeCurrent()
}

class "lib::developer::developer.dart::ServiceProtocolInfo" {
  +int majorVersion
  +int minorVersion
  +Uri? serverUri
  +Uri? serverWebSocketUri
  +String toString()
}

class "lib::developer::developer.dart::Service" {
  {static} +dynamic getInfo()
  {static} +dynamic controlWebServer()
  {static} +String? getIsolateId()
  {static} +String? getIsolateID()
  {static} +String? getObjectId()
}

class "lib::developer::developer.dart::Flow" {
  -int _type
  +int id
  {static} +Flow begin()
  {static} +Flow step()
  {static} +Flow end()
}

abstract class "lib::developer::developer.dart::Timeline" {
  {static} -List<_SyncBlock?> _stack
  {static} +int now
  {static} +void startSync()
  {static} +void finishSync()
  {static} +void instantSync()
  {static} +T timeSync()
}

class "lib::developer::developer.dart::TimelineTask" {
  {static} -String _kFilterKey
  -TimelineTask? _parent
  -String? _filterKey
  -int _taskId
  -List<_AsyncBlock?> _stack
  +void start()
  +void instant()
  +void finish()
  +int pass()
}

class "lib::developer::developer.dart::_AsyncBlock" {
  +String name
  -int _taskId
  -void _start()
  -void _finish()
}

class "lib::developer::developer.dart::_SyncBlock" {
  +String name
  +int taskId
  +Map<dynamic, dynamic>? arguments
  +Flow? flow
  -String _jsonArguments
  -void _startSync()
  +void finish()
}

class "dart::_internal::DoubleLinkedQueueEntry" {
  -DoubleLinkedQueueEntry<E>? _previousLink
  -DoubleLinkedQueueEntry<E>? _nextLink
  +E element
  -void _link()
  +void append()
  +void prepend()
  +E remove()
  +DoubleLinkedQueueEntry<E>? previousEntry()
  +DoubleLinkedQueueEntry<E>? nextEntry()
}

class "lib::collection::collection.dart::UnmodifiableListView" {
  -Iterable<E> _source
  +int length
  +List<R> cast()
  +E []()
}

abstract class "lib::collection::collection.dart::HashMap" {
}

abstract class "lib::collection::collection.dart::HashSet" {
  +Iterator<E> iterator
}

class "lib::collection::collection.dart::HasNextIterator" {
  -Iterator<E> _iterator
  -bool? _hasNext
  +bool hasNext
  -bool _ensureHasNext
  +E next()
}

abstract class "lib::collection::collection.dart::LinkedHashMap" {
}

abstract class "lib::collection::collection.dart::LinkedHashSet" {
  +Iterator<E> iterator
  +void forEach()
}

class "lib::collection::collection.dart::LinkedList" {
  -int _modificationCount
  -int _length
  -E? _first
  +Iterator<E> iterator
  +int length
  +E first
  +E last
  +E single
  +bool isEmpty
  +void addFirst()
  +void add()
  +void addAll()
  +bool remove()
  +bool contains()
  +void clear()
  +void forEach()
  -void _insertBefore()
  -void _unlink()
}

class "lib::collection::collection.dart::_LinkedListIterator" {
  -LinkedList<E> _list
  -int _modificationCount
  -E? _current
  -E? _next
  -bool _visitedFirst
  +E current
  +bool moveNext()
}

class "lib::collection::collection.dart::LinkedListEntry" {
  -LinkedList<E>? _list
  -E? _next
  -E? _previous
  +LinkedList<E>? list
  +E? next
  +E? previous
  +void unlink()
  +void insertAfter()
  +void insertBefore()
}


class "lib::collection::collection.dart::ListBase" {
  +Iterator<E> iterator
  +bool isEmpty
  +bool isNotEmpty
  +E first
  +E last
  +E single
  +Iterable<E> reversed
  +E elementAt()
  +Iterable<E> followedBy()
  +void forEach()
  +bool contains()
  +bool every()
  +bool any()
  +E firstWhere()
  +E lastWhere()
  +E singleWhere()
  +String join()
  +Iterable<E> where()
  +Iterable<T> whereType()
  +Iterable<T> map()
  +Iterable<T> expand()
  +E reduce()
  +T fold()
  +Iterable<E> skip()
  +Iterable<E> skipWhile()
  +Iterable<E> take()
  +Iterable<E> takeWhile()
  +List<E> toList()
  +Set<E> toSet()
  +void add()
  +void addAll()
  +bool remove()
  -void _closeGap()
  +void removeWhere()
  +void retainWhere()
  -void _filter()
  +void clear()
  +List<R> cast()
  +E removeLast()
  +void sort()
  {static} -int _compareAny()
  +void shuffle()
  +Map<int, E> asMap()
  +List<E> +()
  +List<E> sublist()
  +Iterable<E> getRange()
  +void removeRange()
  +void fillRange()
  +void setRange()
  +void replaceRange()
  +int indexOf()
  +int indexWhere()
  +int lastIndexOf()
  +int lastIndexWhere()
  +void insert()
  +E removeAt()
  +void insertAll()
  +void setAll()
  +String toString()
  {static} +String listToString()
}


class "lib::collection::collection.dart::MapBase" {
  +Iterable<K> keys
  +Iterable<MapEntry<K, V>> entries
  +int length
  +bool isEmpty
  +bool isNotEmpty
  +Iterable<V> values
  +V? []()
  +void []=()
  +V? remove()
  +void clear()
  +Map<RK, RV> cast()
  +void forEach()
  +void addAll()
  +bool containsValue()
  +V putIfAbsent()
  +V update()
  +void updateAll()
  +Map<K2, V2> map()
  +void addEntries()
  +void removeWhere()
  +bool containsKey()
  +String toString()
  {static} +String mapToString()
  {static} -void _fillMapWithMappedIterable()
  {static} -Object? _id()
  {static} -void _fillMapWithIterables()
}

abstract class "lib::collection::collection.dart::UnmodifiableMapBase" {
}

class "lib::collection::collection.dart::_MapBaseValueIterable" {
  -Map<K, V> _map
  +int length
  +bool isEmpty
  +bool isNotEmpty
  +V first
  +V single
  +V last
  +Iterator<V> iterator
}

class "lib::collection::collection.dart::_MapBaseValueIterator" {
  -Iterator<K> _keys
  -Map<K, V> _map
  -V? _current
  +V current
  +bool moveNext()
}

class "lib::collection::collection.dart::MapView" {
  -Map<K, V> _map
  +bool isEmpty
  +bool isNotEmpty
  +int length
  +Iterable<K> keys
  +Iterable<V> values
  +Iterable<MapEntry<K, V>> entries
  +Map<RK, RV> cast()
  +V? []()
  +void []=()
  +void addAll()
  +void clear()
  +V putIfAbsent()
  +bool containsKey()
  +bool containsValue()
  +void forEach()
  +V? remove()
  +String toString()
  +void addEntries()
  +Map<K2, V2> map()
  +V update()
  +void updateAll()
  +void removeWhere()
}

class "lib::collection::collection.dart::UnmodifiableMapView" {
  +Map<RK, RV> cast()
}


abstract class "lib::collection::collection.dart::_UnmodifiableMapMixin" {
  +void []=()
  +void addAll()
  +void addEntries()
  +void clear()
  +V? remove()
  +void removeWhere()
  +V putIfAbsent()
  +V update()
  +void updateAll()
}

abstract class "lib::collection::collection.dart::_QueueIterable" {
}

class "lib::collection::collection.dart::Queue" {
  {static} +Queue<T> castFrom()
  +Queue<R> cast()
  +E removeFirst()
  +E removeLast()
  +void addFirst()
  +void addLast()
  +void add()
  +bool remove()
  +void addAll()
  +void removeWhere()
  +void retainWhere()
  +void clear()
}

abstract class "lib::collection::collection.dart::_DoubleLinkedQueueEntry" {
  -_DoubleLinkedQueueEntry<E>? _previousLink
  -_DoubleLinkedQueueEntry<E>? _nextLink
  +E element
  -void _link()
  -void _unlink()
  -_DoubleLinkedQueueElement<E>? _asNonSentinelEntry()
  -void _append()
  -void _prepend()
  -E _remove()
}

class "lib::collection::collection.dart::_DoubleLinkedQueueElement" {
  -DoubleLinkedQueue<E>? _queue
  +E element
  +void append()
  +void prepend()
  -E _remove()
  +E remove()
  -_DoubleLinkedQueueElement<E> _asNonSentinelEntry()
  +DoubleLinkedQueueEntry<E>? previousEntry()
  +DoubleLinkedQueueEntry<E>? nextEntry()
}

class "lib::collection::collection.dart::_DoubleLinkedQueueSentinel" {
  +E element
  -Null _asNonSentinelEntry()
  -E _remove()
}

class "lib::collection::collection.dart::DoubleLinkedQueue" {
  -_DoubleLinkedQueueSentinel<E> _sentinel
  -int _elementCount
  +int length
  +E first
  +E last
  +E single
  +bool isEmpty
  +_DoubleLinkedQueueIterator<E> iterator
  +Queue<R> cast()
  +void addLast()
  +void addFirst()
  +void add()
  +void addAll()
  +E removeLast()
  +E removeFirst()
  +bool remove()
  -void _filter()
  +void removeWhere()
  +void retainWhere()
  +DoubleLinkedQueueEntry<E>? firstEntry()
  +DoubleLinkedQueueEntry<E>? lastEntry()
  +void clear()
  +void forEachEntry()
  +String toString()
}

class "lib::collection::collection.dart::_DoubleLinkedQueueIterator" {
  -DoubleLinkedQueue<E>? _queue
  -_DoubleLinkedQueueEntry<E>? _nextEntry
  -E? _current
  +E current
  +bool moveNext()
}

class "lib::collection::collection.dart::ListQueue" {
  {static} -int _INITIAL_CAPACITY
  -List<E?> _table
  -int _head
  -int _tail
  -int _modificationCount
  +Iterator<E> iterator
  +bool isEmpty
  +int length
  +E first
  +E last
  +E single
  {static} -int _calculateCapacity()
  +Queue<R> cast()
  +void forEach()
  +E elementAt()
  +List<E> toList()
  +void add()
  +void addAll()
  +bool remove()
  -void _filterWhere()
  +void removeWhere()
  +void retainWhere()
  +void clear()
  +String toString()
  +void addLast()
  +void addFirst()
  +E removeFirst()
  +E removeLast()
  {static} -bool _isPowerOf2()
  {static} -int _nextPowerOf2()
  -void _checkModification()
  -void _add()
  -int _remove()
  -void _grow()
  -int _writeToList()
  -void _preGrow()
}

class "lib::collection::collection.dart::_ListQueueIterator" {
  -ListQueue<E> _queue
  -int _end
  -int _modificationCount
  -int _position
  -E? _current
  +E current
  +bool moveNext()
}

class "lib::collection::collection.dart::SetBase" {
  +Iterator<E> iterator
  +int length
  +bool isEmpty
  +bool isNotEmpty
  +E single
  +E first
  +E last
  +bool add()
  +bool contains()
  +E? lookup()
  +bool remove()
  +Set<E> toSet()
  +Set<R> cast()
  +Iterable<E> followedBy()
  +Iterable<T> whereType()
  +void clear()
  +void addAll()
  +void removeAll()
  +void retainAll()
  +void removeWhere()
  +void retainWhere()
  +bool containsAll()
  +Set<E> union()
  +Set<E> intersection()
  +Set<E> difference()
  +List<E> toList()
  +Iterable<T> map()
  +String toString()
  +Iterable<E> where()
  +Iterable<T> expand()
  +void forEach()
  +E reduce()
  +T fold()
  +bool every()
  +String join()
  +bool any()
  +Iterable<E> take()
  +Iterable<E> takeWhile()
  +Iterable<E> skip()
  +Iterable<E> skipWhile()
  +E firstWhere()
  +E lastWhere()
  +E singleWhere()
  +E elementAt()
  {static} +String setToString()
}

abstract class "lib::collection::collection.dart::_SetBase" {
  -Set<E> _newSet()
  -Set<R> _newSimilarSet()
  +Set<R> cast()
  +Set<E> difference()
  +Set<E> intersection()
  +Set<E> toSet()
}

class "lib::collection::collection.dart::_UnmodifiableSet" {
  -Map<E, Null> _map
  +Iterator<E> iterator
  +int length
  -Set<E> _newSet()
  -Set<R> _newSimilarSet()
  +bool contains()
  +E? lookup()
}

class "lib::collection::collection.dart::UnmodifiableSetView" {
  -Set<E> _source
  +int length
  +Iterator<E> iterator
  +bool contains()
  +E? lookup()
  +Set<E> toSet()
}



abstract class "lib::collection::collection.dart::_UnmodifiableSetMixin" {
  {static} -Never _throwUnmodifiable()
  +bool add()
  +void clear()
  +void addAll()
  +void removeAll()
  +void retainAll()
  +void removeWhere()
  +void retainWhere()
  +bool remove()
}

class "lib::collection::collection.dart::_SplayTreeNode" {
  +K key
  -Node? _left
  -Node? _right
}

class "lib::collection::collection.dart::_SplayTreeSetNode" {
}

class "lib::collection::collection.dart::_SplayTreeMapNode" {
  +V value
  -_SplayTreeMapNode<K, V> _replaceValue()
}

abstract class "lib::collection::collection.dart::_SplayTree" {
  -int _count
  -int _modificationCount
  -int _splayCount
  -Node? _root
  -int Function(K, K) _compare
  -bool Function(dynamic) _validKey
  -Node? _first
  -Node? _last
  -int _splay()
  -Node _splayMin()
  -Node _splayMax()
  -Node? _remove()
  -void _addNewRoot()
  -void _clear()
  -bool _containsKey()
}

class "lib::collection::collection.dart::SplayTreeMap" {
  -_SplayTreeMapNode<K, V>? _root
  -int Function(K, K) _compare
  -bool Function(dynamic) _validKey
  +bool isEmpty
  +bool isNotEmpty
  +int length
  +Iterable<K> keys
  +Iterable<V> values
  +Iterable<MapEntry<K, V>> entries
  +V? []()
  +V? remove()
  +void []=()
  +V putIfAbsent()
  +V update()
  +void updateAll()
  +void addAll()
  +void forEach()
  +void clear()
  +bool containsKey()
  +bool containsValue()
  +K? firstKey()
  +K? lastKey()
  +K? lastKeyBefore()
  +K? firstKeyAfter()
}

abstract class "lib::collection::collection.dart::_SplayTreeIterator" {
  -_SplayTree<K, Node> _tree
  -List<Node> _path
  -int? _modificationCount
  -int _splayCount
  +T current
  -void _rebuildPath()
  -void _findLeftMostDescendent()
  +bool moveNext()
  -T _getValue()
}

class "lib::collection::collection.dart::_SplayTreeKeyIterable" {
  -_SplayTree<K, Node> _tree
  +int length
  +bool isEmpty
  +Iterator<K> iterator
  +bool contains()
  +Set<K> toSet()
}

class "lib::collection::collection.dart::_SplayTreeValueIterable" {
  -SplayTreeMap<K, V> _map
  +int length
  +bool isEmpty
  +Iterator<V> iterator
}

class "lib::collection::collection.dart::_SplayTreeMapEntryIterable" {
  -SplayTreeMap<K, V> _map
  +int length
  +bool isEmpty
  +Iterator<MapEntry<K, V>> iterator
}

class "lib::collection::collection.dart::_SplayTreeKeyIterator" {
  -K _getValue()
}

class "lib::collection::collection.dart::_SplayTreeValueIterator" {
  -V _getValue()
}

class "lib::collection::collection.dart::_SplayTreeMapEntryIterator" {
  -MapEntry<K, V> _getValue()
  -void _replaceValue()
}

class "lib::collection::collection.dart::SplayTreeSet" {
  -_SplayTreeSetNode<E>? _root
  -int Function(E, E) _compare
  -bool Function(dynamic) _validKey
  +Iterator<E> iterator
  +int length
  +bool isEmpty
  +bool isNotEmpty
  +E first
  +E last
  +E single
  -Set<T> _newSet()
  +Set<R> cast()
  +bool contains()
  +bool add()
  -bool _add()
  +bool remove()
  +void addAll()
  +void removeAll()
  +void retainAll()
  +E? lookup()
  +Set<E> intersection()
  +Set<E> difference()
  +Set<E> union()
  -SplayTreeSet<E> _clone()
  -_SplayTreeSetNode<E>? _copyNode()
  +void clear()
  +Set<E> toSet()
  +String toString()
}

class "lib::ui_web::ui_web.dart::AssetManager" {
  {static} -String _defaultAssetsDir
  +String assetsDir
  -String? _assetBase
  -String _baseUrl
  -String? _deprecatedAssetBase
  +String getAssetUrl()
  +dynamic loadAsset()
  +dynamic load()
}

class "lib::ui_web::ui_web.dart::PlatformLocation" {
  +String pathname
  +String search
  +String? hash
  +dynamic state
  +void addPopStateListener()
  +void removePopStateListener()
  +void pushState()
  +void replaceState()
  +void go()
  +String? getBaseHref()
}

class "lib::ui_web::ui_web.dart::BrowserPlatformLocation" {
  -dynamic _location
  -dynamic _history
  +String pathname
  +String search
  +String hash
  +dynamic state
  +dynamic getOrCreateDomEventListener()
  +void addPopStateListener()
  +void removePopStateListener()
  +void pushState()
  +void replaceState()
  +void go()
  +String? getBaseHref()
}

abstract class "lib::ui_web::ui_web.dart::UrlStrategy" {
  +dynamic addPopStateListener()
  +String getPath()
  +dynamic getState()
  +String prepareExternalUrl()
  +void pushState()
  +void replaceState()
  +dynamic go()
}

class "lib::ui_web::ui_web.dart::HashUrlStrategy" {
  -PlatformLocation _platformLocation
  +dynamic addPopStateListener()
  +String getPath()
  +dynamic getState()
  +String prepareExternalUrl()
  +void pushState()
  +void replaceState()
  +dynamic go()
  -dynamic _waitForPopState()
}

class "lib::ui_web::ui_web.dart::PlatformViewRegistry" {
  {static} +String defaultVisibleViewType
  {static} +String defaultInvisibleViewType
  +bool registerViewFactory()
  +dynamic getViewById()
}

class "dart::async::Future" {
  {static} -_Future<Null> _nullFuture
  {static} -_Future<bool> _falseFuture
  {static} +Future<List<T>> wait()
  {static} +Future<T> any()
  {static} +Future<void> forEach()
  {static} -bool _kTrue()
  {static} +Future<void> doWhile()
  +Future<R> then()
  +Future<T> catchError()
  +Future<T> whenComplete()
  +Stream<T> asStream()
  +Future<T> timeout()
}

class "dart::async::Stream" {
  +bool isBroadcast
  +Future<int> length
  +Future<bool> isEmpty
  +Future<T> first
  +Future<T> last
  +Future<T> single
  {static} +Stream<T> castFrom()
  +Stream<T> asBroadcastStream()
  +StreamSubscription<T> listen()
  +Stream<T> where()
  +Stream<S> map()
  +Stream<E> asyncMap()
  +Stream<E> asyncExpand()
  +Stream<T> handleError()
  +Stream<S> expand()
  +Future<dynamic> pipe()
  +Stream<S> transform()
  +Future<T> reduce()
  +Future<S> fold()
  +Future<String> join()
  +Future<bool> contains()
  +Future<void> forEach()
  +Future<bool> every()
  +Future<bool> any()
  +Stream<R> cast()
  +Future<List<T>> toList()
  +Future<Set<T>> toSet()
  +Future<E> drain()
  +Stream<T> take()
  +Stream<T> takeWhile()
  +Stream<T> skip()
  +Stream<T> skipWhile()
  +Stream<T> distinct()
  +Future<T> firstWhere()
  +Future<T> lastWhere()
  +Future<T> singleWhere()
  +Future<T> elementAt()
  +Stream<T> timeout()
}

class "dart::async::ParallelWaitError" {
  +V values
  +E errors
  +String toString()
}

class "lib::core::core.dart::Deprecated" {
  +String message
  +String toString()
}

class "lib::core::core.dart::_Override" {
}

class "lib::core::core.dart::pragma" {
  +String name
  +Object? options
}

abstract class "lib::core::core.dart::BigInt" {
  {static} +BigInt zero
  {static} +BigInt one
  {static} +BigInt two
  +int bitLength
  +int sign
  +bool isEven
  +bool isOdd
  +bool isNegative
  +bool isValidInt
  {static} +BigInt parse()
  {static} +BigInt? tryParse()
  +BigInt abs()
  +BigInt unary-()
  +BigInt +()
  +BigInt -()
  +BigInt *()
  +double /()
  +BigInt ~/()
  +BigInt %()
  +BigInt remainder()
  +BigInt <<()
  +BigInt >>()
  +BigInt &()
  +BigInt |()
  +BigInt ^()
  +BigInt ~()
  +bool <()
  +bool <=()
  +bool >()
  +bool >=()
  +int compareTo()
  +BigInt pow()
  +BigInt modPow()
  +BigInt modInverse()
  +BigInt gcd()
  +BigInt toUnsigned()
  +BigInt toSigned()
  +int toInt()
  +double toDouble()
  +String toString()
  +String toRadixString()
}

class "lib::core::core.dart::bool" {
  +int hashCode
  {static} +bool parse()
  {static} +bool? tryParse()
  +bool &()
  +bool |()
  +bool ^()
  +String toString()
}

class "lib::core::core.dart::Comparable" {
  +int compareTo()
  {static} +int compare()
}

class "lib::core::core.dart::DateTime" {
  {static} +int monday
  {static} +int tuesday
  {static} +int wednesday
  {static} +int thursday
  {static} +int friday
  {static} +int saturday
  {static} +int sunday
  {static} +int daysPerWeek
  {static} +int january
  {static} +int february
  {static} +int march
  {static} +int april
  {static} +int may
  {static} +int june
  {static} +int july
  {static} +int august
  {static} +int september
  {static} +int october
  {static} +int november
  {static} +int december
  {static} +int monthsPerYear
  -int _value
  +bool isUtc
  {static} -int _maxMillisecondsSinceEpoch
  {static} -RegExp _parseFormat
  +int hashCode
  +int millisecondsSinceEpoch
  +int microsecondsSinceEpoch
  +String timeZoneName
  +Duration timeZoneOffset
  +int year
  +int month
  +int day
  +int hour
  +int minute
  +int second
  +int millisecond
  +int microsecond
  +int weekday
  {static} +DateTime parse()
  {static} +DateTime? tryParse()
  +bool ==()
  +bool isBefore()
  +bool isAfter()
  +bool isAtSameMomentAs()
  +int compareTo()
  +DateTime toLocal()
  +DateTime toUtc()
  {static} -String _fourDigits()
  {static} -String _sixDigits()
  {static} -String _threeDigits()
  {static} -String _twoDigits()
  +String toString()
  +String toIso8601String()
  +DateTime add()
  +DateTime subtract()
  +Duration difference()
  {static} -int? _brokenDownDateToValue()
}

abstract class "lib::core::core.dart::double" {
  {static} +double nan
  {static} +double infinity
  {static} +double negativeInfinity
  {static} +double minPositive
  {static} +double maxFinite
  +double sign
  +double remainder()
  +double +()
  +double -()
  +double *()
  +double %()
  +double /()
  +int ~/()
  +double unary-()
  +double abs()
  +int round()
  +int floor()
  +int ceil()
  +int truncate()
  +double roundToDouble()
  +double floorToDouble()
  +double ceilToDouble()
  +double truncateToDouble()
  +String toString()
  {static} +double parse()
  {static} +double? tryParse()
}

class "lib::core::core.dart::Duration" {
  {static} +int microsecondsPerMillisecond
  {static} +int millisecondsPerSecond
  {static} +int secondsPerMinute
  {static} +int minutesPerHour
  {static} +int hoursPerDay
  {static} +int microsecondsPerSecond
  {static} +int microsecondsPerMinute
  {static} +int microsecondsPerHour
  {static} +int microsecondsPerDay
  {static} +int millisecondsPerMinute
  {static} +int millisecondsPerHour
  {static} +int millisecondsPerDay
  {static} +int secondsPerHour
  {static} +int secondsPerDay
  {static} +int minutesPerDay
  {static} +Duration zero
  -int _duration
  +int inDays
  +int inHours
  +int inMinutes
  +int inSeconds
  +int inMilliseconds
  +int inMicroseconds
  +int hashCode
  +bool isNegative
  +Duration +()
  +Duration -()
  +Duration *()
  +Duration ~/()
  +bool <()
  +bool >()
  +bool <=()
  +bool >=()
  +bool ==()
  +int compareTo()
  +String toString()
  +Duration abs()
  +Duration unary-()
}

class "lib::core::core.dart::Enum" {
  +int index
  -String _name
  {static} +int compareByIndex()
  {static} +int compareByName()
}

abstract class "lib::core::core.dart::_Enum" {
  +int index
  -String _name
  -String _enumToString()
  +String toString()
}

class "lib::core::core.dart::Error" {
  +StackTrace? stackTrace
  {static} +String safeToString()
  {static} -String _stringToSafeString()
  {static} -String _objectToString()
  {static} +Never throwWithStackTrace()
  {static} -Never _throw()
}

class "lib::core::core.dart::AssertionError" {
  +Object? message
  +String toString()
}

class "lib::core::core.dart::TypeError" {
}

class "lib::core::core.dart::ArgumentError" {
  -bool _hasValue
  +dynamic invalidValue
  +String? name
  +dynamic message
  -String _errorName
  -String _errorExplanation
  {static} +T checkNotNull()
  +String toString()
}

class "lib::core::core.dart::RangeError" {
  +num? start
  +num? end
  +num? invalidValue
  -String _errorName
  -String _errorExplanation
  {static} +int checkValueInInterval()
  {static} +int checkValidIndex()
  {static} +int checkValidRange()
  {static} +int checkNotNegative()
}

class "lib::core::core.dart::IndexError" {
  +Object? indexable
  +int length
  +int invalidValue
  +int start
  +int end
  -String _errorName
  -String _errorExplanation
  {static} +int check()
}

class "lib::core::core.dart::NoSuchMethodError" {
  +String toString()
}

class "lib::core::core.dart::UnsupportedError" {
  +String? message
  +String toString()
}

class "lib::core::core.dart::UnimplementedError" {
  +String? message
  +String toString()
}

class "lib::core::core.dart::StateError" {
  +String message
  +String toString()
}

class "lib::core::core.dart::ConcurrentModificationError" {
  +Object? modifiedObject
  +String toString()
}

class "lib::core::core.dart::OutOfMemoryError" {
  +StackTrace? stackTrace
  +String toString()
}

class "lib::core::core.dart::StackOverflowError" {
  +StackTrace? stackTrace
  +String toString()
}

class "lib::core::core.dart::Exception" {
}

class "lib::core::core.dart::_Exception" {
  +dynamic message
  +String toString()
}

class "lib::core::core.dart::FormatException" {
  +String message
  +dynamic source
  +int? offset
  +String toString()
}

class "lib::core::core.dart::IntegerDivisionByZeroException" {
  +String? message
  +StackTrace? stackTrace
  +String toString()
}

abstract class "lib::core::core.dart::Function" {
  +int hashCode
  {static} +dynamic apply()
  +bool ==()
}

abstract class "lib::core::core.dart::int" {
  +bool isEven
  +bool isOdd
  +int bitLength
  +int sign
  +int &()
  +int |()
  +int ^()
  +int ~()
  +int <<()
  +int >>()
  +int >>>()
  +int modPow()
  +int modInverse()
  +int gcd()
  +int toUnsigned()
  +int toSigned()
  +int unary-()
  +int abs()
  +int round()
  +int floor()
  +int ceil()
  +int truncate()
  +double roundToDouble()
  +double floorToDouble()
  +double ceilToDouble()
  +double truncateToDouble()
  +String toString()
  +String toRadixString()
  {static} +int parse()
  {static} +int? tryParse()
}

abstract class "lib::core::core.dart::Invocation" {
  +Symbol memberName
  +List<Type> typeArguments
  +List<dynamic> positionalArguments
  +Map<Symbol, dynamic> namedArguments
  +bool isMethod
  +bool isGetter
  +bool isSetter
  +bool isAccessor
}

class "lib::core::core.dart::_Invocation" {
  +Symbol memberName
  +List<Type> typeArguments
  -List<Object?>? _positional
  -Map<Symbol, Object?>? _named
  +List<dynamic> positionalArguments
  +Map<Symbol, dynamic> namedArguments
  +bool isMethod
  +bool isGetter
  +bool isSetter
  +bool isAccessor
  {static} -List<Type> _ensureNonNullTypes()
}

class "lib::core::core.dart::Iterable" {
  +Iterator<E> iterator
  +int length
  +bool isEmpty
  +bool isNotEmpty
  +E first
  +E last
  +E single
  {static} +Iterable<T> castFrom()
  +Iterable<R> cast()
  +Iterable<E> followedBy()
  +Iterable<T> map()
  +Iterable<E> where()
  +Iterable<T> whereType()
  +Iterable<T> expand()
  +bool contains()
  +void forEach()
  +E reduce()
  +T fold()
  +bool every()
  +String join()
  +bool any()
  +List<E> toList()
  +Set<E> toSet()
  +Iterable<E> take()
  +Iterable<E> takeWhile()
  +Iterable<E> skip()
  +Iterable<E> skipWhile()
  +E firstWhere()
  +E lastWhere()
  +E singleWhere()
  +E elementAt()
  +String toString()
  {static} +String iterableToShortString()
  {static} +String iterableToFullString()
}

class "lib::core::core.dart::_GeneratorIterable" {
  +int length
  -E Function(int) _generator
  +E elementAt()
  {static} -int _id()
}



class "lib::core::core.dart::Iterator" {
  +E current
  +bool moveNext()
}

abstract class "lib::core::core.dart::_ListIterable" {
}

class "lib::core::core.dart::List" {
  +E first
  +E last
  +int length
  +Iterable<E> reversed
  {static} +List<T> castFrom()
  {static} +void copyRange()
  {static} +void writeIterable()
  +List<R> cast()
  +E []()
  +void []=()
  +void add()
  +void addAll()
  +void sort()
  +void shuffle()
  +int indexOf()
  +int indexWhere()
  +int lastIndexWhere()
  +int lastIndexOf()
  +void clear()
  +void insert()
  +void insertAll()
  +void setAll()
  +bool remove()
  +E removeAt()
  +E removeLast()
  +void removeWhere()
  +void retainWhere()
  +List<E> +()
  +List<E> sublist()
  +Iterable<E> getRange()
  +void setRange()
  +void removeRange()
  +void fillRange()
  +void replaceRange()
  +Map<int, E> asMap()
  +bool ==()
}

class "lib::core::core.dart::Map" {
  +Iterable<MapEntry<K, V>> entries
  +Iterable<K> keys
  +Iterable<V> values
  +int length
  +bool isEmpty
  +bool isNotEmpty
  {static} +Map<K2, V2> castFrom()
  +Map<RK, RV> cast()
  +bool containsValue()
  +bool containsKey()
  +V? []()
  +void []=()
  +Map<K2, V2> map()
  +void addEntries()
  +V update()
  +void updateAll()
  +void removeWhere()
  +V putIfAbsent()
  +void addAll()
  +V? remove()
  +void clear()
  +void forEach()
}

class "lib::core::core.dart::MapEntry" {
  +K key
  +V value
  +String toString()
}

class "lib::core::core.dart::Null" {
  +int hashCode
  +String toString()
}

class "lib::core::core.dart::num" {
  +int hashCode
  +bool isNaN
  +bool isNegative
  +bool isInfinite
  +bool isFinite
  +num sign
  +bool ==()
  +int compareTo()
  +num +()
  +num -()
  +num *()
  +num %()
  +double /()
  +int ~/()
  +num unary-()
  +num remainder()
  +bool <()
  +bool <=()
  +bool >()
  +bool >=()
  +num abs()
  +int round()
  +int floor()
  +int ceil()
  +int truncate()
  +double roundToDouble()
  +double floorToDouble()
  +double ceilToDouble()
  +double truncateToDouble()
  +num clamp()
  +int toInt()
  +double toDouble()
  +String toStringAsFixed()
  +String toStringAsExponential()
  +String toStringAsPrecision()
  +String toString()
  {static} +num parse()
  {static} +num? tryParse()
}

class "lib::core::core.dart::Object" {
  +int hashCode
  +Type runtimeType
  +bool ==()
  +String toString()
  +dynamic noSuchMethod()
  {static} +int hash()
  {static} +int hashAll()
  {static} +int hashAllUnordered()
}

class "lib::core::core.dart::Pattern" {
  +Iterable<Match> allMatches()
  +Match? matchAsPrefix()
}

class "lib::core::core.dart::Match" {
  +int start
  +int end
  +int groupCount
  +String input
  +Pattern pattern
  +String? group()
  +String? []()
  +List<String?> groups()
}

abstract class "lib::core::core.dart::Record" {
  +Type runtimeType
  +int hashCode
  +bool ==()
  +String toString()
}

class "lib::core::core.dart::RegExp" {
  +String pattern
  +bool isMultiLine
  +bool isCaseSensitive
  +bool isUnicode
  +bool isDotAll
  {static} +String escape()
  +RegExpMatch? firstMatch()
  +Iterable<RegExpMatch> allMatches()
  +bool hasMatch()
  +String? stringMatch()
}

class "lib::core::core.dart::RegExpMatch" {
  +Iterable<String> groupNames
  +RegExp pattern
  +String? namedGroup()
}

abstract class "lib::core::core.dart::_SetIterable" {
}

class "lib::core::core.dart::Set" {
  +Iterator<E> iterator
  {static} +Set<T> castFrom()
  +Set<R> cast()
  +bool contains()
  +bool add()
  +void addAll()
  +bool remove()
  +E? lookup()
  +void removeAll()
  +void retainAll()
  +void removeWhere()
  +void retainWhere()
  +bool containsAll()
  +Set<E> intersection()
  +Set<E> union()
  +Set<E> difference()
  +void clear()
  +Set<E> toSet()
}

class "lib::core::core.dart::Sink" {
  +void add()
  +void close()
}

class "lib::core::core.dart::StackTrace" {
  {static} +_StringStackTrace empty
  {static} +StackTrace current
  +String toString()
}

class "lib::core::core.dart::_StringStackTrace" {
  -String _stackTrace
  +String toString()
}

class "lib::core::core.dart::Stopwatch" {
  {static} -int _frequency
  -int _start
  -int? _stop
  +int frequency
  +int elapsedTicks
  +Duration elapsed
  +int elapsedMicroseconds
  +int elapsedMilliseconds
  +bool isRunning
  +void start()
  +void stop()
  +void reset()
  {static} -int _initTicker()
  {static} -int _now()
}

abstract class "lib::core::core.dart::String" {
  +int length
  +int hashCode
  +bool isEmpty
  +bool isNotEmpty
  +List<int> codeUnits
  +Runes runes
  +String []()
  +int codeUnitAt()
  +bool ==()
  +int compareTo()
  +bool endsWith()
  +bool startsWith()
  +int indexOf()
  +int lastIndexOf()
  +String +()
  +String substring()
  +String trim()
  +String trimLeft()
  +String trimRight()
  +String *()
  +String padLeft()
  +String padRight()
  +bool contains()
  +String replaceFirst()
  +String replaceFirstMapped()
  +String replaceAll()
  +String replaceAllMapped()
  +String replaceRange()
  +List<String> split()
  +String splitMapJoin()
  +String toLowerCase()
  +String toUpperCase()
}

class "lib::core::core.dart::Runes" {
  +String string
  +RuneIterator iterator
  +int last
}

class "lib::core::core.dart::RuneIterator" {
  +String string
  -int _position
  -int _nextPosition
  -int _currentCodePoint
  +int rawIndex
  +int current
  +int currentSize
  +String currentAsString
  -void _checkSplitSurrogate()
  +void reset()
  +bool moveNext()
  +bool movePrevious()
}

class "lib::core::core.dart::StringBuffer" {
  +int length
  +bool isEmpty
  +bool isNotEmpty
  +void write()
  +void writeCharCode()
  +void writeAll()
  +void writeln()
  +void clear()
  +String toString()
}

class "lib::core::core.dart::StringSink" {
  +void write()
  +void writeAll()
  +void writeln()
  +void writeCharCode()
}

abstract class "lib::core::core.dart::Symbol" {
  {static} +Symbol unaryMinus
  {static} +Symbol empty
  +int hashCode
  +bool ==()
}

class "lib::core::core.dart::Type" {
  +int hashCode
  +bool ==()
  +String toString()
}

class "lib::core::core.dart::Uri" {
  {static} +Uri base
  +String scheme
  +String authority
  +String userInfo
  +String host
  +int port
  +String path
  +String query
  +String fragment
  +List<String> pathSegments
  +Map<String, String> queryParameters
  +Map<String, List<String>> queryParametersAll
  +bool isAbsolute
  +bool hasScheme
  +bool hasAuthority
  +bool hasPort
  +bool hasQuery
  +bool hasFragment
  +bool hasEmptyPath
  +bool hasAbsolutePath
  +String origin
  +UriData? data
  +int hashCode
  +bool isScheme()
  +String toFilePath()
  +bool ==()
  +String toString()
  +Uri replace()
  +Uri removeFragment()
  +Uri resolve()
  +Uri resolveUri()
  +Uri normalizePath()
  {static} +Uri parse()
  {static} +Uri? tryParse()
  {static} +String encodeComponent()
  {static} +String encodeQueryComponent()
  {static} +String decodeComponent()
  {static} +String decodeQueryComponent()
  {static} +String encodeFull()
  {static} +String decodeFull()
  {static} +Map<String, String> splitQueryString()
  {static} +List<int> parseIPv4Address()
  {static} -List<int> _parseIPv4Address()
  {static} +List<int> parseIPv6Address()
}

class "lib::core::core.dart::_Uri" {
  +String scheme
  -String _userInfo
  -String? _host
  -int? _port
  +String path
  -String? _query
  -String? _fragment
  -String _text
  +List<String> pathSegments
  +int hashCode
  +Map<String, String> queryParameters
  +Map<String, List<String>> queryParametersAll
  {static} -List<int> _unreservedTable
  {static} -List<int> _unreserved2396Table
  {static} -List<int> _encodeFullTable
  {static} -List<int> _schemeTable
  {static} -List<int> _genDelimitersTable
  {static} -List<int> _userinfoTable
  {static} -List<int> _regNameTable
  {static} -List<int> _pathCharTable
  {static} -List<int> _pathCharOrSlashTable
  {static} -List<int> _queryCharTable
  {static} -List<int> _zoneIDTable
  +String authority
  +String userInfo
  +String host
  +int port
  +String query
  +String fragment
  {static} -bool _isWindows
  +bool isAbsolute
  +bool hasScheme
  +bool hasAuthority
  +bool hasPort
  +bool hasQuery
  +bool hasFragment
  +bool hasEmptyPath
  +bool hasAbsolutePath
  +String origin
  +UriData? data
  {static} -int _defaultPort()
  +bool isScheme()
  {static} -Never _fail()
  {static} -_Uri _makeHttpUri()
  {static} -void _checkNonWindowsPathReservedCharacters()
  {static} -void _checkWindowsPathReservedCharacters()
  {static} -void _checkWindowsDriveLetter()
  {static} -Uri _makeFileUri()
  {static} -dynamic _makeWindowsFileUrl()
  +Uri replace()
  +Uri removeFragment()
  {static} -List<String> _computePathSegments()
  {static} -Map<String, List<String>> _computeQueryParametersAll()
  +Uri normalizePath()
  {static} -int? _makePort()
  {static} -String? _makeHost()
  {static} -int _checkZoneID()
  {static} -bool _isZoneIDChar()
  {static} -String _normalizeZoneID()
  {static} -bool _isRegNameChar()
  {static} -String _normalizeRegName()
  {static} -String _makeScheme()
  {static} -String _canonicalizeScheme()
  {static} -String _makeUserInfo()
  {static} -String _makePath()
  {static} -String _normalizePath()
  {static} -String? _makeQuery()
  {static} -String _makeQueryFromParameters()
  {static} -String _makeQueryFromParametersDefault()
  {static} -String? _makeFragment()
  {static} -String? _normalizeEscape()
  {static} -String _escapeChar()
  {static} -String _normalizeOrSubstring()
  {static} -String? _normalize()
  {static} -bool _isSchemeCharacter()
  {static} -bool _isGeneralDelimiter()
  -String _mergePaths()
  {static} -bool _mayContainDotSegments()
  {static} -String _removeDotSegments()
  {static} -String _normalizeRelativePath()
  {static} -String _escapeScheme()
  +Uri resolve()
  {static} -int _packageNameEnd()
  +Uri resolveUri()
  +String toFilePath()
  -String _toFilePath()
  {static} -String _toWindowsFilePath()
  -void _writeAuthority()
  +String toString()
  -String _initializeText()
  +bool ==()
  {static} -List<String> _createList()
  {static} -Map<String, List<String>> _splitQueryStringAll()
  {static} -String _uriEncode()
  {static} -int _hexCharPairToByte()
  {static} -String _uriDecode()
  {static} -bool _isAlphabeticCharacter()
  {static} -bool _isUnreservedChar()
}

class "lib::core::core.dart::UriData" {
  {static} -int _noScheme
  -String _text
  -List<int> _separatorIndices
  -Uri? _uriCache
  {static} -Base64Codec _base64
  {static} -List<int> _tokenCharTable
  {static} -List<int> _uricTable
  +Uri uri
  +String mimeType
  +String charset
  +bool isBase64
  +String contentText
  +Map<String, String> parameters
  {static} -void _writeUri()
  {static} -int _validateMimeType()
  {static} +UriData parse()
  -Uri _computeUri()
  +bool isMimeType()
  -int _findCharsetIndex()
  +bool isCharset()
  +bool isEncoding()
  +Uint8List contentAsBytes()
  +String contentAsString()
  {static} -UriData _parse()
  {static} -void _uriEncodeBytes()
  +String toString()
}

class "lib::core::core.dart::_SimpleUri" {
  -String _uri
  -int _schemeEnd
  -int _hostStart
  -int _portStart
  -int _pathStart
  -int _queryStart
  -int _fragmentStart
  -String? _schemeCache
  -int? _hashCodeCache
  +bool hasScheme
  +bool hasAuthority
  +bool hasUserInfo
  +bool hasPort
  +bool hasQuery
  +bool hasFragment
  -bool _isFile
  -bool _isHttp
  -bool _isHttps
  -bool _isPackage
  +bool hasAbsolutePath
  +bool hasEmptyPath
  +bool isAbsolute
  +String scheme
  +String authority
  +String userInfo
  +String host
  +int port
  +String path
  +String query
  +String fragment
  +String origin
  +List<String> pathSegments
  +Map<String, String> queryParameters
  +Map<String, List<String>> queryParametersAll
  +UriData? data
  +int hashCode
  -bool _isScheme()
  +bool isScheme()
  -String _computeScheme()
  -bool _isPort()
  +Uri normalizePath()
  +Uri removeFragment()
  +Uri replace()
  +Uri resolve()
  +Uri resolveUri()
  {static} -int _packageNameEnd()
  -Uri _simpleMerge()
  +String toFilePath()
  -String _toFilePath()
  +bool ==()
  -Uri _toNonSimple()
  +String toString()
}

class "lib::core::core.dart::_DataUri" {
  -UriData _data
  +UriData? data
}

class "lib::core::core.dart::Expando" {
  +String? name
  +String toString()
  +T? []()
  +void []=()
}

abstract class "lib::core::core.dart::WeakReference" {
  +T? target
}

abstract class "lib::core::core.dart::Finalizer" {
  +void attach()
  +void detach()
}

class "lib::isolate::isolate.dart::IsolateSpawnException" {
  +String message
  +String toString()
}

class "lib::isolate::isolate.dart::Isolate" {
  {static} +int immediate
  {static} +int beforeNextEvent
  +SendPort controlPort
  +Capability? pauseCapability
  +Capability? terminateCapability
  +String? debugName
  {static} +Isolate current
  {static} +dynamic packageConfig
  {static} +Uri? packageConfigSync
  +Stream<dynamic> errors
  {static} +dynamic run()
  {static} +dynamic resolvePackageUri()
  {static} +Uri? resolvePackageUriSync()
  {static} +dynamic spawn()
  {static} +dynamic spawnUri()
  +Capability pause()
  -void _pause()
  +void resume()
  +void addOnExitListener()
  +void removeOnExitListener()
  +void setErrorsFatal()
  +void kill()
  +void ping()
  +void addErrorListener()
  +void removeErrorListener()
  {static} +Never exit()
}

class "lib::isolate::isolate.dart::SendPort" {
  +int hashCode
  +void send()
  +bool ==()
}

class "lib::isolate::isolate.dart::ReceivePort" {
  +SendPort sendPort
  +StreamSubscription<dynamic> listen()
  +void close()
}

class "lib::isolate::isolate.dart::RawReceivePort" {
  +bool keepIsolateAlive
  +Function? handler
  +SendPort sendPort
  +void close()
}

class "lib::isolate::isolate.dart::RemoteError" {
  -String _description
  +StackTrace stackTrace
  +String toString()
}

abstract class "lib::isolate::isolate.dart::TransferableTypedData" {
  +ByteBuffer materialize()
}

class "lib::isolate::isolate.dart::_RemoteRunner" {
  +FutureOr<R> Function() computation
  +SendPort resultPort
  {static} -void _remoteExecute()
  -void _run()
  {static} -List<Object?> _list1()
  {static} -List<Object?> _list2()
}

class "lib::isolate::isolate.dart::Capability" {
}

class "lib::js::js_wasm.dart::JS" {
  +String? name
}

class "lib::js::js_wasm.dart::_Anonymous" {
}

class "lib::js::js_wasm.dart::_StaticInterop" {
}

class "lib::js::js.dart::JsObject" {
  +int hashCode
  +dynamic []()
  +void []=()
  +bool ==()
  +bool hasProperty()
  +void deleteProperty()
  +bool instanceof()
  +String toString()
  +dynamic callMethod()
}

class "lib::js::js.dart::JsFunction" {
  +dynamic apply()
}

class "lib::js::js.dart::JsArray" {
  +int length
  +E []()
  +void []=()
  +void add()
  +void addAll()
  +void insert()
  +E removeAt()
  +E removeLast()
  +void removeRange()
  +void setRange()
  +void sort()
}

class "lib::js_interop::js_interop.dart::JS" {
  +String? name
}

class "dart::_js_annotations::JSExport" {
  +String name
}

class "dart::js_util::NullRejectionException" {
  +bool isUndefined
  +String toString()
}

class "lib::async::async.dart::AsyncError" {
  +Object error
  +StackTrace stackTrace
  {static} +StackTrace defaultStackTrace()
  +String toString()
}

class "lib::async::async.dart::_BroadcastStream" {
  +bool isBroadcast
}

class "lib::async::async.dart::_BroadcastSubscription" {
  {static} -int _STATE_EVENT_ID
  {static} -int _STATE_FIRING
  {static} -int _STATE_REMOVE_AFTER_FIRING
  -int _eventState
  -_BroadcastSubscription<T>? _next
  -_BroadcastSubscription<T>? _previous
  -bool _isFiring
  -bool _removeAfterFiring
  -bool _expectsEvent()
  -void _toggleEventId()
  -void _setRemoveAfterFiring()
  -void _onPause()
  -void _onResume()
}

abstract class "lib::async::async.dart::_BroadcastStreamController" {
  {static} -int _STATE_INITIAL
  {static} -int _STATE_EVENT_ID
  {static} -int _STATE_FIRING
  {static} -int _STATE_CLOSED
  {static} -int _STATE_ADDSTREAM
  +void Function()? onListen
  +FutureOr<void> Function()? onCancel
  -int _state
  -_BroadcastSubscription<T>? _firstSubscription
  -_BroadcastSubscription<T>? _lastSubscription
  -_AddStreamState<T>? _addStreamState
  -_Future<void>? _doneFuture
  +void Function() onPause
  +void Function() onResume
  +Stream<T> stream
  +StreamSink<T> sink
  +bool isClosed
  +bool isPaused
  +bool hasListener
  -bool _hasOneListener
  -bool _isFiring
  -bool _isAddingStream
  -bool _mayAddEvent
  -bool _isEmpty
  +Future<void> done
  -_Future<void> _ensureDoneFuture()
  -void _addListener()
  -void _removeListener()
  -StreamSubscription<T> _subscribe()
  -Future<void>? _recordCancel()
  -void _recordPause()
  -void _recordResume()
  -Error _addEventError()
  +void add()
  +void addError()
  +Future<dynamic> close()
  +Future<dynamic> addStream()
  -void _add()
  -void _addError()
  -void _close()
  -void _forEachListener()
  -void _callOnCancel()
}

class "lib::async::async.dart::_SyncBroadcastStreamController" {
  -bool _mayAddEvent
  -Error _addEventError()
  -void _sendData()
  -void _sendError()
  -void _sendDone()
}

class "lib::async::async.dart::_AsyncBroadcastStreamController" {
  -void _sendData()
  -void _sendError()
  -void _sendDone()
}

class "lib::async::async.dart::_AsBroadcastStreamController" {
  -_PendingEvents<T>? _pending
  -bool _hasPending
  -void _addPendingEvent()
  +void add()
  +void addError()
  -void _flushPending()
  +Future<dynamic> close()
  -void _callOnCancel()
}

class "lib::async::async.dart::DeferredLoadException" {
  -String _message
  +String toString()
}

abstract class "lib::async::async.dart::FutureOr" {
}

class "lib::async::async.dart::Future" {
  {static} -_Future<Null> _nullFuture
  {static} -_Future<bool> _falseFuture
  {static} +Future<List<T>> wait()
  {static} +Future<T> any()
  {static} +Future<void> forEach()
  {static} -bool _kTrue()
  {static} +Future<void> doWhile()
  +Future<R> then()
  +Future<T> catchError()
  +Future<T> whenComplete()
  +Stream<T> asStream()
  +Future<T> timeout()
}

class "lib::async::async.dart::TimeoutException" {
  +String? message
  +Duration? duration
  +String toString()
}

class "lib::async::async.dart::Completer" {
  +Future<T> future
  +bool isCompleted
  +void complete()
  +void completeError()
}

class "lib::async::async.dart::ParallelWaitError" {
  +V values
  +E errors
  +String toString()
}

class "lib::async::async.dart::_FutureResult" {
  +T? valueOrNull
  +AsyncError? errorOrNull
  +void Function(int) onReady
  +T value
  -void _onValue()
  -void _onError()
  {static} -void _waitAll()
  {static} -void _noop()
}

abstract class "lib::async::async.dart::_Completer" {
  +_Future<T> future
  +bool isCompleted
  +void complete()
  +void completeError()
  -void _completeError()
}

class "lib::async::async.dart::_AsyncCompleter" {
  +void complete()
  -void _completeError()
}

class "lib::async::async.dart::_SyncCompleter" {
  +void complete()
  -void _completeError()
}

class "lib::async::async.dart::_FutureListener" {
  {static} +int maskValue
  {static} +int maskError
  {static} +int maskTestError
  {static} +int maskWhenComplete
  {static} +int maskAwait
  {static} +int stateChain
  {static} +int stateThen
  {static} +int stateThenOnerror
  {static} +int stateThenAwait
  {static} +int stateCatchError
  {static} +int stateCatchErrorTest
  {static} +int stateWhenComplete
  {static} +int maskType
  -_FutureListener<dynamic, dynamic>? _nextListener
  +_Future<T> result
  +int state
  +Function? callback
  +Function? errorCallback
  -_Zone _zone
  +bool handlesValue
  +bool handlesError
  +bool hasErrorTest
  +bool handlesComplete
  -FutureOr<T> Function(S) _onValue
  -Function? _onError
  -bool Function(Object) _errorTest
  -dynamic Function() _whenCompleteAction
  +bool hasErrorCallback
  +FutureOr<T> handleValue()
  +bool matchesErrorTest()
  +FutureOr<T> handleError()
  +dynamic handleWhenComplete()
  +bool shouldChain()
}

class "lib::async::async.dart::_Future" {
  {static} -int _stateIncomplete
  {static} -int _stateIgnoreError
  {static} -int _statePendingComplete
  {static} -int _stateChained
  {static} -int _stateValue
  {static} -int _stateError
  {static} -int _completionStateMask
  -int _state
  -_Zone _zone
  -dynamic _resultOrListeners
  -bool _mayComplete
  -bool _isPendingComplete
  -bool _mayAddListener
  -bool _isChained
  -bool _isComplete
  -bool _hasError
  -bool _ignoreError
  -AsyncError _error
  -_Future<dynamic> _chainSource
  -void _setChained()
  +Future<R> then()
  -Future<E> _thenAwait()
  -void _ignore()
  +Future<T> catchError()
  -Future<R> _safeOnError()
  +Future<T> whenComplete()
  +Stream<T> asStream()
  -void _setPendingComplete()
  -void _clearPendingComplete()
  -void _setValue()
  -void _setErrorObject()
  -void _setError()
  -void _cloneResult()
  -void _addListener()
  -void _prependListeners()
  -_FutureListener<dynamic, dynamic>? _removeListeners()
  -_FutureListener<dynamic, dynamic>? _reverseListeners()
  -void _chainForeignFuture()
  {static} -void _chainCoreFutureSync()
  {static} -void _chainCoreFutureAsync()
  -void _complete()
  -void _completeWithValue()
  -void _completeError()
  -void _asyncComplete()
  -void _asyncCompleteUnchecked()
  -void _asyncCompleteUncheckedNoFuture()
  -void _asyncCompleteWithValue()
  -void _chainFuture()
  -void _asyncCompleteError()
  {static} -void _propagateToListeners()
  +Future<T> timeout()
}

class "lib::async::async.dart::_AsyncCallbackEntry" {
  +void Function() callback
  +_AsyncCallbackEntry? next
}

class "lib::async::async.dart::_AsyncRun" {
  {static} -void _scheduleImmediate()
}

class "lib::async::async.dart::Stream" {
  +bool isBroadcast
  +Future<int> length
  +Future<bool> isEmpty
  +Future<T> first
  +Future<T> last
  +Future<T> single
  {static} +Stream<T> castFrom()
  +Stream<T> asBroadcastStream()
  +StreamSubscription<T> listen()
  +Stream<T> where()
  +Stream<S> map()
  +Stream<E> asyncMap()
  +Stream<E> asyncExpand()
  +Stream<T> handleError()
  +Stream<S> expand()
  +Future<dynamic> pipe()
  +Stream<S> transform()
  +Future<T> reduce()
  +Future<S> fold()
  +Future<String> join()
  +Future<bool> contains()
  +Future<void> forEach()
  +Future<bool> every()
  +Future<bool> any()
  +Stream<R> cast()
  +Future<List<T>> toList()
  +Future<Set<T>> toSet()
  +Future<E> drain()
  +Stream<T> take()
  +Stream<T> takeWhile()
  +Stream<T> skip()
  +Stream<T> skipWhile()
  +Stream<T> distinct()
  +Future<T> firstWhere()
  +Future<T> lastWhere()
  +Future<T> singleWhere()
  +Future<T> elementAt()
  +Stream<T> timeout()
}

class "lib::async::async.dart::StreamSubscription" {
  +bool isPaused
  +Future<void> cancel()
  +void onData()
  +void onError()
  +void onDone()
  +void pause()
  +void resume()
  +Future<E> asFuture()
}

class "lib::async::async.dart::EventSink" {
  +void add()
  +void addError()
  +void close()
}

class "lib::async::async.dart::StreamView" {
  -Stream<T> _stream
  +bool isBroadcast
  +Stream<T> asBroadcastStream()
  +StreamSubscription<T> listen()
}

class "lib::async::async.dart::StreamConsumer" {
  +Future<dynamic> addStream()
  +Future<dynamic> close()
}

class "lib::async::async.dart::StreamSink" {
  +Future<dynamic> done
  +Future<dynamic> close()
}

class "lib::async::async.dart::StreamTransformer" {
  {static} +StreamTransformer<TS, TT> castFrom()
  +Stream<T> bind()
  +StreamTransformer<RS, RT> cast()
}

abstract class "lib::async::async.dart::StreamTransformerBase" {
  +StreamTransformer<RS, RT> cast()
}

class "lib::async::async.dart::StreamIterator" {
  +T current
  +Future<bool> moveNext()
  +Future<dynamic> cancel()
}

class "lib::async::async.dart::_ControllerEventSinkWrapper" {
  -EventSink<dynamic>? _sink
  -EventSink<dynamic> _ensureSink()
  +void add()
  +void addError()
  +void close()
}

class "lib::async::async.dart::MultiStreamController" {
  +void addSync()
  +void addErrorSync()
  +void closeSync()
}


class "lib::async::async.dart::StreamController" {
  +void Function()? onListen
  +void Function()? onPause
  +void Function()? onResume
  +FutureOr<void> Function()? onCancel
  +Stream<T> stream
  +StreamSink<T> sink
  +bool isClosed
  +bool isPaused
  +bool hasListener
  +Future<dynamic> done
  +void add()
  +void addError()
  +Future<dynamic> close()
  +Future<dynamic> addStream()
}

class "lib::async::async.dart::SynchronousStreamController" {
  +void add()
  +void addError()
  +Future<dynamic> close()
}

abstract class "lib::async::async.dart::_StreamControllerLifecycle" {
  -StreamSubscription<T> _subscribe()
  -void _recordPause()
  -void _recordResume()
  -Future<void>? _recordCancel()
}

abstract class "lib::async::async.dart::_StreamControllerBase" {
}

abstract class "lib::async::async.dart::_StreamController" {
  {static} -int _STATE_INITIAL
  {static} -int _STATE_SUBSCRIBED
  {static} -int _STATE_CANCELED
  {static} -int _STATE_SUBSCRIPTION_MASK
  {static} -int _STATE_CLOSED
  {static} -int _STATE_ADDSTREAM
  -Object? _varData
  -int _state
  -_Future<void>? _doneFuture
  +void Function()? onListen
  +void Function()? onPause
  +void Function()? onResume
  +FutureOr<void> Function()? onCancel
  +Stream<T> stream
  +StreamSink<T> sink
  -bool _isCanceled
  +bool hasListener
  -bool _isInitialState
  +bool isClosed
  +bool isPaused
  -bool _isAddingStream
  -bool _mayAddEvent
  -_PendingEvents<T>? _pendingEvents
  -_ControllerSubscription<T> _subscription
  +Future<void> done
  -_PendingEvents<T> _ensurePendingEvents()
  -Error _badEventState()
  +Future<dynamic> addStream()
  -Future<void> _ensureDoneFuture()
  +void add()
  +void addError()
  +Future<dynamic> close()
  -void _closeUnchecked()
  -void _add()
  -void _addError()
  -void _close()
  -StreamSubscription<T> _subscribe()
  -Future<void>? _recordCancel()
  -void _recordPause()
  -void _recordResume()
}

class "lib::async::async.dart::_AsyncStreamController" {
}

class "lib::async::async.dart::_SyncStreamController" {
}

class "lib::async::async.dart::_ControllerStream" {
  -_StreamControllerLifecycle<T> _controller
  +int hashCode
  -StreamSubscription<T> _createSubscription()
  +bool ==()
}

class "lib::async::async.dart::_ControllerSubscription" {
  -_StreamControllerLifecycle<T> _controller
  -Future<void>? _onCancel()
  -void _onPause()
  -void _onResume()
}

class "lib::async::async.dart::_StreamSinkWrapper" {
  -StreamController<dynamic> _target
  +Future<dynamic> done
  +void add()
  +void addError()
  +Future<dynamic> close()
  +Future<dynamic> addStream()
}

class "lib::async::async.dart::_AddStreamState" {
  +_Future<dynamic> addStreamFuture
  +StreamSubscription<dynamic> addSubscription
  {static} +dynamic makeErrorHandler()
  +void pause()
  +void resume()
  +Future<void> cancel()
  +void complete()
}

class "lib::async::async.dart::_StreamControllerAddStreamState" {
  +dynamic varData
}

abstract class "lib::async::async.dart::_SyncStreamControllerDispatch" {
  -void _sendData()
  -void _sendError()
  -void _sendDone()
}

abstract class "lib::async::async.dart::_AsyncStreamControllerDispatch" {
  -void _sendData()
  -void _sendError()
  -void _sendDone()
}

abstract class "lib::async::async.dart::_EventSink" {
  -void _add()
  -void _addError()
  -void _close()
}

abstract class "lib::async::async.dart::_EventDispatch" {
  -void _sendData()
  -void _sendError()
  -void _sendDone()
}

class "lib::async::async.dart::_BufferingStreamSubscription" {
  {static} -int _STATE_CANCEL_ON_ERROR
  {static} -int _STATE_CLOSED
  {static} -int _STATE_INPUT_PAUSED
  {static} -int _STATE_CANCELED
  {static} -int _STATE_WAIT_FOR_CANCEL
  {static} -int _STATE_IN_CALLBACK
  {static} -int _STATE_HAS_PENDING
  {static} -int _STATE_PAUSE_COUNT
  -void Function(T) _onData
  -Function _onError
  -void Function() _onDone
  -Zone _zone
  -int _state
  -Future<dynamic>? _cancelFuture
  -_PendingEvents<T>? _pending
  -bool _isInputPaused
  -bool _isClosed
  -bool _isCanceled
  -bool _waitsForCancel
  -bool _inCallback
  -bool _hasPending
  -bool _isPaused
  -bool _canFire
  -bool _mayResumeInput
  -bool _cancelOnError
  +bool isPaused
  -void _setPendingEvents()
  +void onData()
  {static} -void Function(T) _registerDataHandler()
  +void onError()
  {static} -Function _registerErrorHandler()
  +void onDone()
  {static} -void Function() _registerDoneHandler()
  +void pause()
  +void resume()
  +Future<dynamic> cancel()
  +Future<E> asFuture()
  -void _cancel()
  -void _decrementPauseCount()
  -void _add()
  -void _addError()
  -void _close()
  -void _onPause()
  -void _onResume()
  -Future<void>? _onCancel()
  -void _addPending()
  -void _sendData()
  -void _sendError()
  -void _sendDone()
  -void _guardCallback()
  -void _checkState()
}

abstract class "lib::async::async.dart::_StreamImpl" {
  +StreamSubscription<T> listen()
  -StreamSubscription<T> _createSubscription()
  -void _onListen()
}

abstract class "lib::async::async.dart::_DelayedEvent" {
  +_DelayedEvent<dynamic>? next
  +void perform()
}

class "lib::async::async.dart::_DelayedData" {
  +T value
  +void perform()
}

class "lib::async::async.dart::_DelayedError" {
  +Object error
  +StackTrace stackTrace
  +void perform()
}

class "lib::async::async.dart::_DelayedDone" {
  +_DelayedEvent<dynamic>? next
  +void perform()
}

class "lib::async::async.dart::_PendingEvents" {
  {static} +int stateUnscheduled
  {static} +int stateScheduled
  {static} +int stateCanceled
  -int _state
  +_DelayedEvent<dynamic>? firstPendingEvent
  +_DelayedEvent<dynamic>? lastPendingEvent
  +bool isScheduled
  -bool _eventScheduled
  +bool isEmpty
  +void schedule()
  +void cancelSchedule()
  +void add()
  +void handleNext()
  +void clear()
}

class "lib::async::async.dart::_DoneStreamSubscription" {
  {static} -int _stateReadyToSend
  {static} -int _stateScheduled
  {static} -int _stateDone
  {static} -int _statePausedOnce
  -int _state
  -Zone _zone
  -void Function()? _onDone
  +bool isPaused
  {static} -bool _isDone()
  {static} -int _incrementPauseCount()
  {static} -int _decrementPauseCount()
  +void onData()
  +void onError()
  +void onDone()
  +void pause()
  +void resume()
  +Future<dynamic> cancel()
  +Future<E> asFuture()
  -void _onMicrotask()
}

class "lib::async::async.dart::_AsBroadcastStream" {
  -Stream<T> _source
  -void Function(StreamSubscription<T>)? _onListenHandler
  -void Function(StreamSubscription<T>)? _onCancelHandler
  -Zone _zone
  -_AsBroadcastStreamController<T>? _controller
  -StreamSubscription<T>? _subscription
  +bool isBroadcast
  -bool _isSubscriptionPaused
  +StreamSubscription<T> listen()
  -void _onCancel()
  -void _onListen()
  -void _cancelSubscription()
  -void _pauseSubscription()
  -void _resumeSubscription()
}

class "lib::async::async.dart::_BroadcastSubscriptionWrapper" {
  -_AsBroadcastStream<dynamic> _stream
  +bool isPaused
  +void onData()
  +void onError()
  +void onDone()
  +void pause()
  +void resume()
  +Future<dynamic> cancel()
  +Future<E> asFuture()
}

class "lib::async::async.dart::_StreamIterator" {
  -StreamSubscription<T>? _subscription
  -Object? _stateData
  -bool _hasValue
  +T current
  +Future<bool> moveNext()
  -Future<bool> _initializeOrDone()
  +Future<dynamic> cancel()
  -void _onData()
  -void _onError()
  -void _onDone()
}

class "lib::async::async.dart::_EmptyStream" {
  +bool isBroadcast
  +StreamSubscription<T> listen()
}

class "lib::async::async.dart::_MultiStream" {
  +bool isBroadcast
  -void Function(MultiStreamController<T>) _onListen
  +StreamSubscription<T> listen()
}

class "lib::async::async.dart::_MultiStreamController" {
  +Stream<T> stream
  +void addSync()
  +void addErrorSync()
  +void closeSync()
}

abstract class "lib::async::async.dart::_ForwardingStream" {
  -Stream<S> _source
  +bool isBroadcast
  +StreamSubscription<T> listen()
  -StreamSubscription<T> _createSubscription()
  -void _handleData()
  -void _handleError()
  -void _handleDone()
}

class "lib::async::async.dart::_ForwardingStreamSubscription" {
  -_ForwardingStream<S, T> _stream
  -StreamSubscription<S>? _subscription
  -void _add()
  -void _addError()
  -void _onPause()
  -void _onResume()
  -Future<void>? _onCancel()
  -void _handleData()
  -void _handleError()
  -void _handleDone()
}

class "lib::async::async.dart::_WhereStream" {
  -bool Function(T) _test
  -void _handleData()
}

class "lib::async::async.dart::_MapStream" {
  -T Function(S) _transform
  -void _handleData()
}

class "lib::async::async.dart::_ExpandStream" {
  -Iterable<T> Function(S) _expand
  -void _handleData()
}

class "lib::async::async.dart::_HandleErrorStream" {
  -void Function(Object, StackTrace) _onError
  -bool Function(Object)? _test
  -void _handleData()
  -void _handleError()
}

class "lib::async::async.dart::_TakeStream" {
  -int _count
  -StreamSubscription<T> _createSubscription()
  -void _handleData()
}

class "lib::async::async.dart::_StateStreamSubscription" {
  -S _subState
}

class "lib::async::async.dart::_TakeWhileStream" {
  -bool Function(T) _test
  -void _handleData()
}

class "lib::async::async.dart::_SkipStream" {
  -int _count
  -StreamSubscription<T> _createSubscription()
  -void _handleData()
}

class "lib::async::async.dart::_SkipWhileStream" {
  -bool Function(T) _test
  -StreamSubscription<T> _createSubscription()
  -void _handleData()
}

class "lib::async::async.dart::_DistinctStream" {
  {static} -Object _SENTINEL
  -bool Function(T, T)? _equals
  -StreamSubscription<T> _createSubscription()
  -void _handleData()
}

class "lib::async::async.dart::_EventSinkWrapper" {
  -_EventSink<T> _sink
  +void add()
  +void addError()
  +void close()
}

class "lib::async::async.dart::_SinkTransformerStreamSubscription" {
  -EventSink<S> _transformerSink
  -StreamSubscription<S>? _subscription
  -void _add()
  -void _addError()
  -void _close()
  -void _onPause()
  -void _onResume()
  -Future<void>? _onCancel()
  -void _handleData()
  -void _handleError()
  -void _handleDone()
}

class "lib::async::async.dart::_StreamSinkTransformer" {
  -EventSink<S> Function(EventSink<T>) _sinkMapper
  +Stream<T> bind()
}

class "lib::async::async.dart::_BoundSinkStream" {
  -EventSink<S> Function(EventSink<T>) _sinkMapper
  -Stream<S> _stream
  +bool isBroadcast
  +StreamSubscription<T> listen()
}

class "lib::async::async.dart::_HandlerEventSink" {
  -void Function(S, EventSink<T>)? _handleData
  -void Function(Object, StackTrace, EventSink<T>)? _handleError
  -void Function(EventSink<T>)? _handleDone
  -EventSink<T>? _sink
  +void add()
  +void addError()
  +void close()
}

class "lib::async::async.dart::_StreamHandlerTransformer" {
  +Stream<T> bind()
}

class "lib::async::async.dart::_StreamBindTransformer" {
  -Stream<T> Function(Stream<S>) _bind
  +Stream<T> bind()
}

class "lib::async::async.dart::_StreamSubscriptionTransformer" {
  -StreamSubscription<T> Function(Stream<S>, bool) _onListen
  +Stream<T> bind()
}

class "lib::async::async.dart::_BoundSubscriptionStream" {
  -StreamSubscription<T> Function(Stream<S>, bool) _onListen
  -Stream<S> _stream
  +bool isBroadcast
  +StreamSubscription<T> listen()
}

class "lib::async::async.dart::Timer" {
  +int tick
  +bool isActive
  {static} +void run()
  +void cancel()
  {static} -Timer _createTimer()
  {static} -Timer _createPeriodicTimer()
}

class "lib::async::async.dart::_ZoneFunction" {
  +_Zone zone
  +T function
}

abstract class "lib::async::async.dart::ZoneSpecification" {
  +void Function(Zone, ZoneDelegate, Zone, Object, StackTrace)? handleUncaughtError
  +R Function<R>(Zone, ZoneDelegate, Zone, R Function())? run
  +R Function<R, T>(Zone, ZoneDelegate, Zone, R Function(T), T)? runUnary
  +R Function<R, T1, T2>(Zone, ZoneDelegate, Zone, R Function(T1, T2), T1, T2)? runBinary
  +R Function() Function<R>(Zone, ZoneDelegate, Zone, R Function())? registerCallback
  +R Function(T) Function<R, T>(Zone, ZoneDelegate, Zone, R Function(T))? registerUnaryCallback
  +R Function(T1, T2) Function<R, T1, T2>(Zone, ZoneDelegate, Zone, R Function(T1, T2))? registerBinaryCallback
  +AsyncError? Function(Zone, ZoneDelegate, Zone, Object, StackTrace?)? errorCallback
  +void Function(Zone, ZoneDelegate, Zone, void Function())? scheduleMicrotask
  +Timer Function(Zone, ZoneDelegate, Zone, Duration, void Function())? createTimer
  +Timer Function(Zone, ZoneDelegate, Zone, Duration, void Function(Timer))? createPeriodicTimer
  +void Function(Zone, ZoneDelegate, Zone, String)? print
  +Zone Function(Zone, ZoneDelegate, Zone, ZoneSpecification?, Map<Object?, Object?>?)? fork
}

class "lib::async::async.dart::_ZoneSpecification" {
  +void Function(Zone, ZoneDelegate, Zone, Object, StackTrace)? handleUncaughtError
  +R Function<R>(Zone, ZoneDelegate, Zone, R Function())? run
  +R Function<R, T>(Zone, ZoneDelegate, Zone, R Function(T), T)? runUnary
  +R Function<R, T1, T2>(Zone, ZoneDelegate, Zone, R Function(T1, T2), T1, T2)? runBinary
  +R Function() Function<R>(Zone, ZoneDelegate, Zone, R Function())? registerCallback
  +R Function(T) Function<R, T>(Zone, ZoneDelegate, Zone, R Function(T))? registerUnaryCallback
  +R Function(T1, T2) Function<R, T1, T2>(Zone, ZoneDelegate, Zone, R Function(T1, T2))? registerBinaryCallback
  +AsyncError? Function(Zone, ZoneDelegate, Zone, Object, StackTrace?)? errorCallback
  +void Function(Zone, ZoneDelegate, Zone, void Function())? scheduleMicrotask
  +Timer Function(Zone, ZoneDelegate, Zone, Duration, void Function())? createTimer
  +Timer Function(Zone, ZoneDelegate, Zone, Duration, void Function(Timer))? createPeriodicTimer
  +void Function(Zone, ZoneDelegate, Zone, String)? print
  +Zone Function(Zone, ZoneDelegate, Zone, ZoneSpecification?, Map<Object?, Object?>?)? fork
}

abstract class "lib::async::async.dart::ZoneDelegate" {
  +void handleUncaughtError()
  +R run()
  +R runUnary()
  +R runBinary()
  +R Function() registerCallback()
  +R Function(T) registerUnaryCallback()
  +R Function(T1, T2) registerBinaryCallback()
  +AsyncError? errorCallback()
  +void scheduleMicrotask()
  +Timer createTimer()
  +Timer createPeriodicTimer()
  +void print()
  +Zone fork()
}

abstract class "lib::async::async.dart::Zone" {
  {static} +Zone root
  {static} -_Zone _current
  {static} +Zone current
  +Zone? parent
  +Zone errorZone
  +void handleUncaughtError()
  +bool inSameErrorZone()
  +Zone fork()
  +R run()
  +R runUnary()
  +R runBinary()
  +void runGuarded()
  +void runUnaryGuarded()
  +void runBinaryGuarded()
  +R Function() registerCallback()
  +R Function(T) registerUnaryCallback()
  +R Function(T1, T2) registerBinaryCallback()
  +R Function() bindCallback()
  +R Function(T) bindUnaryCallback()
  +R Function(T1, T2) bindBinaryCallback()
  +void Function() bindCallbackGuarded()
  +void Function(T) bindUnaryCallbackGuarded()
  +void Function(T1, T2) bindBinaryCallbackGuarded()
  +AsyncError? errorCallback()
  +void scheduleMicrotask()
  +Timer createTimer()
  +Timer createPeriodicTimer()
  +void print()
  {static} -_Zone _enter()
  {static} -void _leave()
  +dynamic []()
}

class "lib::async::async.dart::_ZoneDelegate" {
  -_Zone _delegationTarget
  +void handleUncaughtError()
  +R run()
  +R runUnary()
  +R runBinary()
  +R Function() registerCallback()
  +R Function(T) registerUnaryCallback()
  +R Function(T1, T2) registerBinaryCallback()
  +AsyncError? errorCallback()
  +void scheduleMicrotask()
  +Timer createTimer()
  +Timer createPeriodicTimer()
  +void print()
  +Zone fork()
}

class "lib::async::async.dart::_Zone" {
  -_ZoneFunction<R Function<R>(Zone, ZoneDelegate, Zone, R Function())> _run
  -_ZoneFunction<R Function<R, T>(Zone, ZoneDelegate, Zone, R Function(T), T)> _runUnary
  -_ZoneFunction<R Function<R, T1, T2>(Zone, ZoneDelegate, Zone, R Function(T1, T2), T1, T2)> _runBinary
  -_ZoneFunction<R Function() Function<R>(Zone, ZoneDelegate, Zone, R Function())> _registerCallback
  -_ZoneFunction<R Function(T) Function<R, T>(Zone, ZoneDelegate, Zone, R Function(T))> _registerUnaryCallback
  -_ZoneFunction<R Function(T1, T2) Function<R, T1, T2>(Zone, ZoneDelegate, Zone, R Function(T1, T2))> _registerBinaryCallback
  -_ZoneFunction<AsyncError? Function(Zone, ZoneDelegate, Zone, Object, StackTrace?)> _errorCallback
  -_ZoneFunction<void Function(Zone, ZoneDelegate, Zone, void Function())> _scheduleMicrotask
  -_ZoneFunction<Timer Function(Zone, ZoneDelegate, Zone, Duration, void Function())> _createTimer
  -_ZoneFunction<Timer Function(Zone, ZoneDelegate, Zone, Duration, void Function(Timer))> _createPeriodicTimer
  -_ZoneFunction<void Function(Zone, ZoneDelegate, Zone, String)> _print
  -_ZoneFunction<Zone Function(Zone, ZoneDelegate, Zone, ZoneSpecification?, Map<Object?, Object?>?)> _fork
  -_ZoneFunction<void Function(Zone, ZoneDelegate, Zone, Object, StackTrace)> _handleUncaughtError
  +_Zone? parent
  -ZoneDelegate _delegate
  -ZoneDelegate _parentDelegate
  -Map<Object?, Object?> _map
  +bool inSameErrorZone()
  -void _processUncaughtError()
}

class "lib::async::async.dart::_CustomZone" {
  -_ZoneFunction<R Function<R>(Zone, ZoneDelegate, Zone, R Function())> _run
  -_ZoneFunction<R Function<R, T>(Zone, ZoneDelegate, Zone, R Function(T), T)> _runUnary
  -_ZoneFunction<R Function<R, T1, T2>(Zone, ZoneDelegate, Zone, R Function(T1, T2), T1, T2)> _runBinary
  -_ZoneFunction<R Function() Function<R>(Zone, ZoneDelegate, Zone, R Function())> _registerCallback
  -_ZoneFunction<R Function(T) Function<R, T>(Zone, ZoneDelegate, Zone, R Function(T))> _registerUnaryCallback
  -_ZoneFunction<R Function(T1, T2) Function<R, T1, T2>(Zone, ZoneDelegate, Zone, R Function(T1, T2))> _registerBinaryCallback
  -_ZoneFunction<AsyncError? Function(Zone, ZoneDelegate, Zone, Object, StackTrace?)> _errorCallback
  -_ZoneFunction<void Function(Zone, ZoneDelegate, Zone, void Function())> _scheduleMicrotask
  -_ZoneFunction<Timer Function(Zone, ZoneDelegate, Zone, Duration, void Function())> _createTimer
  -_ZoneFunction<Timer Function(Zone, ZoneDelegate, Zone, Duration, void Function(Timer))> _createPeriodicTimer
  -_ZoneFunction<void Function(Zone, ZoneDelegate, Zone, String)> _print
  -_ZoneFunction<Zone Function(Zone, ZoneDelegate, Zone, ZoneSpecification?, Map<Object?, Object?>?)> _fork
  -_ZoneFunction<void Function(Zone, ZoneDelegate, Zone, Object, StackTrace)> _handleUncaughtError
  -ZoneDelegate? _delegateCache
  +_Zone parent
  -Map<Object?, Object?> _map
  -ZoneDelegate _delegate
  -ZoneDelegate _parentDelegate
  +Zone errorZone
  +void runGuarded()
  +void runUnaryGuarded()
  +void runBinaryGuarded()
  +R Function() bindCallback()
  +R Function(T) bindUnaryCallback()
  +R Function(T1, T2) bindBinaryCallback()
  +void Function() bindCallbackGuarded()
  +void Function(T) bindUnaryCallbackGuarded()
  +void Function(T1, T2) bindBinaryCallbackGuarded()
  +dynamic []()
  +void handleUncaughtError()
  +Zone fork()
  +R run()
  +R runUnary()
  +R runBinary()
  +R Function() registerCallback()
  +R Function(T) registerUnaryCallback()
  +R Function(T1, T2) registerBinaryCallback()
  +AsyncError? errorCallback()
  +void scheduleMicrotask()
  +Timer createTimer()
  +Timer createPeriodicTimer()
  +void print()
}

class "lib::async::async.dart::_RootZone" {
  {static} -HashMap<dynamic, dynamic> _rootMap
  {static} -ZoneDelegate? _rootDelegate
  -_ZoneFunction<R Function<R>(Zone, ZoneDelegate, Zone, R Function())> _run
  -_ZoneFunction<R Function<R, T>(Zone, ZoneDelegate, Zone, R Function(T), T)> _runUnary
  -_ZoneFunction<R Function<R, T1, T2>(Zone, ZoneDelegate, Zone, R Function(T1, T2), T1, T2)> _runBinary
  -_ZoneFunction<R Function() Function<R>(Zone, ZoneDelegate, Zone, R Function())> _registerCallback
  -_ZoneFunction<R Function(T) Function<R, T>(Zone, ZoneDelegate, Zone, R Function(T))> _registerUnaryCallback
  -_ZoneFunction<R Function(T1, T2) Function<R, T1, T2>(Zone, ZoneDelegate, Zone, R Function(T1, T2))> _registerBinaryCallback
  -_ZoneFunction<AsyncError? Function(Zone, ZoneDelegate, Zone, Object, StackTrace?)> _errorCallback
  -_ZoneFunction<void Function(Zone, ZoneDelegate, Zone, void Function())> _scheduleMicrotask
  -_ZoneFunction<Timer Function(Zone, ZoneDelegate, Zone, Duration, void Function())> _createTimer
  -_ZoneFunction<Timer Function(Zone, ZoneDelegate, Zone, Duration, void Function(Timer))> _createPeriodicTimer
  -_ZoneFunction<void Function(Zone, ZoneDelegate, Zone, String)> _print
  -_ZoneFunction<Zone Function(Zone, ZoneDelegate, Zone, ZoneSpecification?, Map<Object?, Object?>?)> _fork
  -_ZoneFunction<void Function(Zone, ZoneDelegate, Zone, Object, StackTrace)> _handleUncaughtError
  +_Zone? parent
  -Map<Object?, Object?> _map
  -ZoneDelegate _delegate
  -ZoneDelegate _parentDelegate
  +Zone errorZone
  +void runGuarded()
  +void runUnaryGuarded()
  +void runBinaryGuarded()
  +R Function() bindCallback()
  +R Function(T) bindUnaryCallback()
  +R Function(T1, T2) bindBinaryCallback()
  +void Function() bindCallbackGuarded()
  +void Function(T) bindUnaryCallbackGuarded()
  +void Function(T1, T2) bindBinaryCallbackGuarded()
  +dynamic []()
  +void handleUncaughtError()
  +Zone fork()
  +R run()
  +R runUnary()
  +R runBinary()
  +R Function() registerCallback()
  +R Function(T) registerUnaryCallback()
  +R Function(T1, T2) registerBinaryCallback()
  +AsyncError? errorCallback()
  +void scheduleMicrotask()
  +Timer createTimer()
  +Timer createPeriodicTimer()
  +void print()
}

abstract class "dart::_http::HttpServer" {
  +String? serverHeader
  +bool autoCompress
  +Duration? idleTimeout
  +HttpHeaders defaultResponseHeaders
  +int port
  +InternetAddress address
  +int sessionTimeout
  {static} +dynamic bind()
  {static} +dynamic bindSecure()
  +dynamic close()
  +HttpConnectionsInfo connectionsInfo()
}

class "dart::_http::HttpConnectionsInfo" {
  +int total
  +int active
  +int idle
  +int closing
}

class "dart::_http::HttpHeaders" {
  {static} +String acceptHeader
  {static} +String acceptCharsetHeader
  {static} +String acceptEncodingHeader
  {static} +String acceptLanguageHeader
  {static} +String acceptRangesHeader
  {static} +String accessControlAllowCredentialsHeader
  {static} +String accessControlAllowHeadersHeader
  {static} +String accessControlAllowMethodsHeader
  {static} +String accessControlAllowOriginHeader
  {static} +String accessControlExposeHeadersHeader
  {static} +String accessControlMaxAgeHeader
  {static} +String accessControlRequestHeadersHeader
  {static} +String accessControlRequestMethodHeader
  {static} +String ageHeader
  {static} +String allowHeader
  {static} +String authorizationHeader
  {static} +String cacheControlHeader
  {static} +String connectionHeader
  {static} +String contentEncodingHeader
  {static} +String contentLanguageHeader
  {static} +String contentLengthHeader
  {static} +String contentLocationHeader
  {static} +String contentMD5Header
  {static} +String contentRangeHeader
  {static} +String contentTypeHeader
  {static} +String dateHeader
  {static} +String etagHeader
  {static} +String expectHeader
  {static} +String expiresHeader
  {static} +String fromHeader
  {static} +String hostHeader
  {static} +String ifMatchHeader
  {static} +String ifModifiedSinceHeader
  {static} +String ifNoneMatchHeader
  {static} +String ifRangeHeader
  {static} +String ifUnmodifiedSinceHeader
  {static} +String lastModifiedHeader
  {static} +String locationHeader
  {static} +String maxForwardsHeader
  {static} +String pragmaHeader
  {static} +String proxyAuthenticateHeader
  {static} +String proxyAuthorizationHeader
  {static} +String rangeHeader
  {static} +String refererHeader
  {static} +String retryAfterHeader
  {static} +String serverHeader
  {static} +String teHeader
  {static} +String trailerHeader
  {static} +String transferEncodingHeader
  {static} +String upgradeHeader
  {static} +String userAgentHeader
  {static} +String varyHeader
  {static} +String viaHeader
  {static} +String warningHeader
  {static} +String wwwAuthenticateHeader
  {static} +String contentDisposition
  {static} +String cookieHeader
  {static} +String setCookieHeader
  {static} +List<String> generalHeaders
  {static} +List<String> entityHeaders
  {static} +List<String> responseHeaders
  {static} +List<String> requestHeaders
  +DateTime? date
  +DateTime? expires
  +DateTime? ifModifiedSince
  +String? host
  +int? port
  +ContentType? contentType
  +int contentLength
  +bool persistentConnection
  +bool chunkedTransferEncoding
  +List<String>? []()
  +String? value()
  +void add()
  +void set()
  +void remove()
  +void removeAll()
  +void forEach()
  +void noFolding()
  +void clear()
}

class "dart::_http::HeaderValue" {
  +String value
  +Map<String, String?> parameters
  {static} +HeaderValue parse()
  +String toString()
}

class "dart::_http::HttpSession" {
  +String id
  +void Function() onTimeout
  +bool isNew
  +void destroy()
}

class "dart::_http::ContentType" {
  {static} +ContentType text
  {static} +ContentType html
  {static} +ContentType json
  {static} +ContentType binary
  +String mimeType
  +String primaryType
  +String subType
  +String? charset
  {static} +ContentType parse()
}

class "dart::_http::SameSite" {
  {static} +SameSite lax
  {static} +SameSite strict
  {static} +SameSite none
  {static} +List<SameSite> values
  +String name
  +String toString()
}

class "dart::_http::Cookie" {
  +String name
  +String value
  +DateTime? expires
  +int? maxAge
  +String? domain
  +String? path
  +bool secure
  +bool httpOnly
  +SameSite? sameSite
  +String toString()
}

class "dart::_http::HttpRequest" {
  +int contentLength
  +String method
  +Uri uri
  +Uri requestedUri
  +HttpHeaders headers
  +List<Cookie> cookies
  +bool persistentConnection
  +X509Certificate? certificate
  +HttpSession session
  +String protocolVersion
  +HttpConnectionInfo? connectionInfo
  +HttpResponse response
}

class "dart::_http::HttpResponse" {
  +int contentLength
  +int statusCode
  +String reasonPhrase
  +bool persistentConnection
  +Duration? deadline
  +bool bufferOutput
  +HttpHeaders headers
  +List<Cookie> cookies
  +HttpConnectionInfo? connectionInfo
  +dynamic redirect()
  +dynamic detachSocket()
}

class "dart::_http::HttpClient" {
  {static} +int defaultHttpPort
  {static} +int defaultHttpsPort
  {static} -bool _enableTimelineLogging
  +Duration idleTimeout
  +Duration? connectionTimeout
  +int? maxConnectionsPerHost
  +bool autoUncompress
  +String? userAgent
  {static} +bool enableTimelineLogging
  +dynamic Function(Uri, String, String?)? authenticate
  +dynamic Function(Uri, String?, int?)? connectionFactory
  +String Function(Uri)? findProxy
  +dynamic Function(String, int, String, String?)? authenticateProxy
  +bool Function(X509Certificate, String, int)? badCertificateCallback
  +dynamic Function(String)? keyLog
  +dynamic open()
  +dynamic openUrl()
  +dynamic get()
  +dynamic getUrl()
  +dynamic post()
  +dynamic postUrl()
  +dynamic put()
  +dynamic putUrl()
  +dynamic delete()
  +dynamic deleteUrl()
  +dynamic patch()
  +dynamic patchUrl()
  +dynamic head()
  +dynamic headUrl()
  +void addCredentials()
  {static} +String findProxyFromEnvironment()
  +void addProxyCredentials()
  +void close()
}

class "dart::_http::HttpClientRequest" {
  +bool persistentConnection
  +bool followRedirects
  +int maxRedirects
  +int contentLength
  +bool bufferOutput
  +String method
  +Uri uri
  +HttpHeaders headers
  +List<Cookie> cookies
  +dynamic done
  +HttpConnectionInfo? connectionInfo
  +dynamic close()
  +void abort()
}

class "dart::_http::HttpClientResponse" {
  +int statusCode
  +String reasonPhrase
  +int contentLength
  +HttpClientResponseCompressionState compressionState
  +bool persistentConnection
  +bool isRedirect
  +List<RedirectInfo> redirects
  +HttpHeaders headers
  +List<Cookie> cookies
  +X509Certificate? certificate
  +HttpConnectionInfo? connectionInfo
  +dynamic redirect()
  +dynamic detachSocket()
}

class "dart::_http::HttpClientCredentials" {
}

abstract class "dart::_http::HttpClientBasicCredentials" {
}

abstract class "dart::_http::HttpClientDigestCredentials" {
}

class "dart::_http::HttpConnectionInfo" {
  +InternetAddress remoteAddress
  +int remotePort
  +int localPort
}

class "dart::_http::RedirectInfo" {
  +int statusCode
  +String method
  +Uri location
}

class "dart::_http::HttpException" {
  +String message
  +Uri? uri
  +String toString()
}

class "dart::_http::RedirectException" {
  +String message
  +List<RedirectInfo> redirects
  +Uri? uri
  +String toString()
}

class "dart::_http::HttpClientResponseCompressionState" {
  +int index
  {static} +List<HttpClientResponseCompressionState> values
  {static} +HttpClientResponseCompressionState notCompressed
  {static} +HttpClientResponseCompressionState decompressed
  {static} +HttpClientResponseCompressionState compressed
}

class "dart::_http::HttpDate" {
  {static} +String format()
  {static} +DateTime parse()
  {static} -DateTime _parseCookieDate()
}

abstract class "dart::_http::HttpOverrides" {
  {static} -HttpOverrides? _global
  {static} +HttpOverrides? current
  {static} +HttpOverrides? global
  {static} +R runZoned()
  {static} +R runWithHttpOverrides()
  +HttpClient createHttpClient()
  +String findProxyFromEnvironment()
}

abstract class "dart::_http::WebSocketStatus" {
  {static} +int normalClosure
  {static} +int goingAway
  {static} +int protocolError
  {static} +int unsupportedData
  {static} +int reserved1004
  {static} +int noStatusReceived
  {static} +int abnormalClosure
  {static} +int invalidFramePayloadData
  {static} +int policyViolation
  {static} +int messageTooBig
  {static} +int missingMandatoryExtension
  {static} +int internalServerError
  {static} +int reserved1015
}

class "dart::_http::CompressionOptions" {
  {static} +CompressionOptions compressionDefault
  {static} +CompressionOptions compressionOff
  +bool clientNoContextTakeover
  +bool serverNoContextTakeover
  +int? clientMaxWindowBits
  +int? serverMaxWindowBits
  +bool enabled
  -_CompressionMaxWindowBits _createServerResponseHeader()
  -String _createClientRequestHeader()
  -_CompressionMaxWindowBits _createHeader()
}

abstract class "dart::_http::WebSocketTransformer" {
  {static} +dynamic upgrade()
  {static} +bool isUpgradeRequest()
}

abstract class "dart::_http::WebSocket" {
  {static} +int connecting
  {static} +int open
  {static} +int closing
  {static} +int closed
  +Duration? pingInterval
  +int readyState
  +String extensions
  +String? protocol
  +int? closeCode
  +String? closeReason
  {static} +String? userAgent
  {static} +dynamic connect()
  +dynamic close()
  +void add()
  +dynamic addStream()
  +void addUtf8Text()
}

class "dart::_http::WebSocketException" {
  +String message
  +String toString()
}

class "dart::_internal::BytesBuilder" {
  +int length
  +bool isEmpty
  +bool isNotEmpty
  +void add()
  +void addByte()
  +Uint8List takeBytes()
  +Uint8List toBytes()
  +void clear()
}

abstract class "dart::_internal::HttpStatus" {
  {static} +int continue_
  {static} +int switchingProtocols
  {static} +int processing
  {static} +int ok
  {static} +int created
  {static} +int accepted
  {static} +int nonAuthoritativeInformation
  {static} +int noContent
  {static} +int resetContent
  {static} +int partialContent
  {static} +int multiStatus
  {static} +int alreadyReported
  {static} +int imUsed
  {static} +int multipleChoices
  {static} +int movedPermanently
  {static} +int found
  {static} +int movedTemporarily
  {static} +int seeOther
  {static} +int notModified
  {static} +int useProxy
  {static} +int temporaryRedirect
  {static} +int permanentRedirect
  {static} +int badRequest
  {static} +int unauthorized
  {static} +int paymentRequired
  {static} +int forbidden
  {static} +int notFound
  {static} +int methodNotAllowed
  {static} +int notAcceptable
  {static} +int proxyAuthenticationRequired
  {static} +int requestTimeout
  {static} +int conflict
  {static} +int gone
  {static} +int lengthRequired
  {static} +int preconditionFailed
  {static} +int requestEntityTooLarge
  {static} +int requestUriTooLong
  {static} +int unsupportedMediaType
  {static} +int requestedRangeNotSatisfiable
  {static} +int expectationFailed
  {static} +int misdirectedRequest
  {static} +int unprocessableEntity
  {static} +int locked
  {static} +int failedDependency
  {static} +int upgradeRequired
  {static} +int preconditionRequired
  {static} +int tooManyRequests
  {static} +int requestHeaderFieldsTooLarge
  {static} +int connectionClosedWithoutResponse
  {static} +int unavailableForLegalReasons
  {static} +int clientClosedRequest
  {static} +int internalServerError
  {static} +int notImplemented
  {static} +int badGateway
  {static} +int serviceUnavailable
  {static} +int gatewayTimeout
  {static} +int httpVersionNotSupported
  {static} +int variantAlsoNegotiates
  {static} +int insufficientStorage
  {static} +int loopDetected
  {static} +int notExtended
  {static} +int networkAuthenticationRequired
  {static} +int networkConnectTimeoutError
  {static} +int CONTINUE
  {static} +int SWITCHING_PROTOCOLS
  {static} +int OK
  {static} +int CREATED
  {static} +int ACCEPTED
  {static} +int NON_AUTHORITATIVE_INFORMATION
  {static} +int NO_CONTENT
  {static} +int RESET_CONTENT
  {static} +int PARTIAL_CONTENT
  {static} +int MULTIPLE_CHOICES
  {static} +int MOVED_PERMANENTLY
  {static} +int FOUND
  {static} +int MOVED_TEMPORARILY
  {static} +int SEE_OTHER
  {static} +int NOT_MODIFIED
  {static} +int USE_PROXY
  {static} +int TEMPORARY_REDIRECT
  {static} +int BAD_REQUEST
  {static} +int UNAUTHORIZED
  {static} +int PAYMENT_REQUIRED
  {static} +int FORBIDDEN
  {static} +int NOT_FOUND
  {static} +int METHOD_NOT_ALLOWED
  {static} +int NOT_ACCEPTABLE
  {static} +int PROXY_AUTHENTICATION_REQUIRED
  {static} +int REQUEST_TIMEOUT
  {static} +int CONFLICT
  {static} +int GONE
  {static} +int LENGTH_REQUIRED
  {static} +int PRECONDITION_FAILED
  {static} +int REQUEST_ENTITY_TOO_LARGE
  {static} +int REQUEST_URI_TOO_LONG
  {static} +int UNSUPPORTED_MEDIA_TYPE
  {static} +int REQUESTED_RANGE_NOT_SATISFIABLE
  {static} +int EXPECTATION_FAILED
  {static} +int UPGRADE_REQUIRED
  {static} +int INTERNAL_SERVER_ERROR
  {static} +int NOT_IMPLEMENTED
  {static} +int BAD_GATEWAY
  {static} +int SERVICE_UNAVAILABLE
  {static} +int GATEWAY_TIMEOUT
  {static} +int HTTP_VERSION_NOT_SUPPORTED
  {static} +int NETWORK_CONNECT_TIMEOUT_ERROR
}

abstract class "lib::io::io.dart::IOException" {
  +String toString()
}

class "lib::io::io.dart::OSError" {
  {static} +int noErrorCode
  +String message
  +int errorCode
  +String toString()
}

class "lib::io::io.dart::_BufferAndStart" {
  +List<int> buffer
  +int start
}

class "lib::io::io.dart::_IOCrypto" {
  {static} +Uint8List getRandomBytes()
}

abstract class "lib::io::io.dart::ZLibOption" {
  {static} +int minWindowBits
  {static} +int maxWindowBits
  {static} +int defaultWindowBits
  {static} +int minLevel
  {static} +int maxLevel
  {static} +int defaultLevel
  {static} +int minMemLevel
  {static} +int maxMemLevel
  {static} +int defaultMemLevel
  {static} +int strategyFiltered
  {static} +int strategyHuffmanOnly
  {static} +int strategyRle
  {static} +int strategyFixed
  {static} +int strategyDefault
}

class "lib::io::io.dart::ZLibCodec" {
  +bool gzip
  +int level
  +int memLevel
  +int strategy
  +int windowBits
  +bool raw
  +List<int>? dictionary
  +ZLibEncoder encoder
  +ZLibDecoder decoder
}

class "lib::io::io.dart::GZipCodec" {
  +bool gzip
  +int level
  +int memLevel
  +int strategy
  +int windowBits
  +List<int>? dictionary
  +bool raw
  +ZLibEncoder encoder
  +ZLibDecoder decoder
}

class "lib::io::io.dart::ZLibEncoder" {
  +bool gzip
  +int level
  +int memLevel
  +int strategy
  +int windowBits
  +List<int>? dictionary
  +bool raw
  +List<int> convert()
  +ByteConversionSink startChunkedConversion()
}

class "lib::io::io.dart::ZLibDecoder" {
  +int windowBits
  +List<int>? dictionary
  +bool raw
  +List<int> convert()
  +ByteConversionSink startChunkedConversion()
}

class "lib::io::io.dart::RawZLibFilter" {
  +void process()
  +List<int>? processed()
  {static} -RawZLibFilter _makeZLibDeflateFilter()
  {static} -RawZLibFilter _makeZLibInflateFilter()
}

class "lib::io::io.dart::_BufferSink" {
  +BytesBuilder builder
  +void add()
  +void addSlice()
  +void close()
}

class "lib::io::io.dart::_ZLibEncoderSink" {
}

class "lib::io::io.dart::_ZLibDecoderSink" {
}

class "lib::io::io.dart::_FilterSink" {
  -RawZLibFilter _filter
  -ByteConversionSink _sink
  -bool _closed
  -bool _empty
  +void add()
  +void addSlice()
  +void close()
}

class "lib::io::io.dart::Directory" {
  +String path
  {static} +Directory current
  +Uri uri
  {static} +Directory systemTemp
  +Directory absolute
  +dynamic create()
  +void createSync()
  +dynamic createTemp()
  +Directory createTempSync()
  +dynamic resolveSymbolicLinks()
  +String resolveSymbolicLinksSync()
  +dynamic rename()
  +Directory renameSync()
  +dynamic delete()
  +void deleteSync()
  +Stream<FileSystemEntity> list()
  +List<FileSystemEntity> listSync()
  +String toString()
}

class "lib::io::io.dart::_Directory" {
  -String _path
  -Uint8List _rawPath
  +String path
  {static} +Directory current
  +Uri uri
  +Directory absolute
  {static} +Directory systemTemp
  {static} -dynamic _current()
  {static} -dynamic _setCurrent()
  {static} -dynamic _createTemp()
  {static} -String _systemTemp()
  {static} -dynamic _exists()
  {static} -dynamic _create()
  {static} -dynamic _deleteNative()
  {static} -dynamic _rename()
  {static} -void _fillWithDirectoryListing()
  +dynamic exists()
  +bool existsSync()
  +dynamic create()
  +void createSync()
  +dynamic createTemp()
  +Directory createTempSync()
  -dynamic _delete()
  -void _deleteSync()
  +dynamic rename()
  +Directory renameSync()
  +Stream<FileSystemEntity> list()
  +List<FileSystemEntity> listSync()
  +String toString()
  {static} -T _checkNotNull()
}

abstract class "lib::io::io.dart::_AsyncDirectoryListerOps" {
  +int? getPointer()
}

class "lib::io::io.dart::_AsyncDirectoryLister" {
  {static} +int listFile
  {static} +int listDirectory
  {static} +int listLink
  {static} +int listError
  {static} +int listDone
  {static} +int responseType
  {static} +int responsePath
  {static} +int responseComplete
  {static} +int responseError
  +Uint8List rawPath
  +bool recursive
  +bool followLinks
  +StreamController<FileSystemEntity> controller
  +bool canceled
  +bool nextRunning
  +bool closed
  -_AsyncDirectoryListerOps? _ops
  +Completer<dynamic> closeCompleter
  +Stream<FileSystemEntity> stream
  -int? _pointer()
  +void onListen()
  +void onResume()
  +dynamic onCancel()
  +void next()
  -void _cleanup()
  +void close()
  +void error()
}

abstract class "lib::io::io.dart::_EmbedderConfig" {
  {static} -bool _mayChdir
  {static} -bool _mayExit
  {static} -bool _maySetEchoMode
  {static} -bool _maySetEchoNewlineMode
  {static} -bool _maySetLineMode
  {static} -bool _maySleep
}

class "lib::io::io.dart::_EventHandler" {
  {static} -void _sendData()
}

class "lib::io::io.dart::FileMode" {
  {static} +FileMode read
  {static} +FileMode write
  {static} +FileMode append
  {static} +FileMode writeOnly
  {static} +FileMode writeOnlyAppend
  -int _mode
}

class "lib::io::io.dart::FileLock" {
  {static} +FileLock shared
  {static} +FileLock exclusive
  {static} +FileLock blockingShared
  {static} +FileLock blockingExclusive
  -int _type
}

class "lib::io::io.dart::File" {
  +File absolute
  +String path
  +dynamic create()
  +void createSync()
  +dynamic rename()
  +File renameSync()
  +dynamic delete()
  +void deleteSync()
  +dynamic copy()
  +File copySync()
  +dynamic length()
  +int lengthSync()
  +dynamic lastAccessed()
  +DateTime lastAccessedSync()
  +dynamic setLastAccessed()
  +void setLastAccessedSync()
  +dynamic lastModified()
  +DateTime lastModifiedSync()
  +dynamic setLastModified()
  +void setLastModifiedSync()
  +dynamic open()
  +RandomAccessFile openSync()
  +Stream<List<int>> openRead()
  +IOSink openWrite()
  +dynamic readAsBytes()
  +Uint8List readAsBytesSync()
  +dynamic readAsString()
  +String readAsStringSync()
  +dynamic readAsLines()
  +List<String> readAsLinesSync()
  +dynamic writeAsBytes()
  +void writeAsBytesSync()
  +dynamic writeAsString()
  +void writeAsStringSync()
}

class "lib::io::io.dart::RandomAccessFile" {
  +String path
  +dynamic close()
  +void closeSync()
  +dynamic readByte()
  +int readByteSync()
  +dynamic read()
  +Uint8List readSync()
  +dynamic readInto()
  +int readIntoSync()
  +dynamic writeByte()
  +int writeByteSync()
  +dynamic writeFrom()
  +void writeFromSync()
  +dynamic writeString()
  +void writeStringSync()
  +dynamic position()
  +int positionSync()
  +dynamic setPosition()
  +void setPositionSync()
  +dynamic truncate()
  +void truncateSync()
  +dynamic length()
  +int lengthSync()
  +dynamic flush()
  +void flushSync()
  +dynamic lock()
  +void lockSync()
  +dynamic unlock()
  +void unlockSync()
  +String toString()
}

class "lib::io::io.dart::FileSystemException" {
  +String message
  +String? path
  +OSError? osError
  -String _toStringHelper()
  +String toString()
}

class "lib::io::io.dart::PathAccessException" {
  +String toString()
}

class "lib::io::io.dart::PathExistsException" {
  +String toString()
}

class "lib::io::io.dart::PathNotFoundException" {
  +String toString()
}

class "lib::io::io.dart::ReadPipe" {
}

class "lib::io::io.dart::WritePipe" {
}

class "lib::io::io.dart::Pipe" {
  +ReadPipe read
  +WritePipe write
  {static} +dynamic create()
}

class "lib::io::io.dart::_FileStream" {
  -StreamController<Uint8List> _controller
  -String? _path
  -RandomAccessFile? _openedFile
  -int _position
  -int? _end
  -Completer<dynamic> _closeCompleter
  -bool _unsubscribed
  -bool _readInProgress
  -bool _closed
  -bool _atEnd
  +StreamSubscription<Uint8List> listen()
  -dynamic _closeFile()
  -void _readBlock()
  -void _start()
}

class "lib::io::io.dart::_FileStreamConsumer" {
  -File? _file
  -dynamic _openFuture
  +dynamic addStream()
  +dynamic close()
}

class "lib::io::io.dart::_File" {
  -String _path
  -Uint8List _rawPath
  +String path
  +File absolute
  {static} -int _namespacePointer()
  {static} -dynamic _dispatchWithNamespace()
  +dynamic exists()
  {static} -dynamic _exists()
  +bool existsSync()
  +dynamic create()
  {static} -dynamic _create()
  {static} -dynamic _createLink()
  {static} -List<dynamic> _createPipe()
  {static} -dynamic _linkTarget()
  +void createSync()
  -dynamic _delete()
  {static} -dynamic _deleteNative()
  {static} -dynamic _deleteLinkNative()
  -void _deleteSync()
  +dynamic rename()
  {static} -dynamic _rename()
  {static} -dynamic _renameLink()
  +File renameSync()
  +dynamic copy()
  {static} -dynamic _copy()
  +File copySync()
  +dynamic open()
  +dynamic length()
  {static} -dynamic _lengthFromPath()
  +int lengthSync()
  +dynamic lastAccessed()
  {static} -dynamic _lastAccessed()
  +DateTime lastAccessedSync()
  +dynamic setLastAccessed()
  {static} -dynamic _setLastAccessed()
  +void setLastAccessedSync()
  +dynamic lastModified()
  {static} -dynamic _lastModified()
  +DateTime lastModifiedSync()
  +dynamic setLastModified()
  {static} -dynamic _setLastModified()
  +void setLastModifiedSync()
  {static} -dynamic _open()
  +RandomAccessFile openSync()
  {static} -int _openStdio()
  {static} -RandomAccessFile _openStdioSync()
  +Stream<List<int>> openRead()
  +IOSink openWrite()
  +dynamic readAsBytes()
  +Uint8List readAsBytesSync()
  -String _tryDecode()
  +dynamic readAsString()
  +String readAsStringSync()
  +dynamic readAsLines()
  +List<String> readAsLinesSync()
  +dynamic writeAsBytes()
  +void writeAsBytesSync()
  +dynamic writeAsString()
  +void writeAsStringSync()
  +String toString()
  {static} +dynamic throwIfError()
  {static} -T _checkNotNull()
}

abstract class "lib::io::io.dart::_RandomAccessFileOps" {
  +int fd
  +int getPointer()
  +int close()
  +dynamic readByte()
  +dynamic read()
  +dynamic readInto()
  +dynamic writeByte()
  +dynamic writeFrom()
  +dynamic position()
  +dynamic setPosition()
  +dynamic truncate()
  +dynamic length()
  +dynamic flush()
  +dynamic lock()
}

class "lib::io::io.dart::_RandomAccessFile" {
  {static} -bool _connectedResourceHandler
  +String path
  -bool _asyncDispatched
  -_FileResourceInfo _resourceInfo
  -_RandomAccessFileOps _ops
  {static} +int lockUnlock
  +bool closed
  +int fd
  -void _maybePerformCleanup()
  -dynamic _maybeConnectHandler()
  +dynamic close()
  +void closeSync()
  +dynamic readByte()
  +int readByteSync()
  +dynamic read()
  +Uint8List readSync()
  +dynamic readInto()
  +int readIntoSync()
  +dynamic writeByte()
  +int writeByteSync()
  +dynamic writeFrom()
  +void writeFromSync()
  +dynamic writeString()
  +void writeStringSync()
  +dynamic position()
  +int positionSync()
  +dynamic setPosition()
  +void setPositionSync()
  +dynamic truncate()
  +void truncateSync()
  +dynamic length()
  +int lengthSync()
  +dynamic flush()
  +void flushSync()
  -int _fileLockValue()
  +dynamic lock()
  +dynamic unlock()
  +void lockSync()
  +void unlockSync()
  -int _pointer()
  -dynamic _dispatch()
  -void _checkAvailable()
}

class "lib::io::io.dart::_ReadPipe" {
}

class "lib::io::io.dart::_WritePipe" {
  -RandomAccessFile _file
}

class "lib::io::io.dart::_Pipe" {
  -ReadPipe _readPipe
  -WritePipe _writePipe
  +ReadPipe read
  +WritePipe write
  {static} +dynamic create()
}

class "lib::io::io.dart::FileSystemEntityType" {
  {static} +FileSystemEntityType file
  {static} +FileSystemEntityType directory
  {static} +FileSystemEntityType link
  {static} +FileSystemEntityType unixDomainSock
  {static} +FileSystemEntityType pipe
  {static} +FileSystemEntityType notFound
  {static} +FileSystemEntityType NOT_FOUND
  {static} -List<FileSystemEntityType> _typeList
  -int _type
  {static} -FileSystemEntityType _lookup()
  +String toString()
}

class "lib::io::io.dart::FileStat" {
  {static} -int _type
  {static} -int _changedTime
  {static} -int _modifiedTime
  {static} -int _accessedTime
  {static} -int _mode
  {static} -int _size
  {static} -DateTime _epoch
  {static} -FileStat _notFound
  +DateTime changed
  +DateTime modified
  +DateTime accessed
  +FileSystemEntityType type
  +int mode
  +int size
  {static} -dynamic _statSync()
  {static} +FileStat statSync()
  {static} -FileStat _statSyncInternal()
  {static} +dynamic stat()
  {static} -dynamic _stat()
  +String toString()
  +String modeString()
}

abstract class "lib::io::io.dart::FileSystemEntity" {
  {static} -int _backslashChar
  {static} -int _slashChar
  {static} -int _colonChar
  {static} -RegExp _absoluteWindowsPathPattern
  {static} -RegExp _parentRegExp
  -String _path
  -Uint8List _rawPath
  +String path
  +Uri uri
  +bool isAbsolute
  +FileSystemEntity absolute
  -String _absolutePath
  {static} +bool isWatchSupported
  +Directory parent
  +dynamic exists()
  +bool existsSync()
  +dynamic rename()
  +FileSystemEntity renameSync()
  +dynamic resolveSymbolicLinks()
  +String resolveSymbolicLinksSync()
  +dynamic stat()
  +FileStat statSync()
  +dynamic delete()
  +void deleteSync()
  +Stream<FileSystemEvent> watch()
  -dynamic _delete()
  -void _deleteSync()
  {static} -dynamic _identical()
  {static} +dynamic identical()
  {static} -bool _isAbsolute()
  {static} -int _windowsDriveLetter()
  {static} -String _absoluteWindowsPath()
  {static} -bool _identicalSync()
  {static} +bool identicalSync()
  {static} -Uint8List _toUtf8Array()
  {static} -Uint8List _toNullTerminatedUtf8Array()
  {static} -String _toStringFromUtf8Array()
  {static} +dynamic type()
  {static} +FileSystemEntityType typeSync()
  {static} +dynamic isLink()
  {static} -dynamic _isLinkRaw()
  {static} +dynamic isFile()
  {static} +dynamic isDirectory()
  {static} +bool isLinkSync()
  {static} -bool _isLinkRawSync()
  {static} +bool isFileSync()
  {static} +bool isDirectorySync()
  {static} -dynamic _getTypeNative()
  {static} -dynamic _identicalNative()
  {static} -dynamic _resolveSymbolicLinks()
  {static} +String parentOf()
  {static} -FileSystemEntityType _getTypeSyncHelper()
  {static} -FileSystemEntityType _getTypeSync()
  {static} -dynamic _getTypeRequest()
  {static} -dynamic _getType()
  {static} -dynamic _throwIfError()
  {static} -String _trimTrailingPathSeparators()
  {static} -String _ensureTrailingPathSeparators()
}

class "lib::io::io.dart::FileSystemEvent" {
  {static} +int create
  {static} +int modify
  {static} +int delete
  {static} +int move
  {static} +int all
  {static} -int _modifyAttributes
  {static} -int _deleteSelf
  {static} -int _isDir
  +int type
  +String path
  +bool isDirectory
}

class "lib::io::io.dart::FileSystemCreateEvent" {
  +String toString()
}

class "lib::io::io.dart::FileSystemModifyEvent" {
  +bool contentChanged
  +String toString()
}

class "lib::io::io.dart::FileSystemDeleteEvent" {
  +String toString()
}

class "lib::io::io.dart::FileSystemMoveEvent" {
  +String? destination
  +String toString()
}

abstract class "lib::io::io.dart::_FileSystemWatcher" {
  {static} +bool isSupported
  {static} -Stream<FileSystemEvent> _watch()
}

abstract class "lib::io::io.dart::_IOResourceInfo" {
  +String type
  +int id
  {static} -int _count
  {static} -Stopwatch _sw
  {static} -int _startTime
  +String name
  {static} +int timestamp
  +Map<String, dynamic> fullValueMap
  +Map<String, dynamic> referenceValueMap
  {static} +int getNextID()
}

abstract class "lib::io::io.dart::_ReadWriteResourceInfo" {
  +int readBytes
  +int writeBytes
  +int readCount
  +int writeCount
  +int lastReadTime
  +int lastWriteTime
  +Map<String, dynamic> fullValueMap
  +void addRead()
  +void didRead()
  +void addWrite()
}

class "lib::io::io.dart::_FileResourceInfo" {
  {static} -String _type
  +RandomAccessFile file
  {static} +Map<int, _FileResourceInfo> openFiles
  +Map<String, dynamic> fileInfoMap
  +String name
  {static} +dynamic fileOpened()
  {static} +dynamic fileClosed()
  {static} +Iterable<Map<String, dynamic>> getOpenFilesList()
  {static} +dynamic getOpenFiles()
  {static} +dynamic getOpenFileInfoMapByID()
}

abstract class "lib::io::io.dart::_Process" {
  -String _path
  -List<String> _arguments
  -String? _workingDirectory
}

class "lib::io::io.dart::_SpawnedProcessResourceInfo" {
  {static} -String _type
  +_Process process
  +int startedAt
  {static} +Map<int, _SpawnedProcessResourceInfo> startedProcesses
  +String name
  +Map<String, dynamic> fullValueMap
  +void stopped()
  {static} +dynamic processStarted()
  {static} +dynamic processStopped()
  {static} +Iterable<Map<String, dynamic>> getStartedProcessesList()
  {static} +dynamic getStartedProcesses()
  {static} +dynamic getProcessInfoMapById()
}

class "lib::io::io.dart::IOSink" {
  +Encoding encoding
  +dynamic done
  +void add()
  +void write()
  +void writeAll()
  +void writeln()
  +void writeCharCode()
  +void addError()
  +dynamic addStream()
  +dynamic flush()
  +dynamic close()
}

class "lib::io::io.dart::_StreamSinkImpl" {
  -StreamConsumer<T> _target
  -Completer<dynamic> _doneCompleter
  -StreamController<T>? _controllerInstance
  -Completer<dynamic>? _controllerCompleter
  -bool _isClosed
  -bool _isBound
  -bool _hasError
  +dynamic done
  -StreamController<T> _controller
  +void add()
  +void addError()
  +dynamic addStream()
  +dynamic flush()
  +dynamic close()
  -void _closeTarget()
  -void _completeDoneValue()
  -void _completeDoneError()
}

class "lib::io::io.dart::_IOSinkImpl" {
  -Encoding _encoding
  -bool _encodingMutable
  +Encoding encoding
  +void write()
  +void writeAll()
  +void writeln()
  +void writeCharCode()
}

class "lib::io::io.dart::_IOService" {
  {static} +int fileExists
  {static} +int fileCreate
  {static} +int fileDelete
  {static} +int fileRename
  {static} +int fileCopy
  {static} +int fileOpen
  {static} +int fileResolveSymbolicLinks
  {static} +int fileClose
  {static} +int filePosition
  {static} +int fileSetPosition
  {static} +int fileTruncate
  {static} +int fileLength
  {static} +int fileLengthFromPath
  {static} +int fileLastAccessed
  {static} +int fileSetLastAccessed
  {static} +int fileLastModified
  {static} +int fileSetLastModified
  {static} +int fileFlush
  {static} +int fileReadByte
  {static} +int fileWriteByte
  {static} +int fileRead
  {static} +int fileReadInto
  {static} +int fileWriteFrom
  {static} +int fileCreateLink
  {static} +int fileDeleteLink
  {static} +int fileRenameLink
  {static} +int fileLinkTarget
  {static} +int fileType
  {static} +int fileIdentical
  {static} +int fileStat
  {static} +int fileLock
  {static} +int fileCreatePipe
  {static} +int socketLookup
  {static} +int socketListInterfaces
  {static} +int socketReverseLookup
  {static} +int directoryCreate
  {static} +int directoryDelete
  {static} +int directoryExists
  {static} +int directoryCreateTemp
  {static} +int directoryListStart
  {static} +int directoryListNext
  {static} +int directoryListStop
  {static} +int directoryRename
  {static} +int sslProcessFilter
  {static} -dynamic _dispatch()
}

class "lib::io::io.dart::Link" {
  +Link absolute
  +dynamic create()
  +void createSync()
  +void updateSync()
  +dynamic update()
  +dynamic resolveSymbolicLinks()
  +String resolveSymbolicLinksSync()
  +dynamic rename()
  +Link renameSync()
  +dynamic delete()
  +void deleteSync()
  +dynamic target()
  +String targetSync()
}

class "lib::io::io.dart::_Link" {
  -String _path
  -Uint8List _rawPath
  +String path
  +Link absolute
  +String toString()
  +dynamic exists()
  +bool existsSync()
  +dynamic create()
  +void createSync()
  +void updateSync()
  +dynamic update()
  -dynamic _delete()
  -void _deleteSync()
  +dynamic rename()
  +Link renameSync()
  +dynamic target()
  +String targetSync()
  {static} +dynamic throwIfError()
}

abstract class "lib::io::io.dart::_Namespace" {
  {static} -_Namespace _namespace
  {static} -int _namespacePointer
  {static} -void _setupNamespace()
}

abstract class "lib::io::io.dart::_NetworkProfiling" {
  {static} -String _kHttpEnableTimelineLogging
  {static} -String _kGetHttpProfileRPC
  {static} -String _kGetHttpProfileRequestRPC
  {static} -String _kClearHttpProfileRPC
  {static} -String _kClearSocketProfileRPC
  {static} -String _kGetSocketProfileRPC
  {static} -String _kSocketProfilingEnabledRPC
  {static} -String _kGetVersionRPC
  {static} -void _registerServiceExtension()
  {static} -dynamic _serviceExtensionHandler()
  {static} +String getVersion()
}

abstract class "lib::io::io.dart::_SocketProfile" {
  {static} -String _kType
  {static} -bool _enableSocketProfiling
  {static} -Map<String, _SocketStatistic> _idToSocketStatistic
  {static} +bool enableSocketProfiling
  {static} +String toJson()
  {static} +void collectNewSocket()
  {static} +void collectStatistic()
  {static} +String start()
  {static} +String pause()
  {static} +String clear()
}

class "lib::io::io.dart::_SocketStatistic" {
  +String id
  +int? startTime
  +int? endTime
  +String? address
  +int? port
  +String? socketType
  +int readBytes
  +int writeBytes
  +int? lastWriteTime
  +int? lastReadTime
  +Map<String, dynamic> toMap()
  -void _setIfNotNull()
}

class "lib::io::io.dart::_SocketProfileType" {
  +int index
  {static} +List<_SocketProfileType> values
  {static} +_SocketProfileType startTime
  {static} +_SocketProfileType endTime
  {static} +_SocketProfileType address
  {static} +_SocketProfileType port
  {static} +_SocketProfileType socketType
  {static} +_SocketProfileType readBytes
  {static} +_SocketProfileType writeBytes
}

abstract class "lib::io::io.dart::IOOverrides" {
  {static} -IOOverrides? _global
  {static} +IOOverrides? current
  {static} +IOOverrides? global
  +Stdin stdin
  +Stdout stdout
  +Stdout stderr
  {static} +R runZoned()
  {static} +R runWithIOOverrides()
  +Directory createDirectory()
  +Directory getCurrentDirectory()
  +void setCurrentDirectory()
  +Directory getSystemTempDirectory()
  +File createFile()
  +dynamic stat()
  +FileStat statSync()
  +dynamic fseIdentical()
  +bool fseIdenticalSync()
  +dynamic fseGetType()
  +FileSystemEntityType fseGetTypeSync()
  +Stream<FileSystemEvent> fsWatch()
  +bool fsWatchIsSupported()
  +Link createLink()
  +dynamic socketConnect()
  +dynamic socketStartConnect()
  +dynamic serverSocketBind()
}

class "lib::io::io.dart::_IOOverridesScope" {
  -IOOverrides? _previous
  -Directory Function(String)? _createDirectory
  -Directory Function()? _getCurrentDirectory
  -void Function(String)? _setCurrentDirectory
  -Directory Function()? _getSystemTempDirectory
  -File Function(String)? _createFile
  -dynamic Function(String)? _stat
  -FileStat Function(String)? _statSync
  -dynamic Function(String, String)? _fseIdentical
  -bool Function(String, String)? _fseIdenticalSync
  -dynamic Function(String, bool)? _fseGetType
  -FileSystemEntityType Function(String, bool)? _fseGetTypeSync
  -Stream<FileSystemEvent> Function(String, int, bool)? _fsWatch
  -bool Function()? _fsWatchIsSupported
  -Link Function(String)? _createLink
  -dynamic Function(dynamic, int, {dynamic sourceAddress, int sourcePort, Duration? timeout})? _socketConnect
  -dynamic Function(dynamic, int, {dynamic sourceAddress, int sourcePort})? _socketStartConnect
  -dynamic Function(dynamic, int, {int backlog, bool shared, bool v6Only})? _serverSocketBind
  -Stdin Function()? _stdin
  -Stdout Function()? _stdout
  -Stdout Function()? _stderr
  +Stdin stdin
  +Stdout stdout
  +Stdout stderr
  +Directory createDirectory()
  +Directory getCurrentDirectory()
  +void setCurrentDirectory()
  +Directory getSystemTempDirectory()
  +File createFile()
  +dynamic stat()
  +FileStat statSync()
  +dynamic fseIdentical()
  +bool fseIdenticalSync()
  +dynamic fseGetType()
  +FileSystemEntityType fseGetTypeSync()
  +Stream<FileSystemEvent> fsWatch()
  +bool fsWatchIsSupported()
  +Link createLink()
  +dynamic socketConnect()
  +dynamic socketStartConnect()
  +dynamic serverSocketBind()
}

class "lib::io::io.dart::Platform" {
  {static} +int numberOfProcessors
  {static} +String pathSeparator
  {static} +String operatingSystem
  {static} +String operatingSystemVersion
  {static} +String localHostname
  {static} +String version
  {static} +bool isLinux
  {static} +bool isMacOS
  {static} +bool isWindows
  {static} +bool isAndroid
  {static} +bool isIOS
  {static} +bool isFuchsia
  {static} +String localeName
  {static} +Map<String, String> environment
  {static} +String executable
  {static} +String resolvedExecutable
  {static} +Uri script
  {static} +List<String> executableArguments
  {static} +String? packageConfig
  {static} +String lineTerminator
}

class "lib::io::io.dart::_Platform" {
  {static} +String executable
  {static} +String resolvedExecutable
  {static} +String? packageConfig
  {static} -String Function()? _localeClosure
  {static} -dynamic _environmentCache
  {static} -String? _cachedOSVersion
  {static} +int numberOfProcessors
  {static} +String pathSeparator
  {static} +String operatingSystem
  {static} +Uri script
  {static} +String operatingSystemVersion
  {static} +String localHostname
  {static} +List<String> executableArguments
  {static} +Map<String, String> environment
  {static} +String version
  {static} -int _numberOfProcessors()
  {static} -String _pathSeparator()
  {static} -String _operatingSystem()
  {static} -dynamic _operatingSystemVersion()
  {static} -dynamic _localHostname()
  {static} -dynamic _executable()
  {static} -dynamic _resolvedExecutable()
  {static} -dynamic _environment()
  {static} -List<String> _executableArguments()
  {static} -String? _packageConfig()
  {static} -String _version()
  {static} -String _localeName()
  {static} -Uri _script()
  {static} +String localeName()
}

class "lib::io::io.dart::_CaseInsensitiveStringMap" {
  -Map<String, V> _map
  +Iterable<String> keys
  +Iterable<V> values
  +int length
  +bool isEmpty
  +bool isNotEmpty
  +Iterable<MapEntry<String, V>> entries
  +bool containsKey()
  +bool containsValue()
  +V? []()
  +void []=()
  +V putIfAbsent()
  +void addAll()
  +V? remove()
  +void clear()
  +void forEach()
  +Map<K2, V2> map()
  +V update()
  +void updateAll()
  +void removeWhere()
  +String toString()
}

class "lib::io::io.dart::_ProcessUtils" {
  {static} -Never _exit()
  {static} -void _setExitCode()
  {static} -int _getExitCode()
  {static} -void _sleep()
  {static} -int _pid()
  {static} -Stream<ProcessSignal> _watchSignal()
}

abstract class "lib::io::io.dart::ProcessInfo" {
  {static} +int currentRss
  {static} +int maxRss
}

class "lib::io::io.dart::ProcessStartMode" {
  {static} +ProcessStartMode normal
  {static} +ProcessStartMode inheritStdio
  {static} +ProcessStartMode detached
  {static} +ProcessStartMode detachedWithStdio
  -int _mode
  {static} +List<ProcessStartMode> values
  +String toString()
}

class "lib::io::io.dart::Process" {
  +dynamic exitCode
  +Stream<List<int>> stdout
  +Stream<List<int>> stderr
  +IOSink stdin
  +int pid
  {static} +dynamic start()
  {static} +dynamic run()
  {static} +ProcessResult runSync()
  {static} +bool killPid()
  +bool kill()
}

class "lib::io::io.dart::ProcessResult" {
  +int exitCode
  +dynamic stdout
  +dynamic stderr
  +int pid
}

class "lib::io::io.dart::ProcessSignal" {
  {static} +ProcessSignal sighup
  {static} +ProcessSignal sigint
  {static} +ProcessSignal sigquit
  {static} +ProcessSignal sigill
  {static} +ProcessSignal sigtrap
  {static} +ProcessSignal sigabrt
  {static} +ProcessSignal sigbus
  {static} +ProcessSignal sigfpe
  {static} +ProcessSignal sigkill
  {static} +ProcessSignal sigusr1
  {static} +ProcessSignal sigsegv
  {static} +ProcessSignal sigusr2
  {static} +ProcessSignal sigpipe
  {static} +ProcessSignal sigalrm
  {static} +ProcessSignal sigterm
  {static} +ProcessSignal sigchld
  {static} +ProcessSignal sigcont
  {static} +ProcessSignal sigstop
  {static} +ProcessSignal sigtstp
  {static} +ProcessSignal sigttin
  {static} +ProcessSignal sigttou
  {static} +ProcessSignal sigurg
  {static} +ProcessSignal sigxcpu
  {static} +ProcessSignal sigxfsz
  {static} +ProcessSignal sigvtalrm
  {static} +ProcessSignal sigprof
  {static} +ProcessSignal sigwinch
  {static} +ProcessSignal sigpoll
  {static} +ProcessSignal sigsys
  +int signalNumber
  +String name
  +String toString()
  +Stream<ProcessSignal> watch()
}

class "lib::io::io.dart::SignalException" {
  +String message
  +dynamic osError
  +String toString()
}

class "lib::io::io.dart::ProcessException" {
  +String executable
  +List<String> arguments
  +String message
  +int errorCode
  +String toString()
}

class "lib::io::io.dart::SecureServerSocket" {
  -RawSecureServerSocket _socket
  +int port
  +InternetAddress address
  -dynamic _owner
  {static} +dynamic bind()
  +StreamSubscription<SecureSocket> listen()
  +dynamic close()
}

class "lib::io::io.dart::RawSecureServerSocket" {
  -RawServerSocket _socket
  -StreamController<RawSecureSocket> _controller
  -StreamSubscription<RawSocket>? _subscription
  -SecurityContext? _context
  +bool requestClientCertificate
  +bool requireClientCertificate
  +List<String>? supportedProtocols
  -bool _closed
  +int port
  +InternetAddress address
  -dynamic _owner
  {static} +dynamic bind()
  +StreamSubscription<RawSecureSocket> listen()
  +dynamic close()
  -void _onData()
  -void _onPauseStateChange()
  -void _onSubscriptionStateChange()
}

class "lib::io::io.dart::SecureSocket" {
  +X509Certificate? peerCertificate
  +String? selectedProtocol
  {static} +dynamic connect()
  {static} +dynamic startConnect()
  {static} +dynamic secure()
  {static} +dynamic secureServer()
  +void renegotiate()
}

class "lib::io::io.dart::RawSecureSocket" {
  +X509Certificate? peerCertificate
  +String? selectedProtocol
  {static} +dynamic connect()
  {static} +dynamic startConnect()
  {static} +dynamic secure()
  {static} +dynamic secureServer()
  +void renegotiate()
}

class "lib::io::io.dart::X509Certificate" {
  +Uint8List der
  +String pem
  +Uint8List sha1
  +String subject
  +String issuer
  +DateTime startValidity
  +DateTime endValidity
}

class "lib::io::io.dart::_FilterStatus" {
  +bool progress
  +bool readEmpty
  +bool writeEmpty
  +bool readPlaintextNoLongerEmpty
  +bool writePlaintextNoLongerFull
  +bool readEncryptedNoLongerFull
  +bool writeEncryptedNoLongerEmpty
}

class "lib::io::io.dart::_RawSocketBase" {
  -bool _closedReadEventSent
  -dynamic _owner
}

class "lib::io::io.dart::_RawSecureSocket" {
  {static} +int handshakeStatus
  {static} +int connectedStatus
  {static} +int closedStatus
  {static} +int readPlaintextId
  {static} +int writePlaintextId
  {static} +int readEncryptedId
  {static} +int writeEncryptedId
  {static} +int bufferCount
  -RawSocket _socket
  -Completer<_RawSecureSocket> _handshakeComplete
  -StreamController<RawSocketEvent> _controller
  -StreamSubscription<RawSocketEvent> _socketSubscription
  -List<int>? _bufferedData
  -int _bufferedDataIndex
  +InternetAddress address
  +bool isServer
  +SecurityContext context
  +bool requestClientCertificate
  +bool requireClientCertificate
  +bool Function(X509Certificate)? onBadCertificate
  +void Function(String)? keyLog
  +ReceivePort? keyLogPort
  -int _status
  -bool _writeEventsEnabled
  -bool _readEventsEnabled
  -int _pauseCount
  -bool _pendingReadEvent
  -bool _socketClosedRead
  -bool _socketClosedWrite
  -bool _closedRead
  -bool _closedWrite
  -Completer<RawSecureSocket> _closeCompleter
  -_FilterStatus _filterStatus
  -bool _connectPending
  -bool _filterPending
  -bool _filterActive
  -_SecureFilter? _secureFilter
  -String? _selectedProtocol
  +int port
  +InternetAddress remoteAddress
  +int remotePort
  -bool _closedReadEventSent
  -dynamic _owner
  +bool writeEventsEnabled
  +bool readEventsEnabled
  +X509Certificate? peerCertificate
  +String? selectedProtocol
  {static} -bool _isBufferEncrypted()
  {static} +dynamic connect()
  +StreamSubscription<RawSocketEvent> listen()
  {static} -void _verifyFields()
  +int available()
  +dynamic close()
  -void _completeCloseCompleter()
  -void _close()
  +void shutdown()
  +Uint8List? read()
  +SocketMessage? readMessage()
  {static} -int _fixOffset()
  +int write()
  +int sendMessage()
  -bool _onBadCertificateWrapper()
  +bool setOption()
  +Uint8List getRawOption()
  +void setRawOption()
  -void _eventDispatcher()
  -void _readHandler()
  -void _writeHandler()
  -void _doneHandler()
  -void _reportError()
  -void _closeHandler()
  -dynamic _secureHandshake()
  +void renegotiate()
  -void _secureHandshakeCompleteHandler()
  -void _onPauseStateChange()
  -void _onSubscriptionStateChange()
  -dynamic _scheduleFilter()
  -dynamic _tryFilter()
  -List<int>? _readSocketOrBufferedData()
  -void _readSocket()
  -void _writeSocket()
  -dynamic _scheduleReadEvent()
  -dynamic _sendReadEvent()
  -dynamic _sendWriteEvent()
  -dynamic _pushAllFilterStages()
}

class "lib::io::io.dart::_ExternalBuffer" {
  +List<int>? data
  +int start
  +int end
  +int size
  +bool isEmpty
  +int length
  +int linearLength
  +int free
  +int linearFree
  +void advanceStart()
  +void advanceEnd()
  +Uint8List? read()
  +int write()
  +int writeFromSource()
  +bool readToSocket()
}

abstract class "lib::io::io.dart::_SecureFilter" {
  +X509Certificate? peerCertificate
  +List<_ExternalBuffer>? buffers
  +void connect()
  +void destroy()
  +dynamic handshake()
  +String? selectedProtocol()
  +void rehandshake()
  +void init()
  +int processBuffer()
  +void registerBadCertificateCallback()
  +void registerHandshakeCompleteCallback()
  +void registerKeyLogPort()
  -int _pointer()
}

class "lib::io::io.dart::TlsException" {
  +String type
  +String message
  +OSError? osError
  +String toString()
}

class "lib::io::io.dart::HandshakeException" {
}

class "lib::io::io.dart::CertificateException" {
}

class "lib::io::io.dart::SecurityContext" {
  +bool allowLegacyUnsafeRenegotiation
  {static} +SecurityContext defaultContext
  {static} +bool alpnSupported
  +void usePrivateKey()
  +void usePrivateKeyBytes()
  +void setTrustedCertificates()
  +void setTrustedCertificatesBytes()
  +void useCertificateChain()
  +void useCertificateChainBytes()
  +void setClientAuthorities()
  +void setClientAuthoritiesBytes()
  +void setAlpnProtocols()
  {static} -Uint8List _protocolsToLengthEncoding()
  {static} -Uint8List _protocolsToLengthEncodingNonAsciiBailout()
}

abstract class "lib::io::io.dart::_ServiceObject" {
  -int __serviceId
  -int _serviceId
  -String _servicePath
  -String _serviceTypePath
  -String _serviceTypeName
  -String _serviceType()
}

class "lib::io::io.dart::InternetAddressType" {
  {static} +InternetAddressType IPv4
  {static} +InternetAddressType IPv6
  {static} +InternetAddressType unix
  {static} +InternetAddressType any
  -int _value
  +String name
  +String toString()
}

class "lib::io::io.dart::InternetAddress" {
  {static} +InternetAddress loopbackIPv4
  {static} +InternetAddress loopbackIPv6
  {static} +InternetAddress anyIPv4
  {static} +InternetAddress anyIPv6
  +InternetAddressType type
  +String address
  +String host
  +Uint8List rawAddress
  +bool isLoopback
  +bool isLinkLocal
  +bool isMulticast
  +dynamic reverse()
  {static} +dynamic lookup()
  {static} -InternetAddress _cloneWithNewHost()
  {static} +InternetAddress? tryParse()
}

class "lib::io::io.dart::NetworkInterface" {
  +String name
  +int index
  +List<InternetAddress> addresses
  {static} +bool listSupported
  {static} +dynamic list()
}

class "lib::io::io.dart::RawServerSocket" {
  +int port
  +InternetAddress address
  {static} +dynamic bind()
  +dynamic close()
}

class "lib::io::io.dart::ServerSocket" {
  +int port
  +InternetAddress address
  {static} +dynamic bind()
  {static} -dynamic _bind()
  +dynamic close()
}

class "lib::io::io.dart::SocketDirection" {
  {static} +SocketDirection receive
  {static} +SocketDirection send
  {static} +SocketDirection both
  -dynamic _value
}

class "lib::io::io.dart::SocketOption" {
  {static} +SocketOption tcpNoDelay
  {static} -SocketOption _ipMulticastLoop
  {static} -SocketOption _ipMulticastHops
  {static} -SocketOption _ipMulticastIf
  {static} -SocketOption _ipBroadcast
  -dynamic _value
}

class "lib::io::io.dart::RawSocketOption" {
  +int level
  +int option
  +Uint8List value
  {static} +int levelSocket
  {static} +int levelIPv4
  {static} +int IPv4MulticastInterface
  {static} +int levelIPv6
  {static} +int IPv6MulticastInterface
  {static} +int levelTcp
  {static} +int levelUdp
  {static} -int _getOptionValue()
}

class "lib::io::io.dart::RawSocketEvent" {
  {static} +RawSocketEvent read
  {static} +RawSocketEvent write
  {static} +RawSocketEvent readClosed
  {static} +RawSocketEvent closed
  -int _value
  +String toString()
}

class "lib::io::io.dart::ConnectionTask" {
  +dynamic socket
  -void Function() _onCancel
  +void cancel()
}

class "lib::io::io.dart::RawSocket" {
  +bool readEventsEnabled
  +bool writeEventsEnabled
  +int port
  +int remotePort
  +InternetAddress address
  +InternetAddress remoteAddress
  {static} +dynamic connect()
  {static} +dynamic startConnect()
  +int available()
  +Uint8List? read()
  +SocketMessage? readMessage()
  +int write()
  +int sendMessage()
  +dynamic close()
  +void shutdown()
  +bool setOption()
  +Uint8List getRawOption()
  +void setRawOption()
}

class "lib::io::io.dart::Socket" {
  +int port
  +int remotePort
  +InternetAddress address
  +InternetAddress remoteAddress
  +dynamic done
  {static} +dynamic connect()
  {static} +dynamic startConnect()
  {static} -dynamic _connect()
  {static} -dynamic _startConnect()
  -dynamic _detachRaw()
  +void destroy()
  +bool setOption()
  +Uint8List getRawOption()
  +void setRawOption()
  +dynamic close()
}

class "lib::io::io.dart::Datagram" {
  +Uint8List data
  +InternetAddress address
  +int port
}

class "lib::io::io.dart::ResourceHandle" {
  +RandomAccessFile toFile()
  +Socket toSocket()
  +RawSocket toRawSocket()
  +RawDatagramSocket toRawDatagramSocket()
  +ReadPipe toReadPipe()
  +WritePipe toWritePipe()
}

class "lib::io::io.dart::SocketControlMessage" {
  +int level
  +int type
  +Uint8List data
  +List<ResourceHandle> extractHandles()
}

class "lib::io::io.dart::SocketMessage" {
  +Uint8List data
  +List<SocketControlMessage> controlMessages
}

class "lib::io::io.dart::RawDatagramSocket" {
  +bool readEventsEnabled
  +bool writeEventsEnabled
  +bool multicastLoopback
  +int multicastHops
  +NetworkInterface? multicastInterface
  +bool broadcastEnabled
  +int port
  +InternetAddress address
  {static} +dynamic bind()
  +void close()
  +int send()
  +Datagram? receive()
  +void joinMulticast()
  +void leaveMulticast()
  +Uint8List getRawOption()
  +void setRawOption()
}

class "lib::io::io.dart::SocketException" {
  +String message
  +OSError? osError
  +InternetAddress? address
  +int? port
  +String toString()
}

class "lib::io::io.dart::_RawSocketOptions" {
  +int index
  {static} +List<_RawSocketOptions> values
  {static} +_RawSocketOptions SOL_SOCKET
  {static} +_RawSocketOptions IPPROTO_IP
  {static} +_RawSocketOptions IP_MULTICAST_IF
  {static} +_RawSocketOptions IPPROTO_IPV6
  {static} +_RawSocketOptions IPV6_MULTICAST_IF
  {static} +_RawSocketOptions IPPROTO_TCP
  {static} +_RawSocketOptions IPPROTO_UDP
}

class "lib::io::io.dart::_StdStream" {
  -Stream<List<int>> _stream
  +StreamSubscription<List<int>> listen()
}

class "lib::io::io.dart::Stdin" {
  -int _fd
  +bool echoMode
  +bool echoNewlineMode
  +bool lineMode
  +bool supportsAnsiEscapes
  +bool hasTerminal
  +String? readLineSync()
  +int readByteSync()
}

class "lib::io::io.dart::Stdout" {
  -int _fd
  -IOSink? _nonBlocking
  +bool hasTerminal
  +int terminalColumns
  +int terminalLines
  +bool supportsAnsiEscapes
  +IOSink nonBlocking
  -bool _hasTerminal()
  -int _terminalColumns()
  -int _terminalLines()
  {static} -bool _supportsAnsiEscapes()
}

class "lib::io::io.dart::StdoutException" {
  +String message
  +OSError? osError
  +String toString()
}

class "lib::io::io.dart::StdinException" {
  +String message
  +OSError? osError
  +String toString()
}

class "lib::io::io.dart::_StdConsumer" {
  -RandomAccessFile _file
  +dynamic addStream()
  +dynamic close()
}

class "lib::io::io.dart::_StdSink" {
  -IOSink _sink
  +Encoding encoding
  +dynamic done
  +void write()
  +void writeln()
  +void writeAll()
  +void add()
  +void addError()
  +void writeCharCode()
  +dynamic addStream()
  +dynamic flush()
  +dynamic close()
}

class "lib::io::io.dart::StdioType" {
  {static} +StdioType terminal
  {static} +StdioType pipe
  {static} +StdioType file
  {static} +StdioType other
  +String name
  +String toString()
}

class "lib::io::io.dart::_StdIOUtils" {
  {static} -dynamic _getStdioOutputStream()
  {static} -Stdin _getStdioInputStream()
  {static} -int? _socketType()
  {static} -dynamic _getStdioHandleType()
}

class "lib::io::io.dart::SystemEncoding" {
  +String name
  +Converter<String, List<int>> encoder
  +Converter<List<int>, String> decoder
  +List<int> encode()
  +String decode()
}

class "lib::io::io.dart::_WindowsCodePageEncoder" {
  +List<int> convert()
  +StringConversionSink startChunkedConversion()
  {static} -List<int> _encodeString()
}

class "lib::io::io.dart::_WindowsCodePageEncoderSink" {
  -Sink<List<int>> _sink
  +void close()
  +void add()
  +void addSlice()
}

class "lib::io::io.dart::_WindowsCodePageDecoder" {
  +String convert()
  +ByteConversionSink startChunkedConversion()
  {static} -String _decodeBytes()
}

class "lib::io::io.dart::_WindowsCodePageDecoderSink" {
  -Sink<String> _sink
  +void close()
  +void add()
}

class "lib::io::io.dart::RawSynchronousSocket" {
  +int port
  +int remotePort
  +InternetAddress address
  +InternetAddress remoteAddress
  {static} +RawSynchronousSocket connectSync()
  +int available()
  +void closeSync()
  +int readIntoSync()
  +List<int>? readSync()
  +void shutdown()
  +void writeFromSync()
}

abstract class "lib::_interceptors::interceptors.dart::Interceptor" {
  +int hashCode
  +Type runtimeType
  +bool ==()
  +String toString()
  +dynamic noSuchMethod()
}

class "lib::_interceptors::interceptors.dart::JSBool" {
  +int hashCode
  +Type runtimeType
  +String toString()
  +bool &()
  +bool |()
  +bool ^()
}

class "lib::_interceptors::interceptors.dart::JSNull" {
  +int hashCode
  +Type runtimeType
  +bool ==()
  +String toString()
  +dynamic noSuchMethod()
}

abstract class "lib::_interceptors::interceptors.dart::JSIndexable" {
  +int length
  +E []()
}

abstract class "lib::_interceptors::interceptors.dart::JSMutableIndexable" {
  +void []=()
}

abstract class "lib::_interceptors::interceptors.dart::JSObject" {
}

class "lib::_interceptors::interceptors.dart::JavaScriptObject" {
}

class "lib::_interceptors::interceptors.dart::LegacyJavaScriptObject" {
  +int hashCode
  +Type runtimeType
  +String toString()
}

class "lib::_interceptors::interceptors.dart::PlainJavaScriptObject" {
}

class "lib::_interceptors::interceptors.dart::UnknownJavaScriptObject" {
}

class "lib::_interceptors::interceptors.dart::JavaScriptFunction" {
  +String toString()
}

class "lib::_interceptors::interceptors.dart::JavaScriptBigInt" {
  +int hashCode
  +String toString()
}

class "lib::_interceptors::interceptors.dart::JavaScriptSymbol" {
  +int hashCode
  +String toString()
}

class "lib::internal::internal.dart::CodeUnits" {
  -String _string
  +int length
  +int []()
  {static} +String stringOf()
}

class "lib::internal::internal.dart::ExternalName" {
  +String name
}

class "lib::internal::internal.dart::SystemHash" {
  {static} +int combine()
  {static} +int finish()
  {static} +int hash2()
  {static} +int hash3()
  {static} +int hash4()
  {static} +int hash5()
  {static} +int hash6()
  {static} +int hash7()
  {static} +int hash8()
  {static} +int hash9()
  {static} +int hash10()
  {static} +int hash11()
  {static} +int hash12()
  {static} +int hash13()
  {static} +int hash14()
  {static} +int hash15()
  {static} +int hash16()
  {static} +int hash17()
  {static} +int hash18()
  {static} +int hash19()
  {static} +int hash20()
  {static} +int smear()
}

class "lib::internal::internal.dart::SentinelValue" {
  +int id
}

class "lib::internal::internal.dart::Since" {
  +String version
}

class "lib::internal::internal.dart::NotNullableError" {
  -String _name
  +String toString()
}

abstract class "lib::internal::internal.dart::HttpStatus" {
  {static} +int continue_
  {static} +int switchingProtocols
  {static} +int processing
  {static} +int ok
  {static} +int created
  {static} +int accepted
  {static} +int nonAuthoritativeInformation
  {static} +int noContent
  {static} +int resetContent
  {static} +int partialContent
  {static} +int multiStatus
  {static} +int alreadyReported
  {static} +int imUsed
  {static} +int multipleChoices
  {static} +int movedPermanently
  {static} +int found
  {static} +int movedTemporarily
  {static} +int seeOther
  {static} +int notModified
  {static} +int useProxy
  {static} +int temporaryRedirect
  {static} +int permanentRedirect
  {static} +int badRequest
  {static} +int unauthorized
  {static} +int paymentRequired
  {static} +int forbidden
  {static} +int notFound
  {static} +int methodNotAllowed
  {static} +int notAcceptable
  {static} +int proxyAuthenticationRequired
  {static} +int requestTimeout
  {static} +int conflict
  {static} +int gone
  {static} +int lengthRequired
  {static} +int preconditionFailed
  {static} +int requestEntityTooLarge
  {static} +int requestUriTooLong
  {static} +int unsupportedMediaType
  {static} +int requestedRangeNotSatisfiable
  {static} +int expectationFailed
  {static} +int misdirectedRequest
  {static} +int unprocessableEntity
  {static} +int locked
  {static} +int failedDependency
  {static} +int upgradeRequired
  {static} +int preconditionRequired
  {static} +int tooManyRequests
  {static} +int requestHeaderFieldsTooLarge
  {static} +int connectionClosedWithoutResponse
  {static} +int unavailableForLegalReasons
  {static} +int clientClosedRequest
  {static} +int internalServerError
  {static} +int notImplemented
  {static} +int badGateway
  {static} +int serviceUnavailable
  {static} +int gatewayTimeout
  {static} +int httpVersionNotSupported
  {static} +int variantAlsoNegotiates
  {static} +int insufficientStorage
  {static} +int loopDetected
  {static} +int notExtended
  {static} +int networkAuthenticationRequired
  {static} +int networkConnectTimeoutError
  {static} +int CONTINUE
  {static} +int SWITCHING_PROTOCOLS
  {static} +int OK
  {static} +int CREATED
  {static} +int ACCEPTED
  {static} +int NON_AUTHORITATIVE_INFORMATION
  {static} +int NO_CONTENT
  {static} +int RESET_CONTENT
  {static} +int PARTIAL_CONTENT
  {static} +int MULTIPLE_CHOICES
  {static} +int MOVED_PERMANENTLY
  {static} +int FOUND
  {static} +int MOVED_TEMPORARILY
  {static} +int SEE_OTHER
  {static} +int NOT_MODIFIED
  {static} +int USE_PROXY
  {static} +int TEMPORARY_REDIRECT
  {static} +int BAD_REQUEST
  {static} +int UNAUTHORIZED
  {static} +int PAYMENT_REQUIRED
  {static} +int FORBIDDEN
  {static} +int NOT_FOUND
  {static} +int METHOD_NOT_ALLOWED
  {static} +int NOT_ACCEPTABLE
  {static} +int PROXY_AUTHENTICATION_REQUIRED
  {static} +int REQUEST_TIMEOUT
  {static} +int CONFLICT
  {static} +int GONE
  {static} +int LENGTH_REQUIRED
  {static} +int PRECONDITION_FAILED
  {static} +int REQUEST_ENTITY_TOO_LARGE
  {static} +int REQUEST_URI_TOO_LONG
  {static} +int UNSUPPORTED_MEDIA_TYPE
  {static} +int REQUESTED_RANGE_NOT_SATISFIABLE
  {static} +int EXPECTATION_FAILED
  {static} +int UPGRADE_REQUIRED
  {static} +int INTERNAL_SERVER_ERROR
  {static} +int NOT_IMPLEMENTED
  {static} +int BAD_GATEWAY
  {static} +int SERVICE_UNAVAILABLE
  {static} +int GATEWAY_TIMEOUT
  {static} +int HTTP_VERSION_NOT_SUPPORTED
  {static} +int NETWORK_CONNECT_TIMEOUT_ERROR
}

class "lib::internal::internal.dart::DoubleLinkedQueueEntry" {
  -DoubleLinkedQueueEntry<E>? _previousLink
  -DoubleLinkedQueueEntry<E>? _nextLink
  +E element
  -void _link()
  +void append()
  +void prepend()
  +E remove()
  +DoubleLinkedQueueEntry<E>? previousEntry()
  +DoubleLinkedQueueEntry<E>? nextEntry()
}

class "lib::internal::internal.dart::CastStream" {
  -Stream<S> _source
  +bool isBroadcast
  +StreamSubscription<T> listen()
  +Stream<R> cast()
}

class "lib::internal::internal.dart::CastStreamSubscription" {
  -StreamSubscription<S> _source
  -Zone _zone
  -void Function(T)? _handleData
  -Function? _handleError
  +bool isPaused
  +dynamic cancel()
  +void onData()
  +void onError()
  +void onDone()
  -void _onData()
  +void pause()
  +void resume()
  +dynamic asFuture()
}

class "lib::internal::internal.dart::CastStreamTransformer" {
  -StreamTransformer<SS, ST> _source
  +StreamTransformer<RS, RT> cast()
  +Stream<TT> bind()
}

class "lib::internal::internal.dart::CastConverter" {
  -Converter<SS, ST> _source
  +TT convert()
  +Stream<TT> bind()
  +Converter<RS, RT> cast()
}

class "lib::internal::internal.dart::BytesBuilder" {
  +int length
  +bool isEmpty
  +bool isNotEmpty
  +void add()
  +void addByte()
  +Uint8List takeBytes()
  +Uint8List toBytes()
  +void clear()
}

class "lib::internal::internal.dart::_CopyingBytesBuilder" {
  {static} -int _initSize
  {static} -Uint8List _emptyList
  -int _length
  -Uint8List _buffer
  +int length
  +bool isEmpty
  +bool isNotEmpty
  +void add()
  +void addByte()
  -void _grow()
  +Uint8List takeBytes()
  +Uint8List toBytes()
  +void clear()
  -void _clear()
  {static} -int _pow2roundup()
}

class "lib::internal::internal.dart::_BytesBuilder" {
  -int _length
  -List<Uint8List> _chunks
  +int length
  +bool isEmpty
  +bool isNotEmpty
  +void add()
  +void addByte()
  +Uint8List takeBytes()
  +Uint8List toBytes()
  +void clear()
  -void _clear()
}

abstract class "lib::internal::internal.dart::_CastIterableBase" {
  -Iterable<S> _source
  +Iterator<T> iterator
  +int length
  +bool isEmpty
  +bool isNotEmpty
  +T first
  +T last
  +T single
  +Iterable<T> skip()
  +Iterable<T> take()
  +T elementAt()
  +bool contains()
  +T lastWhere()
  +String toString()
}

class "lib::internal::internal.dart::CastIterator" {
  -Iterator<S> _source
  +T current
  +bool moveNext()
}

class "lib::internal::internal.dart::CastIterable" {
  -Iterable<S> _source
  +Iterable<R> cast()
}

class "lib::internal::internal.dart::_EfficientLengthCastIterable" {
}

abstract class "lib::internal::internal.dart::_CastListBase" {
  -List<S> _source
  +int length
  +T []()
  +void []=()
  +void add()
  +void addAll()
  +void sort()
  +void shuffle()
  +void insert()
  +void insertAll()
  +void setAll()
  +bool remove()
  +T removeAt()
  +T removeLast()
  +void removeWhere()
  +void retainWhere()
  +Iterable<T> getRange()
  +void setRange()
  +void removeRange()
  +void fillRange()
  +void replaceRange()
}

class "lib::internal::internal.dart::CastList" {
  -List<S> _source
  +List<R> cast()
}

class "lib::internal::internal.dart::CastSet" {
  -Set<S> _source
  -Set<R> Function<R>()? _emptySet
  +Set<R> cast()
  +bool add()
  +void addAll()
  +bool remove()
  +void removeAll()
  +void retainAll()
  +void removeWhere()
  +void retainWhere()
  +bool containsAll()
  +Set<T> intersection()
  +Set<T> difference()
  -Set<T> _conditionalAdd()
  +Set<T> union()
  +void clear()
  -Set<T> _clone()
  +Set<T> toSet()
  +T lookup()
}

class "lib::internal::internal.dart::CastMap" {
  -Map<SK, SV> _source
  +Iterable<K> keys
  +Iterable<V> values
  +int length
  +bool isEmpty
  +bool isNotEmpty
  +Iterable<MapEntry<K, V>> entries
  +Map<RK, RV> cast()
  +bool containsValue()
  +bool containsKey()
  +V? []()
  +void []=()
  +V putIfAbsent()
  +void addAll()
  +V? remove()
  +void clear()
  +void forEach()
  +V update()
  +void updateAll()
  +void addEntries()
  +void removeWhere()
}

class "lib::internal::internal.dart::CastQueue" {
  -Queue<S> _source
  +Queue<R> cast()
  +T removeFirst()
  +T removeLast()
  +void add()
  +void addFirst()
  +void addLast()
  +bool remove()
  +void addAll()
  +void removeWhere()
  +void retainWhere()
  +void clear()
}

class "lib::internal::internal.dart::LateError" {
  -String? _message
  +String toString()
}

class "lib::internal::internal.dart::ReachabilityError" {
  -String? _message
  +String toString()
}

abstract class "lib::internal::internal.dart::EfficientLengthIterable" {
  +int length
}

class "lib::internal::internal.dart::HideEfficientLengthIterable" {
}

abstract class "lib::internal::internal.dart::ListIterable" {
  +int length
  +Iterator<E> iterator
  +bool isEmpty
  +E first
  +E last
  +E single
  +E elementAt()
  +void forEach()
  +bool contains()
  +bool every()
  +bool any()
  +E firstWhere()
  +E lastWhere()
  +E singleWhere()
  +String join()
  +Iterable<E> where()
  +Iterable<T> map()
  +E reduce()
  +T fold()
  +Iterable<E> skip()
  +Iterable<E> skipWhile()
  +Iterable<E> take()
  +Iterable<E> takeWhile()
  +List<E> toList()
  +Set<E> toSet()
}

class "lib::internal::internal.dart::SubListIterable" {
  -Iterable<E> _iterable
  -int _start
  -int? _endOrLength
  -int _endIndex
  -int _startIndex
  +int length
  +E elementAt()
  +Iterable<E> skip()
  +Iterable<E> take()
  +List<E> toList()
}

class "lib::internal::internal.dart::ListIterator" {
  -Iterable<E> _iterable
  -int _length
  -int _index
  -E? _current
  +E current
  +bool moveNext()
}

class "lib::internal::internal.dart::MappedIterable" {
  -Iterable<S> _iterable
  -T Function(S) _f
  +Iterator<T> iterator
  +int length
  +bool isEmpty
  +T first
  +T last
  +T single
  +T elementAt()
}

class "lib::internal::internal.dart::EfficientLengthMappedIterable" {
}

class "lib::internal::internal.dart::MappedIterator" {
  -T? _current
  -Iterator<S> _iterator
  -T Function(S) _f
  +T current
  +bool moveNext()
}

class "lib::internal::internal.dart::MappedListIterable" {
  -Iterable<S> _source
  -T Function(S) _f
  +int length
  +T elementAt()
}

class "lib::internal::internal.dart::WhereIterable" {
  -Iterable<E> _iterable
  -bool Function(E) _f
  +Iterator<E> iterator
  +Iterable<T> map()
}

class "lib::internal::internal.dart::WhereIterator" {
  -Iterator<E> _iterator
  -bool Function(E) _f
  +E current
  +bool moveNext()
}

class "lib::internal::internal.dart::ExpandIterable" {
  -Iterable<S> _iterable
  -Iterable<T> Function(S) _f
  +Iterator<T> iterator
}

class "lib::internal::internal.dart::ExpandIterator" {
  -Iterator<S> _iterator
  -Iterable<T> Function(S) _f
  -Iterator<T>? _currentExpansion
  -T? _current
  +T current
  +bool moveNext()
}

class "lib::internal::internal.dart::TakeIterable" {
  -Iterable<E> _iterable
  -int _takeCount
  +Iterator<E> iterator
}

class "lib::internal::internal.dart::EfficientLengthTakeIterable" {
  +int length
}

class "lib::internal::internal.dart::TakeIterator" {
  -Iterator<E> _iterator
  -int _remaining
  +E current
  +bool moveNext()
}

class "lib::internal::internal.dart::TakeWhileIterable" {
  -Iterable<E> _iterable
  -bool Function(E) _f
  +Iterator<E> iterator
}

class "lib::internal::internal.dart::TakeWhileIterator" {
  -Iterator<E> _iterator
  -bool Function(E) _f
  -bool _isFinished
  +E current
  +bool moveNext()
}

class "lib::internal::internal.dart::SkipIterable" {
  -Iterable<E> _iterable
  -int _skipCount
  +Iterator<E> iterator
  +Iterable<E> skip()
}

class "lib::internal::internal.dart::EfficientLengthSkipIterable" {
  +int length
  +Iterable<E> skip()
}

class "lib::internal::internal.dart::SkipIterator" {
  -Iterator<E> _iterator
  -int _skipCount
  +E current
  +bool moveNext()
}

class "lib::internal::internal.dart::SkipWhileIterable" {
  -Iterable<E> _iterable
  -bool Function(E) _f
  +Iterator<E> iterator
}

class "lib::internal::internal.dart::SkipWhileIterator" {
  -Iterator<E> _iterator
  -bool Function(E) _f
  -bool _hasSkipped
  +E current
  +bool moveNext()
}

class "lib::internal::internal.dart::EmptyIterable" {
  +Iterator<E> iterator
  +bool isEmpty
  +int length
  +E first
  +E last
  +E single
  +void forEach()
  +E elementAt()
  +bool contains()
  +bool every()
  +bool any()
  +E firstWhere()
  +E lastWhere()
  +E singleWhere()
  +String join()
  +Iterable<E> where()
  +Iterable<T> map()
  +E reduce()
  +T fold()
  +Iterable<E> skip()
  +Iterable<E> skipWhile()
  +Iterable<E> take()
  +Iterable<E> takeWhile()
  +List<E> toList()
  +Set<E> toSet()
}

class "lib::internal::internal.dart::EmptyIterator" {
  +E current
  +bool moveNext()
}

class "lib::internal::internal.dart::FollowedByIterable" {
  -Iterable<E> _first
  -Iterable<E> _second
  +Iterator<E> iterator
  +int length
  +bool isEmpty
  +bool isNotEmpty
  +E first
  +E last
  +bool contains()
}

class "lib::internal::internal.dart::EfficientLengthFollowedByIterable" {
  +E first
  +E last
  +E elementAt()
}

class "lib::internal::internal.dart::FollowedByIterator" {
  -Iterator<E> _currentIterator
  -Iterable<E>? _nextIterable
  +E current
  +bool moveNext()
}

class "lib::internal::internal.dart::WhereTypeIterable" {
  -Iterable<Object?> _source
  +Iterator<T> iterator
}

class "lib::internal::internal.dart::WhereTypeIterator" {
  -Iterator<Object?> _source
  +T current
  +bool moveNext()
}

class "lib::internal::internal.dart::NonNullsIterable" {
  -Iterable<T?> _source
  -T? _firstNonNull
  +bool isEmpty
  +bool isNotEmpty
  +T first
  +Iterator<T> iterator
}

class "lib::internal::internal.dart::NonNullsIterator" {
  -Iterator<T?> _source
  -T? _current
  +T current
  +bool moveNext()
}

class "lib::internal::internal.dart::IndexedIterable" {
}

class "lib::internal::internal.dart::EfficientLengthIndexedIterable" {
}

class "lib::internal::internal.dart::IndexedIterator" {
}

abstract class "lib::internal::internal.dart::IterableElementError" {
  {static} +StateError noElement()
  {static} +StateError tooMany()
  {static} +StateError tooFew()
}

abstract class "lib::internal::internal.dart::FixedLengthListBase" {
}

abstract class "lib::internal::internal.dart::UnmodifiableListBase" {
}

class "lib::internal::internal.dart::_ListIndicesIterable" {
  -List<dynamic> _backedList
  +int length
  +int elementAt()
}

class "lib::internal::internal.dart::ListMapView" {
  -List<E> _values
  +int length
  +Iterable<E> values
  +Iterable<int> keys
  +bool isEmpty
  +bool isNotEmpty
  +E? []()
  +bool containsValue()
  +bool containsKey()
  +void forEach()
}

class "lib::internal::internal.dart::ReversedListIterable" {
  -Iterable<E> _source
  +int length
  +E elementAt()
}

abstract class "lib::internal::internal.dart::UnmodifiableListError" {
  {static} +UnsupportedError add()
  {static} +UnsupportedError change()
  {static} +UnsupportedError length()
  {static} +UnsupportedError remove()
}

abstract class "lib::internal::internal.dart::NonGrowableListError" {
  {static} +UnsupportedError add()
  {static} +UnsupportedError length()
  {static} +UnsupportedError remove()
}

abstract class "lib::internal::internal.dart::FixedLengthListMixin" {
  +int length
  +void add()
  +void insert()
  +void insertAll()
  +void addAll()
  +bool remove()
  +void removeWhere()
  +void retainWhere()
  +void clear()
  +E removeAt()
  +E removeLast()
  +void removeRange()
  +void replaceRange()
}

abstract class "lib::internal::internal.dart::UnmodifiableListMixin" {
  +int length
  +E first
  +E last
  +void []=()
  +void setAll()
  +void add()
  +void insert()
  +void insertAll()
  +void addAll()
  +bool remove()
  +void removeWhere()
  +void retainWhere()
  +void sort()
  +void shuffle()
  +void clear()
  +E removeAt()
  +E removeLast()
  +void setRange()
  +void removeRange()
  +void replaceRange()
  +void fillRange()
}

class "lib::internal::internal.dart::LinkedList" {
  -T? _first
  -T? _last
  +int length
  +T first
  +T last
  +bool isEmpty
  +Iterator<T> iterator
  +void add()
  +void addFirst()
  +void remove()
}

class "lib::internal::internal.dart::LinkedListEntry" {
  -T? _next
  -T? _previous
  -LinkedList<T>? _list
  +void unlink()
}

class "lib::internal::internal.dart::_LinkedListIterator" {
  -T? _current
  -LinkedList<T>? _list
  +T current
  +bool moveNext()
}

class "lib::internal::internal.dart::Sort" {
  {static} -int _INSERTION_SORT_THRESHOLD
  {static} +void sort()
  {static} +void sortRange()
  {static} -void _doSort()
  {static} -void _insertionSort()
  {static} -void _dualPivotQuicksort()
}

class "lib::internal::internal.dart::Symbol" {
  -String _name
  +int hashCode
  +bool ==()
  +String toString()
  {static} +String getName()
  {static} +String computeUnmangledName()
}

class "lib::html::html_dart2js.dart::HtmlElement" {
  +String? nonce
}

class "lib::html::html_dart2js.dart::AbortPaymentEvent" {
  {static} -AbortPaymentEvent _create_1()
  +void respondWith()
}

class "lib::html::html_dart2js.dart::AbsoluteOrientationSensor" {
  {static} -AbsoluteOrientationSensor _create_1()
  {static} -AbsoluteOrientationSensor _create_2()
}

abstract class "lib::html::html_dart2js.dart::AbstractWorker" {
  {static} +EventStreamProvider<Event> errorEvent
  +Stream<Event> onError
}

class "lib::html::html_dart2js.dart::Accelerometer" {
  +num? x
  +num? y
  +num? z
  {static} -Accelerometer _create_1()
  {static} -Accelerometer _create_2()
}

class "lib::html::html_dart2js.dart::AccessibleNode" {
  {static} +EventStreamProvider<Event> accessibleClickEvent
  {static} +EventStreamProvider<Event> accessibleContextMenuEvent
  {static} +EventStreamProvider<Event> accessibleDecrementEvent
  {static} +EventStreamProvider<Event> accessibleFocusEvent
  {static} +EventStreamProvider<Event> accessibleIncrementEvent
  {static} +EventStreamProvider<Event> accessibleScrollIntoViewEvent
  +AccessibleNode? activeDescendant
  +bool? atomic
  +String? autocomplete
  +bool? busy
  +String? checked
  +int? colCount
  +int? colIndex
  +int? colSpan
  +AccessibleNodeList? controls
  +String? current
  +AccessibleNodeList? describedBy
  +AccessibleNode? details
  +bool? disabled
  +AccessibleNode? errorMessage
  +bool? expanded
  +AccessibleNodeList? flowTo
  +String? hasPopUp
  +bool? hidden
  +String? invalid
  +String? keyShortcuts
  +String? label
  +AccessibleNodeList? labeledBy
  +int? level
  +String? live
  +bool? modal
  +bool? multiline
  +bool? multiselectable
  +String? orientation
  +AccessibleNodeList? owns
  +String? placeholder
  +int? posInSet
  +String? pressed
  +bool? readOnly
  +String? relevant
  +bool? required
  +String? role
  +String? roleDescription
  +int? rowCount
  +int? rowIndex
  +int? rowSpan
  +bool? selected
  +int? setSize
  +String? sort
  +num? valueMax
  +num? valueMin
  +num? valueNow
  +String? valueText
  +Stream<Event> onAccessibleClick
  +Stream<Event> onAccessibleContextMenu
  +Stream<Event> onAccessibleDecrement
  +Stream<Event> onAccessibleFocus
  +Stream<Event> onAccessibleIncrement
  +Stream<Event> onAccessibleScrollIntoView
  {static} -AccessibleNode _create_1()
  +void appendChild()
}

class "lib::html::html_dart2js.dart::AccessibleNodeList" {
  +int? length
  {static} -AccessibleNodeList _create_1()
  {static} -AccessibleNodeList _create_2()
  -void __setter__()
  +void add()
  +AccessibleNode? item()
  +void remove()
}

class "lib::html::html_dart2js.dart::AmbientLightSensor" {
  +num? illuminance
  {static} -AmbientLightSensor _create_1()
  {static} -AmbientLightSensor _create_2()
}

class "lib::html::html_dart2js.dart::AnchorElement" {
  +String? download
  +String hreflang
  +String? referrerPolicy
  +String rel
  +String target
  +String type
  +String? hash
  +String? host
  +String? hostname
  +String? href
  +String? origin
  +String? password
  +String? pathname
  +String? port
  +String? protocol
  +String? search
  +String? username
  +String toString()
}

class "lib::html::html_dart2js.dart::Animation" {
  {static} +EventStreamProvider<Event> cancelEvent
  {static} +EventStreamProvider<Event> finishEvent
  {static} +bool supported
  +num? currentTime
  +AnimationEffectReadOnly? effect
  +dynamic finished
  +String? id
  +String? playState
  +num? playbackRate
  +dynamic ready
  +num? startTime
  +AnimationTimeline? timeline
  +Stream<Event> onCancel
  +Stream<Event> onFinish
  {static} -Animation _create_1()
  {static} -Animation _create_2()
  {static} -Animation _create_3()
  +void cancel()
  +void finish()
  +void pause()
  +void play()
  +void reverse()
}

class "lib::html::html_dart2js.dart::AnimationEffectReadOnly" {
  +AnimationEffectTimingReadOnly? timing
  +Map<dynamic, dynamic> getComputedTiming()
  -dynamic _getComputedTiming_1()
}

class "lib::html::html_dart2js.dart::AnimationEffectTiming" {
  +num? delay
  +String? direction
  +Object? duration
  +String? easing
  +num? endDelay
  +String? fill
  +num? iterationStart
  +num? iterations
}

class "lib::html::html_dart2js.dart::AnimationEffectTimingReadOnly" {
  +num? delay
  +String? direction
  +Object? duration
  +String? easing
  +num? endDelay
  +String? fill
  +num? iterationStart
  +num? iterations
}

class "lib::html::html_dart2js.dart::AnimationEvent" {
  +String? animationName
  +num? elapsedTime
  {static} -AnimationEvent _create_1()
  {static} -AnimationEvent _create_2()
}

class "lib::html::html_dart2js.dart::AnimationPlaybackEvent" {
  +num? currentTime
  +num? timelineTime
  {static} -AnimationPlaybackEvent _create_1()
  {static} -AnimationPlaybackEvent _create_2()
}

class "lib::html::html_dart2js.dart::AnimationTimeline" {
  +num? currentTime
}

class "lib::html::html_dart2js.dart::AnimationWorkletGlobalScope" {
  +void registerAnimator()
}

class "lib::html::html_dart2js.dart::ApplicationCache" {
  {static} +EventStreamProvider<Event> cachedEvent
  {static} +EventStreamProvider<Event> checkingEvent
  {static} +EventStreamProvider<Event> downloadingEvent
  {static} +EventStreamProvider<Event> errorEvent
  {static} +EventStreamProvider<Event> noUpdateEvent
  {static} +EventStreamProvider<Event> obsoleteEvent
  {static} +EventStreamProvider<ProgressEvent> progressEvent
  {static} +EventStreamProvider<Event> updateReadyEvent
  {static} +int CHECKING
  {static} +int DOWNLOADING
  {static} +int IDLE
  {static} +int OBSOLETE
  {static} +int UNCACHED
  {static} +int UPDATEREADY
  {static} +bool supported
  +int? status
  +Stream<Event> onCached
  +Stream<Event> onChecking
  +Stream<Event> onDownloading
  +Stream<Event> onError
  +Stream<Event> onNoUpdate
  +Stream<Event> onObsolete
  +Stream<ProgressEvent> onProgress
  +Stream<Event> onUpdateReady
  +void abort()
  +void swapCache()
  +void update()
}

class "lib::html::html_dart2js.dart::ApplicationCacheErrorEvent" {
  +String? message
  +String? reason
  +int? status
  +String? url
  {static} -ApplicationCacheErrorEvent _create_1()
  {static} -ApplicationCacheErrorEvent _create_2()
}

class "lib::html::html_dart2js.dart::AreaElement" {
  +String alt
  +String coords
  +String? download
  +String? referrerPolicy
  +String rel
  +String shape
  +String target
  +String? hash
  +String? host
  +String? hostname
  +String? href
  +String? origin
  +String? password
  +String? pathname
  +String? port
  +String? protocol
  +String? search
  +String? username
  +String toString()
}

class "lib::html::html_dart2js.dart::AudioElement" {
  {static} -AudioElement _create_1()
  {static} -AudioElement _create_2()
}

class "lib::html::html_dart2js.dart::AuthenticatorAssertionResponse" {
  +ByteBuffer? authenticatorData
  +ByteBuffer? signature
}

class "lib::html::html_dart2js.dart::AuthenticatorAttestationResponse" {
  +ByteBuffer? attestationObject
}

class "lib::html::html_dart2js.dart::AuthenticatorResponse" {
  +ByteBuffer? clientDataJson
}

class "lib::html::html_dart2js.dart::BRElement" {
}

class "lib::html::html_dart2js.dart::BackgroundFetchClickEvent" {
  +String? state
  {static} -BackgroundFetchClickEvent _create_1()
}

class "lib::html::html_dart2js.dart::BackgroundFetchEvent" {
  +String? id
  {static} -BackgroundFetchEvent _create_1()
}

class "lib::html::html_dart2js.dart::BackgroundFetchFailEvent" {
  +List<BackgroundFetchSettledFetch>? fetches
  {static} -BackgroundFetchFailEvent _create_1()
}

class "lib::html::html_dart2js.dart::BackgroundFetchFetch" {
  +_Request? request
}

class "lib::html::html_dart2js.dart::BackgroundFetchManager" {
  +dynamic fetch()
  +dynamic get()
  +dynamic getIds()
}

class "lib::html::html_dart2js.dart::BackgroundFetchRegistration" {
  +int? downloadTotal
  +int? downloaded
  +String? id
  +String? title
  +int? totalDownloadSize
  +int? uploadTotal
  +int? uploaded
  +dynamic abort()
}

class "lib::html::html_dart2js.dart::BackgroundFetchSettledFetch" {
  +_Response? response
  {static} -BackgroundFetchSettledFetch _create_1()
}

class "lib::html::html_dart2js.dart::BackgroundFetchedEvent" {
  +List<BackgroundFetchSettledFetch>? fetches
  {static} -BackgroundFetchedEvent _create_1()
  +dynamic updateUI()
}

class "lib::html::html_dart2js.dart::BarProp" {
  +bool? visible
}

class "lib::html::html_dart2js.dart::BarcodeDetector" {
  {static} -BarcodeDetector _create_1()
  +dynamic detect()
}

class "lib::html::html_dart2js.dart::BaseElement" {
  +String href
  +String target
}

class "lib::html::html_dart2js.dart::BatteryManager" {
  +bool? charging
  +num? chargingTime
  +num? dischargingTime
  +num? level
}

class "lib::html::html_dart2js.dart::BeforeInstallPromptEvent" {
  +List<String>? platforms
  +dynamic userChoice
  {static} -BeforeInstallPromptEvent _create_1()
  {static} -BeforeInstallPromptEvent _create_2()
  +dynamic prompt()
}

class "lib::html::html_dart2js.dart::BeforeUnloadEvent" {
  +String? returnValue
}

class "lib::html::html_dart2js.dart::Blob" {
  +int size
  +String type
  +Blob slice()
  {static} -dynamic _create_1()
  {static} -dynamic _create_2()
  {static} -dynamic _create_bag()
  {static} -dynamic _bag_set()
}

class "lib::html::html_dart2js.dart::BlobEvent" {
  +Blob? data
  +num? timecode
  {static} -BlobEvent _create_1()
}

class "lib::html::html_dart2js.dart::BluetoothRemoteGattDescriptor" {
  +_BluetoothRemoteGATTCharacteristic? characteristic
  +String? uuid
  +ByteData? value
  +dynamic readValue()
  +dynamic writeValue()
}

class "lib::html::html_dart2js.dart::Body" {
  +bool? bodyUsed
  +dynamic arrayBuffer()
  +dynamic blob()
  +dynamic formData()
  +dynamic json()
  +dynamic text()
}

class "lib::html::html_dart2js.dart::BodyElement" {
  {static} +EventStreamProvider<Event> blurEvent
  {static} +EventStreamProvider<Event> errorEvent
  {static} +EventStreamProvider<Event> focusEvent
  {static} +EventStreamProvider<Event> hashChangeEvent
  {static} +EventStreamProvider<Event> loadEvent
  {static} +EventStreamProvider<MessageEvent> messageEvent
  {static} +EventStreamProvider<Event> offlineEvent
  {static} +EventStreamProvider<Event> onlineEvent
  {static} +EventStreamProvider<PopStateEvent> popStateEvent
  {static} +EventStreamProvider<Event> resizeEvent
  {static} +EventStreamProvider<Event> scrollEvent
  {static} +EventStreamProvider<StorageEvent> storageEvent
  {static} +EventStreamProvider<Event> unloadEvent
  +ElementStream<Event> onBlur
  +ElementStream<Event> onError
  +ElementStream<Event> onFocus
  +ElementStream<Event> onHashChange
  +ElementStream<Event> onLoad
  +ElementStream<MessageEvent> onMessage
  +ElementStream<Event> onOffline
  +ElementStream<Event> onOnline
  +ElementStream<PopStateEvent> onPopState
  +ElementStream<Event> onResize
  +ElementStream<Event> onScroll
  +ElementStream<StorageEvent> onStorage
  +ElementStream<Event> onUnload
}

class "lib::html::html_dart2js.dart::BroadcastChannel" {
  {static} +EventStreamProvider<MessageEvent> messageEvent
  +String? name
  +Stream<MessageEvent> onMessage
  {static} -BroadcastChannel _create_1()
  +void close()
  +void postMessage()
}

class "lib::html::html_dart2js.dart::BudgetState" {
  +num? budgetAt
  +int? time
}

class "lib::html::html_dart2js.dart::ButtonElement" {
  +bool autofocus
  +bool disabled
  +FormElement? form
  +String? formAction
  +String? formEnctype
  +String? formMethod
  +bool formNoValidate
  +String formTarget
  +List<Node>? labels
  +String name
  +String type
  +String validationMessage
  +ValidityState validity
  +String value
  +bool willValidate
  +bool checkValidity()
  +bool reportValidity()
  +void setCustomValidity()
}

class "lib::html::html_dart2js.dart::CDataSection" {
}

class "lib::html::html_dart2js.dart::CacheStorage" {
  +dynamic delete()
  +dynamic has()
  +dynamic keys()
  +dynamic match()
  +dynamic open()
}

class "lib::html::html_dart2js.dart::CanMakePaymentEvent" {
  +List<dynamic>? methodData
  +List<dynamic>? modifiers
  +String? paymentRequestOrigin
  +String? topLevelOrigin
  {static} -CanMakePaymentEvent _create_1()
  +void respondWith()
}

class "lib::html::html_dart2js.dart::CanvasCaptureMediaStreamTrack" {
  +CanvasElement? canvas
  +void requestFrame()
}

class "lib::html::html_dart2js.dart::CanvasElement" {
  {static} +EventStreamProvider<ContextEvent> webGlContextLostEvent
  {static} +EventStreamProvider<ContextEvent> webGlContextRestoredEvent
  +int? height
  +int? width
  +ElementStream<ContextEvent> onWebGlContextLost
  +ElementStream<ContextEvent> onWebGlContextRestored
  +CanvasRenderingContext2D context2D
  +MediaStream captureStream()
  +Object? getContext()
  -Object? _getContext_1()
  -Object? _getContext_2()
  -String _toDataUrl()
  +OffscreenCanvas transferControlToOffscreen()
  +RenderingContext? getContext3d()
  +String toDataUrl()
  -void _toBlob()
  +dynamic toBlob()
}

class "lib::html::html_dart2js.dart::CanvasGradient" {
  +void addColorStop()
}

class "lib::html::html_dart2js.dart::CanvasPattern" {
  +void setTransform()
}

abstract class "lib::html::html_dart2js.dart::CanvasRenderingContext" {
  +CanvasElement canvas
}

class "lib::html::html_dart2js.dart::CanvasRenderingContext2D" {
  +CanvasElement canvas
  +Matrix? currentTransform
  +String? direction
  +Object? fillStyle
  +String? filter
  +String font
  +num globalAlpha
  +String globalCompositeOperation
  +bool? imageSmoothingEnabled
  +String? imageSmoothingQuality
  +String lineCap
  +String lineJoin
  +num lineWidth
  +num miterLimit
  +num shadowBlur
  +String shadowColor
  +num shadowOffsetX
  +num shadowOffsetY
  +Object? strokeStyle
  +String textAlign
  +String textBaseline
  +num lineDashOffset
  +double backingStorePixelRatio
  +void addHitRegion()
  -void _addHitRegion_1()
  -void _addHitRegion_2()
  +void beginPath()
  +void clearHitRegions()
  +void clearRect()
  +void clip()
  +ImageData createImageData()
  -dynamic _createImageData_1()
  -dynamic _createImageData_2()
  -dynamic _createImageData_3()
  -dynamic _createImageData_4()
  -dynamic _createImageData_5()
  +CanvasGradient createLinearGradient()
  +CanvasPattern? createPattern()
  +CanvasGradient createRadialGradient()
  +void drawFocusIfNeeded()
  +void fill()
  +void fillRect()
  +Map<dynamic, dynamic> getContextAttributes()
  -dynamic _getContextAttributes_1()
  +ImageData getImageData()
  -dynamic _getImageData_1()
  -List<num> _getLineDash()
  +bool isContextLost()
  +bool isPointInPath()
  +bool isPointInStroke()
  +TextMetrics measureText()
  +void putImageData()
  -void _putImageData_1()
  -void _putImageData_2()
  +void removeHitRegion()
  +void resetTransform()
  +void restore()
  +void rotate()
  +void save()
  +void scale()
  +void scrollPathIntoView()
  +void setTransform()
  +void stroke()
  +void strokeRect()
  +void strokeText()
  +void transform()
  +void translate()
  -void _arc()
  +void arcTo()
  +void bezierCurveTo()
  +void closePath()
  +void ellipse()
  +void lineTo()
  +void moveTo()
  +void quadraticCurveTo()
  +void rect()
  +ImageData createImageDataFromImageData()
  +void setFillColorRgb()
  +void setFillColorHsl()
  +void setStrokeColorRgb()
  +void setStrokeColorHsl()
  +void arc()
  +CanvasPattern createPatternFromImage()
  +void drawImageToRect()
  +void drawImage()
  +void drawImageScaled()
  +void drawImageScaledFromSource()
  +List<num> getLineDash()
  +void setLineDash()
  +void fillText()
}

class "lib::html::html_dart2js.dart::CharacterData" {
  +String? data
  +int? length
  +Element? nextElementSibling
  +Element? previousElementSibling
  +void appendData()
  +void deleteData()
  +void insertData()
  +void replaceData()
  +String substringData()
  +void after()
  +void before()
}

abstract class "lib::html::html_dart2js.dart::ChildNode" {
  +void after()
  +void before()
  +void remove()
}

class "lib::html::html_dart2js.dart::Client" {
  +String? frameType
  +String? id
  +String? type
  +String? url
  +void postMessage()
}

class "lib::html::html_dart2js.dart::Clients" {
  +dynamic claim()
  +dynamic get()
  +dynamic matchAll()
  +dynamic openWindow()
}

class "lib::html::html_dart2js.dart::ClipboardEvent" {
  +DataTransfer? clipboardData
  {static} -ClipboardEvent _create_1()
  {static} -ClipboardEvent _create_2()
}

class "lib::html::html_dart2js.dart::CloseEvent" {
  +int? code
  +String? reason
  +bool? wasClean
  {static} -CloseEvent _create_1()
  {static} -CloseEvent _create_2()
}

class "lib::html::html_dart2js.dart::Comment" {
}

class "lib::html::html_dart2js.dart::CompositionEvent" {
  +String? data
  {static} -CompositionEvent _create_1()
  {static} -CompositionEvent _create_2()
  -void _initCompositionEvent()
}

class "lib::html::html_dart2js.dart::ContentElement" {
  {static} +bool supported
  +String? select
  +List<Node> getDistributedNodes()
}

class "lib::html::html_dart2js.dart::CookieStore" {
  +dynamic getAll()
  +dynamic set()
}

class "lib::html::html_dart2js.dart::Coordinates" {
  +num? accuracy
  +num? altitude
  +num? altitudeAccuracy
  +num? heading
  +num? latitude
  +num? longitude
  +num? speed
}

class "lib::html::html_dart2js.dart::Credential" {
  +String? id
  +String? type
}

class "lib::html::html_dart2js.dart::CredentialUserData" {
  +String? iconUrl
  +String? name
}

class "lib::html::html_dart2js.dart::CredentialsContainer" {
  +dynamic create()
  +dynamic get()
  +dynamic preventSilentAccess()
  +dynamic requireUserMediation()
  +dynamic store()
}

class "lib::html::html_dart2js.dart::Crypto" {
  {static} +bool supported
  +_SubtleCrypto? subtle
  +TypedData getRandomValues()
  -TypedData _getRandomValues()
}

class "lib::html::html_dart2js.dart::CryptoKey" {
  +Object? algorithm
  +bool? extractable
  +String? type
  +Object? usages
}

class "lib::html::html_dart2js.dart::Css" {
  {static} +_Worklet? paintWorklet
  {static} +CssUnitValue Hz()
  {static} +CssUnitValue ch()
  {static} +CssUnitValue cm()
  {static} +CssUnitValue deg()
  {static} +CssUnitValue dpcm()
  {static} +CssUnitValue dpi()
  {static} +CssUnitValue dppx()
  {static} +CssUnitValue em()
  {static} +String escape()
  {static} +CssUnitValue ex()
  {static} +CssUnitValue fr()
  {static} +CssUnitValue grad()
  {static} +CssUnitValue inch()
  {static} +CssUnitValue kHz()
  {static} +CssUnitValue mm()
  {static} +CssUnitValue ms()
  {static} +CssUnitValue number()
  {static} +CssUnitValue pc()
  {static} +CssUnitValue percent()
  {static} +CssUnitValue pt()
  {static} +CssUnitValue px()
  {static} +CssUnitValue rad()
  {static} +void registerProperty()
  {static} -void _registerProperty_1()
  {static} +CssUnitValue rem()
  {static} +CssUnitValue s()
  {static} +bool supports()
  {static} +bool supportsCondition()
  {static} +CssUnitValue turn()
  {static} +CssUnitValue vh()
  {static} +CssUnitValue vmax()
  {static} +CssUnitValue vmin()
  {static} +CssUnitValue vw()
}

class "lib::html::html_dart2js.dart::CssCharsetRule" {
  +String? encoding
}

class "lib::html::html_dart2js.dart::CssConditionRule" {
  +String? conditionText
}

class "lib::html::html_dart2js.dart::CssFontFaceRule" {
  +CssStyleDeclaration? style
}

class "lib::html::html_dart2js.dart::CssGroupingRule" {
  +List<CssRule>? cssRules
  +void deleteRule()
  +int insertRule()
}

class "lib::html::html_dart2js.dart::CssImageValue" {
  +num? intrinsicHeight
  +num? intrinsicRatio
  +num? intrinsicWidth
}

class "lib::html::html_dart2js.dart::CssImportRule" {
  +String? href
  +MediaList? media
  +CssStyleSheet? styleSheet
}

class "lib::html::html_dart2js.dart::CssKeyframeRule" {
  +String? keyText
  +CssStyleDeclaration? style
}

class "lib::html::html_dart2js.dart::CssKeyframesRule" {
  +List<CssRule>? cssRules
  +String? name
  -CssKeyframeRule __getter__()
  +void appendRule()
  +void deleteRule()
  +CssKeyframeRule? findRule()
}

class "lib::html::html_dart2js.dart::CssKeywordValue" {
  +String? value
  {static} -CssKeywordValue _create_1()
}

class "lib::html::html_dart2js.dart::CssMatrixComponent" {
  +DomMatrix? matrix
  {static} -CssMatrixComponent _create_1()
  {static} -CssMatrixComponent _create_2()
}

class "lib::html::html_dart2js.dart::CssMediaRule" {
  +MediaList? media
}

class "lib::html::html_dart2js.dart::CssNamespaceRule" {
  +String? namespaceUri
  +String? prefix
}

class "lib::html::html_dart2js.dart::CssNumericValue" {
  +CssNumericValue add()
  +CssNumericValue div()
  +CssNumericValue mul()
  {static} +CssNumericValue parse()
  +CssNumericValue sub()
  +CssNumericValue to()
}

class "lib::html::html_dart2js.dart::CssPageRule" {
  +String? selectorText
  +CssStyleDeclaration? style
}

class "lib::html::html_dart2js.dart::CssPerspective" {
  +CssNumericValue? length
  {static} -CssPerspective _create_1()
}

class "lib::html::html_dart2js.dart::CssPositionValue" {
  +CssNumericValue? x
  +CssNumericValue? y
  {static} -CssPositionValue _create_1()
}

class "lib::html::html_dart2js.dart::CssResourceValue" {
  +String? state
}

class "lib::html::html_dart2js.dart::CssRotation" {
  +CssNumericValue? angle
  +num? x
  +num? y
  +num? z
  {static} -CssRotation _create_1()
  {static} -CssRotation _create_2()
}

class "lib::html::html_dart2js.dart::CssRule" {
  {static} +int CHARSET_RULE
  {static} +int FONT_FACE_RULE
  {static} +int IMPORT_RULE
  {static} +int KEYFRAMES_RULE
  {static} +int KEYFRAME_RULE
  {static} +int MEDIA_RULE
  {static} +int NAMESPACE_RULE
  {static} +int PAGE_RULE
  {static} +int STYLE_RULE
  {static} +int SUPPORTS_RULE
  {static} +int VIEWPORT_RULE
  +String? cssText
  +CssRule? parentRule
  +CssStyleSheet? parentStyleSheet
  +int? type
}

class "lib::html::html_dart2js.dart::CssScale" {
  +num? x
  +num? y
  +num? z
  {static} -CssScale _create_1()
  {static} -CssScale _create_2()
}

class "lib::html::html_dart2js.dart::CssSkew" {
  +CssNumericValue? ax
  +CssNumericValue? ay
  {static} -CssSkew _create_1()
}

class "lib::html::html_dart2js.dart::CssStyleDeclaration" {
  {static} -dynamic _propertyCache
  {static} +bool supportsTransitions
  +String? cssFloat
  +String? cssText
  +int length
  +CssRule? parentRule
  +String background
  -String _background
  +String backgroundAttachment
  -String _backgroundAttachment
  +String backgroundColor
  -String _backgroundColor
  +String backgroundImage
  -String _backgroundImage
  +String backgroundPosition
  -String _backgroundPosition
  +String backgroundRepeat
  -String _backgroundRepeat
  +String border
  -String _border
  +String borderBottom
  -String _borderBottom
  +String borderBottomColor
  -String _borderBottomColor
  +String borderBottomStyle
  -String _borderBottomStyle
  +String borderBottomWidth
  -String _borderBottomWidth
  +String borderCollapse
  -String _borderCollapse
  +String borderColor
  -String _borderColor
  +String borderLeft
  -String _borderLeft
  +String borderLeftColor
  -String _borderLeftColor
  +String borderLeftStyle
  -String _borderLeftStyle
  +String borderLeftWidth
  -String _borderLeftWidth
  +String borderRight
  -String _borderRight
  +String borderRightColor
  -String _borderRightColor
  +String borderRightStyle
  -String _borderRightStyle
  +String borderRightWidth
  -String _borderRightWidth
  +String borderSpacing
  -String _borderSpacing
  +String borderStyle
  -String _borderStyle
  +String borderTop
  -String _borderTop
  +String borderTopColor
  -String _borderTopColor
  +String borderTopStyle
  -String _borderTopStyle
  +String borderTopWidth
  -String _borderTopWidth
  +String borderWidth
  -String _borderWidth
  +String bottom
  -String _bottom
  +String captionSide
  -String _captionSide
  +String clear
  -String _clear
  +String clip
  -String _clip
  +String color
  -String _color
  +String content
  -String _content
  +String cursor
  -String _cursor
  +String direction
  -String _direction
  +String display
  -String _display
  +String emptyCells
  -String _emptyCells
  +String font
  -String _font
  +String fontFamily
  -String _fontFamily
  +String fontSize
  -String _fontSize
  +String fontStyle
  -String _fontStyle
  +String fontVariant
  -String _fontVariant
  +String fontWeight
  -String _fontWeight
  +String height
  -String _height
  +String left
  -String _left
  +String letterSpacing
  -String _letterSpacing
  +String lineHeight
  -String _lineHeight
  +String listStyle
  -String _listStyle
  +String listStyleImage
  -String _listStyleImage
  +String listStylePosition
  -String _listStylePosition
  +String listStyleType
  -String _listStyleType
  +String margin
  -String _margin
  +String marginBottom
  -String _marginBottom
  +String marginLeft
  -String _marginLeft
  +String marginRight
  -String _marginRight
  +String marginTop
  -String _marginTop
  +String maxHeight
  -String _maxHeight
  +String maxWidth
  -String _maxWidth
  +String minHeight
  -String _minHeight
  +String minWidth
  -String _minWidth
  +String outline
  -String _outline
  +String outlineColor
  -String _outlineColor
  +String outlineStyle
  -String _outlineStyle
  +String outlineWidth
  -String _outlineWidth
  +String overflow
  -String _overflow
  +String padding
  -String _padding
  +String paddingBottom
  -String _paddingBottom
  +String paddingLeft
  -String _paddingLeft
  +String paddingRight
  -String _paddingRight
  +String paddingTop
  -String _paddingTop
  +String pageBreakAfter
  -String _pageBreakAfter
  +String pageBreakBefore
  -String _pageBreakBefore
  +String pageBreakInside
  -String _pageBreakInside
  +String position
  -String _position
  +String quotes
  -String _quotes
  +String right
  -String _right
  +String tableLayout
  -String _tableLayout
  +String textAlign
  -String _textAlign
  +String textDecoration
  -String _textDecoration
  +String textIndent
  -String _textIndent
  +String textTransform
  -String _textTransform
  +String top
  -String _top
  +String unicodeBidi
  -String _unicodeBidi
  +String verticalAlign
  -String _verticalAlign
  +String visibility
  -String _visibility
  +String whiteSpace
  -String _whiteSpace
  +String width
  -String _width
  +String wordSpacing
  -String _wordSpacing
  +String zIndex
  -String _zIndex
  +String getPropertyValue()
  -String _getPropertyValueHelper()
  +bool supportsProperty()
  -bool _supportsProperty()
  +void setProperty()
  -String _browserPropertyName()
  -String _supportedBrowserPropertyName()
  {static} -String? _readCache()
  {static} -void _writeCache()
  {static} -String _camelCase()
  -void _setPropertyHelper()
  +String getPropertyPriority()
  -String _getPropertyValue()
  +String item()
  +String removeProperty()
}

class "lib::html::html_dart2js.dart::_CssStyleDeclarationSet" {
  -Iterable<Element> _elementIterable
  -Iterable<CssStyleDeclaration> _elementCssStyleDeclarationSetIterable
  +String background
  +String backgroundAttachment
  +String backgroundColor
  +String backgroundImage
  +String backgroundPosition
  +String backgroundRepeat
  +String border
  +String borderBottom
  +String borderBottomColor
  +String borderBottomStyle
  +String borderBottomWidth
  +String borderCollapse
  +String borderColor
  +String borderLeft
  +String borderLeftColor
  +String borderLeftStyle
  +String borderLeftWidth
  +String borderRight
  +String borderRightColor
  +String borderRightStyle
  +String borderRightWidth
  +String borderSpacing
  +String borderStyle
  +String borderTop
  +String borderTopColor
  +String borderTopStyle
  +String borderTopWidth
  +String borderWidth
  +String bottom
  +String captionSide
  +String clear
  +String clip
  +String color
  +String content
  +String cursor
  +String direction
  +String display
  +String emptyCells
  +String font
  +String fontFamily
  +String fontSize
  +String fontStyle
  +String fontVariant
  +String fontWeight
  +String height
  +String left
  +String letterSpacing
  +String lineHeight
  +String listStyle
  +String listStyleImage
  +String listStylePosition
  +String listStyleType
  +String margin
  +String marginBottom
  +String marginLeft
  +String marginRight
  +String marginTop
  +String maxHeight
  +String maxWidth
  +String minHeight
  +String minWidth
  +String outline
  +String outlineColor
  +String outlineStyle
  +String outlineWidth
  +String overflow
  +String padding
  +String paddingBottom
  +String paddingLeft
  +String paddingRight
  +String paddingTop
  +String pageBreakAfter
  +String pageBreakBefore
  +String pageBreakInside
  +String position
  +String quotes
  +String right
  +String tableLayout
  +String textAlign
  +String textDecoration
  +String textIndent
  +String textTransform
  +String top
  +String unicodeBidi
  +String verticalAlign
  +String visibility
  +String whiteSpace
  +String width
  +String wordSpacing
  +String zIndex
  +String getPropertyValue()
  +void setProperty()
  -void _setAll()
}

class "lib::html::html_dart2js.dart::CssStyleDeclarationBase" {
  +String alignContent
  +String alignItems
  +String alignSelf
  +String animation
  +String animationDelay
  +String animationDirection
  +String animationDuration
  +String animationFillMode
  +String animationIterationCount
  +String animationName
  +String animationPlayState
  +String animationTimingFunction
  +String appRegion
  +String appearance
  +String aspectRatio
  +String backfaceVisibility
  +String background
  +String backgroundAttachment
  +String backgroundBlendMode
  +String backgroundClip
  +String backgroundColor
  +String backgroundComposite
  +String backgroundImage
  +String backgroundOrigin
  +String backgroundPosition
  +String backgroundPositionX
  +String backgroundPositionY
  +String backgroundRepeat
  +String backgroundRepeatX
  +String backgroundRepeatY
  +String backgroundSize
  +String border
  +String borderAfter
  +String borderAfterColor
  +String borderAfterStyle
  +String borderAfterWidth
  +String borderBefore
  +String borderBeforeColor
  +String borderBeforeStyle
  +String borderBeforeWidth
  +String borderBottom
  +String borderBottomColor
  +String borderBottomLeftRadius
  +String borderBottomRightRadius
  +String borderBottomStyle
  +String borderBottomWidth
  +String borderCollapse
  +String borderColor
  +String borderEnd
  +String borderEndColor
  +String borderEndStyle
  +String borderEndWidth
  +String borderFit
  +String borderHorizontalSpacing
  +String borderImage
  +String borderImageOutset
  +String borderImageRepeat
  +String borderImageSlice
  +String borderImageSource
  +String borderImageWidth
  +String borderLeft
  +String borderLeftColor
  +String borderLeftStyle
  +String borderLeftWidth
  +String borderRadius
  +String borderRight
  +String borderRightColor
  +String borderRightStyle
  +String borderRightWidth
  +String borderSpacing
  +String borderStart
  +String borderStartColor
  +String borderStartStyle
  +String borderStartWidth
  +String borderStyle
  +String borderTop
  +String borderTopColor
  +String borderTopLeftRadius
  +String borderTopRightRadius
  +String borderTopStyle
  +String borderTopWidth
  +String borderVerticalSpacing
  +String borderWidth
  +String bottom
  +String boxAlign
  +String boxDecorationBreak
  +String boxDirection
  +String boxFlex
  +String boxFlexGroup
  +String boxLines
  +String boxOrdinalGroup
  +String boxOrient
  +String boxPack
  +String boxReflect
  +String boxShadow
  +String boxSizing
  +String captionSide
  +String clear
  +String clip
  +String clipPath
  +String color
  +String columnBreakAfter
  +String columnBreakBefore
  +String columnBreakInside
  +String columnCount
  +String columnFill
  +String columnGap
  +String columnRule
  +String columnRuleColor
  +String columnRuleStyle
  +String columnRuleWidth
  +String columnSpan
  +String columnWidth
  +String columns
  +String content
  +String counterIncrement
  +String counterReset
  +String cursor
  +String direction
  +String display
  +String emptyCells
  +String filter
  +String flex
  +String flexBasis
  +String flexDirection
  +String flexFlow
  +String flexGrow
  +String flexShrink
  +String flexWrap
  +String float
  +String font
  +String fontFamily
  +String fontFeatureSettings
  +String fontKerning
  +String fontSize
  +String fontSizeDelta
  +String fontSmoothing
  +String fontStretch
  +String fontStyle
  +String fontVariant
  +String fontVariantLigatures
  +String fontWeight
  +String gap
  +String grid
  +String gridArea
  +String gridAutoColumns
  +String gridAutoFlow
  +String gridAutoRows
  +String gridColumn
  +String gridColumnEnd
  +String gridColumnStart
  +String gridRow
  +String gridRowEnd
  +String gridRowStart
  +String gridTemplate
  +String gridTemplateAreas
  +String gridTemplateColumns
  +String gridTemplateRows
  +String height
  +String highlight
  +String hyphenateCharacter
  +String imageRendering
  +String isolation
  +String justifyContent
  +String justifySelf
  +String left
  +String letterSpacing
  +String lineBoxContain
  +String lineBreak
  +String lineClamp
  +String lineHeight
  +String listStyle
  +String listStyleImage
  +String listStylePosition
  +String listStyleType
  +String locale
  +String logicalHeight
  +String logicalWidth
  +String margin
  +String marginAfter
  +String marginAfterCollapse
  +String marginBefore
  +String marginBeforeCollapse
  +String marginBottom
  +String marginBottomCollapse
  +String marginCollapse
  +String marginEnd
  +String marginLeft
  +String marginRight
  +String marginStart
  +String marginTop
  +String marginTopCollapse
  +String mask
  +String maskBoxImage
  +String maskBoxImageOutset
  +String maskBoxImageRepeat
  +String maskBoxImageSlice
  +String maskBoxImageSource
  +String maskBoxImageWidth
  +String maskClip
  +String maskComposite
  +String maskImage
  +String maskOrigin
  +String maskPosition
  +String maskPositionX
  +String maskPositionY
  +String maskRepeat
  +String maskRepeatX
  +String maskRepeatY
  +String maskSize
  +String maskSourceType
  +String maxHeight
  +String maxLogicalHeight
  +String maxLogicalWidth
  +String maxWidth
  +String maxZoom
  +String minHeight
  +String minLogicalHeight
  +String minLogicalWidth
  +String minWidth
  +String minZoom
  +String mixBlendMode
  +String objectFit
  +String objectPosition
  +String opacity
  +String order
  +String orientation
  +String orphans
  +String outline
  +String outlineColor
  +String outlineOffset
  +String outlineStyle
  +String outlineWidth
  +String overflow
  +String overflowWrap
  +String overflowX
  +String overflowY
  +String padding
  +String paddingAfter
  +String paddingBefore
  +String paddingBottom
  +String paddingEnd
  +String paddingLeft
  +String paddingRight
  +String paddingStart
  +String paddingTop
  +String page
  +String pageBreakAfter
  +String pageBreakBefore
  +String pageBreakInside
  +String perspective
  +String perspectiveOrigin
  +String perspectiveOriginX
  +String perspectiveOriginY
  +String pointerEvents
  +String position
  +String printColorAdjust
  +String quotes
  +String resize
  +String right
  +String rowGap
  +String rtlOrdering
  +String rubyPosition
  +String scrollBehavior
  +String shapeImageThreshold
  +String shapeMargin
  +String shapeOutside
  +String size
  +String speak
  +String src
  +String tabSize
  +String tableLayout
  +String tapHighlightColor
  +String textAlign
  +String textAlignLast
  +String textCombine
  +String textDecoration
  +String textDecorationColor
  +String textDecorationLine
  +String textDecorationStyle
  +String textDecorationsInEffect
  +String textEmphasis
  +String textEmphasisColor
  +String textEmphasisPosition
  +String textEmphasisStyle
  +String textFillColor
  +String textIndent
  +String textJustify
  +String textLineThroughColor
  +String textLineThroughMode
  +String textLineThroughStyle
  +String textLineThroughWidth
  +String textOrientation
  +String textOverflow
  +String textOverlineColor
  +String textOverlineMode
  +String textOverlineStyle
  +String textOverlineWidth
  +String textRendering
  +String textSecurity
  +String textShadow
  +String textStroke
  +String textStrokeColor
  +String textStrokeWidth
  +String textTransform
  +String textUnderlineColor
  +String textUnderlineMode
  +String textUnderlinePosition
  +String textUnderlineStyle
  +String textUnderlineWidth
  +String top
  +String touchAction
  +String touchActionDelay
  +String transform
  +String transformOrigin
  +String transformOriginX
  +String transformOriginY
  +String transformOriginZ
  +String transformStyle
  +String transition
  +String transitionDelay
  +String transitionDuration
  +String transitionProperty
  +String transitionTimingFunction
  +String unicodeBidi
  +String unicodeRange
  +String userDrag
  +String userModify
  +String userSelect
  +String userZoom
  +String verticalAlign
  +String visibility
  +String whiteSpace
  +String widows
  +String width
  +String willChange
  +String wordBreak
  +String wordSpacing
  +String wordWrap
  +String wrapFlow
  +String wrapThrough
  +String writingMode
  +String zIndex
  +String zoom
  +String getPropertyValue()
  +void setProperty()
}

class "lib::html::html_dart2js.dart::CssStyleRule" {
  +String selectorText
  +CssStyleDeclaration style
}

class "lib::html::html_dart2js.dart::CssStyleSheet" {
  +List<CssRule> cssRules
  +CssRule? ownerRule
  +List<CssRule>? rules
  +int addRule()
  +void deleteRule()
  +int insertRule()
  +void removeRule()
}

class "lib::html::html_dart2js.dart::CssStyleValue" {
  {static} +Object? parse()
}

class "lib::html::html_dart2js.dart::CssSupportsRule" {
}

class "lib::html::html_dart2js.dart::CssTransformComponent" {
  +bool? is2D
}

class "lib::html::html_dart2js.dart::CssTransformValue" {
  +bool? is2D
  +int? length
  {static} -CssTransformValue _create_1()
  {static} -CssTransformValue _create_2()
  +CssTransformComponent componentAtIndex()
  +DomMatrix toMatrix()
}

class "lib::html::html_dart2js.dart::CssTranslation" {
  +CssNumericValue? x
  +CssNumericValue? y
  +CssNumericValue? z
  {static} -CssTranslation _create_1()
  {static} -CssTranslation _create_2()
}

class "lib::html::html_dart2js.dart::CssUnitValue" {
  +String? type
  +String? unit
  +num? value
  {static} -CssUnitValue _create_1()
}

class "lib::html::html_dart2js.dart::CssUnparsedValue" {
  +int? length
  +Object? fragmentAtIndex()
}

class "lib::html::html_dart2js.dart::CssVariableReferenceValue" {
  +CssUnparsedValue? fallback
  +String? variable
}

class "lib::html::html_dart2js.dart::CssViewportRule" {
  +CssStyleDeclaration? style
}

class "lib::html::html_dart2js.dart::CssurlImageValue" {
  +String? url
  {static} -CssurlImageValue _create_1()
}

class "lib::html::html_dart2js.dart::CustomElementRegistry" {
  +void define()
  -void _define_1()
  -void _define_2()
  +Object? get()
  +dynamic whenDefined()
}

class "lib::html::html_dart2js.dart::CustomEvent" {
  -dynamic _dartDetail
  +dynamic detail
  -dynamic _detail
  -dynamic _get__detail
  {static} -CustomEvent _create_1()
  {static} -CustomEvent _create_2()
  -void _initCustomEvent()
}

class "lib::html::html_dart2js.dart::DListElement" {
}

class "lib::html::html_dart2js.dart::DataElement" {
  +String? value
}

class "lib::html::html_dart2js.dart::DataListElement" {
  {static} +bool supported
  +List<Node>? options
}

class "lib::html::html_dart2js.dart::DataTransfer" {
  +String? dropEffect
  +String? effectAllowed
  +List<File>? files
  +DataTransferItemList? items
  +List<String>? types
  {static} -DataTransfer _create_1()
  +void clearData()
  +String getData()
  +void setData()
  +void setDragImage()
}

class "lib::html::html_dart2js.dart::DataTransferItem" {
  +String? kind
  +String? type
  +Entry getAsEntry()
  +File? getAsFile()
  -Entry? _webkitGetAsEntry()
}

class "lib::html::html_dart2js.dart::DataTransferItemList" {
  +int? length
  +DataTransferItem? add()
  +DataTransferItem? addData()
  +DataTransferItem? addFile()
  +void clear()
  +DataTransferItem item()
  +void remove()
  +DataTransferItem []()
}

class "lib::html::html_dart2js.dart::DedicatedWorkerGlobalScope" {
  {static} +EventStreamProvider<MessageEvent> messageEvent
  {static} +int PERSISTENT
  {static} +int TEMPORARY
  +Stream<MessageEvent> onMessage
  {static} +DedicatedWorkerGlobalScope instance
  +void close()
  +void postMessage()
  -void _postMessage_1()
  -void _postMessage_2()
  -void _webkitRequestFileSystem()
  +_DOMFileSystemSync requestFileSystemSync()
  +_EntrySync resolveLocalFileSystemSyncUrl()
  -void _webkitResolveLocalFileSystemUrl()
}

class "lib::html::html_dart2js.dart::DeprecatedStorageInfo" {
  {static} +int PERSISTENT
  {static} +int TEMPORARY
  +void queryUsageAndQuota()
  +void requestQuota()
}

class "lib::html::html_dart2js.dart::DeprecatedStorageQuota" {
  +void queryUsageAndQuota()
  +void requestQuota()
}

class "lib::html::html_dart2js.dart::DeprecationReport" {
  +int? lineNumber
  +String? message
  +String? sourceFile
}

class "lib::html::html_dart2js.dart::DetailsElement" {
  {static} +bool supported
  +bool? open
}

class "lib::html::html_dart2js.dart::DetectedBarcode" {
  +Rectangle<num>? boundingBox
  +List<dynamic>? cornerPoints
  +String? rawValue
  {static} -DetectedBarcode _create_1()
}

class "lib::html::html_dart2js.dart::DetectedFace" {
  +Rectangle<num>? boundingBox
  +List<dynamic>? landmarks
  {static} -DetectedFace _create_1()
}

class "lib::html::html_dart2js.dart::DetectedText" {
  +Rectangle<num>? boundingBox
  +List<dynamic>? cornerPoints
  +String? rawValue
  {static} -DetectedText _create_1()
}

class "lib::html::html_dart2js.dart::DeviceAcceleration" {
  +num? x
  +num? y
  +num? z
}

class "lib::html::html_dart2js.dart::DeviceMotionEvent" {
  +DeviceAcceleration? acceleration
  +DeviceAcceleration? accelerationIncludingGravity
  +num? interval
  +DeviceRotationRate? rotationRate
  {static} -DeviceMotionEvent _create_1()
  {static} -DeviceMotionEvent _create_2()
}

class "lib::html::html_dart2js.dart::DeviceOrientationEvent" {
  +bool? absolute
  +num? alpha
  +num? beta
  +num? gamma
  {static} -DeviceOrientationEvent _create_1()
  {static} -DeviceOrientationEvent _create_2()
}

class "lib::html::html_dart2js.dart::DeviceRotationRate" {
  +num? alpha
  +num? beta
  +num? gamma
}

class "lib::html::html_dart2js.dart::DialogElement" {
  +bool? open
  +String? returnValue
  +void close()
  +void show()
  +void showModal()
}

class "lib::html::html_dart2js.dart::DirectoryEntry" {
  +dynamic createDirectory()
  +DirectoryReader createReader()
  +dynamic getDirectory()
  +dynamic createFile()
  +dynamic getFile()
  -DirectoryReader _createReader()
  -void __getDirectory()
  -void __getDirectory_1()
  -void __getDirectory_2()
  -void __getDirectory_3()
  -void __getDirectory_4()
  -dynamic _getDirectory()
  -void __getFile()
  -void __getFile_1()
  -void __getFile_2()
  -void __getFile_3()
  -void __getFile_4()
  -dynamic _getFile()
  -void _removeRecursively()
  +dynamic removeRecursively()
}

class "lib::html::html_dart2js.dart::DirectoryReader" {
  -void _readEntries()
  +dynamic readEntries()
}

class "lib::html::html_dart2js.dart::DivElement" {
}

class "lib::html::html_dart2js.dart::Document" {
  {static} +EventStreamProvider<Event> pointerLockChangeEvent
  {static} +EventStreamProvider<Event> pointerLockErrorEvent
  {static} +EventStreamProvider<Event> readyStateChangeEvent
  {static} +EventStreamProvider<SecurityPolicyViolationEvent> securityPolicyViolationEvent
  {static} +EventStreamProvider<Event> selectionChangeEvent
  +String? addressSpace
  -HtmlElement? _body
  +String? contentType
  +String? cookie
  +ScriptElement? currentScript
  +WindowBase? window
  -dynamic _get_window
  +Element? documentElement
  +String? domain
  +bool? fullscreenEnabled
  -HeadElement? _head
  +bool? hidden
  +DomImplementation? implementation
  -String? _lastModified
  +String? origin
  -String? _preferredStylesheetSet
  +String? readyState
  -String _referrer
  +SvgSvgElement? rootElement
  +Element? rootScroller
  +Element? scrollingElement
  -String? _selectedStylesheetSet
  +String? suborigin
  +DocumentTimeline? timeline
  -String _title
  -String? _visibilityState
  -Element? _webkitFullscreenElement
  -bool? _webkitFullscreenEnabled
  -bool? _webkitHidden
  -String? _webkitVisibilityState
  +Element? activeElement
  +Element? fullscreenElement
  +Element? pointerLockElement
  -List<StyleSheet>? _styleSheets
  +FontFaceSet? fonts
  -int _childElementCount
  -List<Node>? _children
  -Element? _firstElementChild
  -Element? _lastElementChild
  +Stream<Event> onAbort
  +Stream<Event> onBeforeCopy
  +Stream<Event> onBeforeCut
  +Stream<Event> onBeforePaste
  +Stream<Event> onBlur
  +Stream<Event> onCanPlay
  +Stream<Event> onCanPlayThrough
  +Stream<Event> onChange
  +Stream<MouseEvent> onClick
  +Stream<MouseEvent> onContextMenu
  +Stream<ClipboardEvent> onCopy
  +Stream<ClipboardEvent> onCut
  +Stream<Event> onDoubleClick
  +Stream<MouseEvent> onDrag
  +Stream<MouseEvent> onDragEnd
  +Stream<MouseEvent> onDragEnter
  +Stream<MouseEvent> onDragLeave
  +Stream<MouseEvent> onDragOver
  +Stream<MouseEvent> onDragStart
  +Stream<MouseEvent> onDrop
  +Stream<Event> onDurationChange
  +Stream<Event> onEmptied
  +Stream<Event> onEnded
  +Stream<Event> onError
  +Stream<Event> onFocus
  +Stream<Event> onInput
  +Stream<Event> onInvalid
  +Stream<KeyboardEvent> onKeyDown
  +Stream<KeyboardEvent> onKeyPress
  +Stream<KeyboardEvent> onKeyUp
  +Stream<Event> onLoad
  +Stream<Event> onLoadedData
  +Stream<Event> onLoadedMetadata
  +Stream<MouseEvent> onMouseDown
  +Stream<MouseEvent> onMouseEnter
  +Stream<MouseEvent> onMouseLeave
  +Stream<MouseEvent> onMouseMove
  +Stream<MouseEvent> onMouseOut
  +Stream<MouseEvent> onMouseOver
  +Stream<MouseEvent> onMouseUp
  +Stream<WheelEvent> onMouseWheel
  +Stream<ClipboardEvent> onPaste
  +Stream<Event> onPause
  +Stream<Event> onPlay
  +Stream<Event> onPlaying
  +Stream<Event> onPointerLockChange
  +Stream<Event> onPointerLockError
  +Stream<Event> onRateChange
  +Stream<Event> onReadyStateChange
  +Stream<Event> onReset
  +Stream<Event> onResize
  +Stream<Event> onScroll
  +Stream<Event> onSearch
  +Stream<SecurityPolicyViolationEvent> onSecurityPolicyViolation
  +Stream<Event> onSeeked
  +Stream<Event> onSeeking
  +Stream<Event> onSelect
  +Stream<Event> onSelectionChange
  +Stream<Event> onSelectStart
  +Stream<Event> onStalled
  +Stream<Event> onSubmit
  +Stream<Event> onSuspend
  +Stream<Event> onTimeUpdate
  +Stream<TouchEvent> onTouchCancel
  +Stream<TouchEvent> onTouchEnd
  +Stream<TouchEvent> onTouchMove
  +Stream<TouchEvent> onTouchStart
  +Stream<Event> onVolumeChange
  +Stream<Event> onWaiting
  +Stream<Event> onFullscreenChange
  +Stream<Event> onFullscreenError
  +String visibilityState
  {static} -Document _create_1()
  +Node adoptNode()
  -Range _caretRangeFromPoint()
  +DocumentFragment createDocumentFragment()
  -Element _createElement()
  -Element _createElementNS()
  -Event _createEvent()
  +Range createRange()
  -Text _createTextNode()
  -Touch _createTouch()
  -Touch _createTouch_1()
  -Touch _createTouch_2()
  -Touch _createTouch_3()
  -Touch _createTouch_4()
  -Touch _createTouch_5()
  -TouchList _createTouchList()
  +bool execCommand()
  +void exitFullscreen()
  +void exitPointerLock()
  +List<Animation> getAnimations()
  +List<Node> getElementsByClassName()
  +List<Node> getElementsByName()
  +List<Node> getElementsByTagName()
  +Node importNode()
  +bool queryCommandEnabled()
  +bool queryCommandIndeterm()
  +bool queryCommandState()
  +bool queryCommandSupported()
  +String queryCommandValue()
  -void _webkitExitFullscreen()
  -Element? _elementFromPoint()
  +List<Element> elementsFromPoint()
  +Element? getElementById()
  +Element? querySelector()
  -List<Node> _querySelectorAll()
  +ElementList<T> querySelectorAll()
  +Element createElement()
  -dynamic _createElement_2()
  -dynamic _createElementNS_2()
  +Element createElementNS()
  -NodeIterator _createNodeIterator()
  -TreeWalker _createTreeWalker()
}

class "lib::html::html_dart2js.dart::DocumentFragment" {
  -List<Element>? _docChildren
  -HtmlCollection _children
  +List<Element> children
  +String? innerHtml
  -int _childElementCount
  -Element? _firstElementChild
  -Element? _lastElementChild
  +ElementList<T> querySelectorAll()
  +void setInnerHtml()
  +void appendText()
  +void appendHtml()
  +Element? getElementById()
  +Element? querySelector()
  -List<Node> _querySelectorAll()
}

class "lib::html::html_dart2js.dart::DocumentOrShadowRoot" {
  +Element? activeElement
  +Element? fullscreenElement
  +Element? pointerLockElement
  +List<StyleSheet>? styleSheets
  +Element? elementFromPoint()
  +List<Element> elementsFromPoint()
  +Selection? getSelection()
}

class "lib::html::html_dart2js.dart::DocumentTimeline" {
  {static} -DocumentTimeline _create_1()
  {static} -DocumentTimeline _create_2()
}

class "lib::html::html_dart2js.dart::DomError" {
  +String? message
  +String? name
  {static} -DomError _create_1()
  {static} -DomError _create_2()
}

class "lib::html::html_dart2js.dart::DomException" {
  {static} +String INDEX_SIZE
  {static} +String HIERARCHY_REQUEST
  {static} +String WRONG_DOCUMENT
  {static} +String INVALID_CHARACTER
  {static} +String NO_MODIFICATION_ALLOWED
  {static} +String NOT_FOUND
  {static} +String NOT_SUPPORTED
  {static} +String INVALID_STATE
  {static} +String SYNTAX
  {static} +String INVALID_MODIFICATION
  {static} +String NAMESPACE
  {static} +String INVALID_ACCESS
  {static} +String TYPE_MISMATCH
  {static} +String SECURITY
  {static} +String NETWORK
  {static} +String ABORT
  {static} +String URL_MISMATCH
  {static} +String QUOTA_EXCEEDED
  {static} +String TIMEOUT
  {static} +String INVALID_NODE_TYPE
  {static} +String DATA_CLONE
  {static} +String ENCODING
  {static} +String NOT_READABLE
  {static} +String UNKNOWN
  {static} +String CONSTRAINT
  {static} +String TRANSACTION_INACTIVE
  {static} +String READ_ONLY
  {static} +String VERSION
  {static} +String OPERATION
  {static} +String NOT_ALLOWED
  {static} +String TYPE_ERROR
  +String name
  +String? message
  +String toString()
}

class "lib::html::html_dart2js.dart::DomImplementation" {
  +XmlDocument createDocument()
  +_DocumentType createDocumentType()
  +HtmlDocument createHtmlDocument()
  +bool hasFeature()
}

class "lib::html::html_dart2js.dart::DomIterator" {
  +Object? next()
}

class "lib::html::html_dart2js.dart::DomMatrix" {
  +num? a
  +num? b
  +num? c
  +num? d
  +num? e
  +num? f
  +num? m11
  +num? m12
  +num? m13
  +num? m14
  +num? m21
  +num? m22
  +num? m23
  +num? m24
  +num? m31
  +num? m32
  +num? m33
  +num? m34
  +num? m41
  +num? m42
  +num? m43
  +num? m44
  {static} -DomMatrix _create_1()
  {static} -DomMatrix _create_2()
  {static} +DomMatrix fromFloat32Array()
  {static} +DomMatrix fromFloat64Array()
  {static} +DomMatrix fromMatrix()
  {static} -DomMatrix _fromMatrix_1()
  {static} -DomMatrix _fromMatrix_2()
  +DomMatrix invertSelf()
  +DomMatrix multiplySelf()
  -DomMatrix _multiplySelf_1()
  -DomMatrix _multiplySelf_2()
  +DomMatrix preMultiplySelf()
  -DomMatrix _preMultiplySelf_1()
  -DomMatrix _preMultiplySelf_2()
  +DomMatrix rotateAxisAngleSelf()
  +DomMatrix rotateFromVectorSelf()
  +DomMatrix rotateSelf()
  +DomMatrix scale3dSelf()
  +DomMatrix scaleSelf()
  +DomMatrix setMatrixValue()
  +DomMatrix skewXSelf()
  +DomMatrix skewYSelf()
  +DomMatrix translateSelf()
}

class "lib::html::html_dart2js.dart::DomMatrixReadOnly" {
  +num? a
  +num? b
  +num? c
  +num? d
  +num? e
  +num? f
  +bool? is2D
  +bool? isIdentity
  +num? m11
  +num? m12
  +num? m13
  +num? m14
  +num? m21
  +num? m22
  +num? m23
  +num? m24
  +num? m31
  +num? m32
  +num? m33
  +num? m34
  +num? m41
  +num? m42
  +num? m43
  +num? m44
  {static} -DomMatrixReadOnly _create_1()
  {static} -DomMatrixReadOnly _create_2()
  +DomMatrix flipX()
  +DomMatrix flipY()
  {static} +DomMatrixReadOnly fromFloat32Array()
  {static} +DomMatrixReadOnly fromFloat64Array()
  {static} +DomMatrixReadOnly fromMatrix()
  {static} -DomMatrixReadOnly _fromMatrix_1()
  {static} -DomMatrixReadOnly _fromMatrix_2()
  +DomMatrix inverse()
  +DomMatrix multiply()
  -DomMatrix _multiply_1()
  -DomMatrix _multiply_2()
  +DomMatrix rotate()
  +DomMatrix rotateAxisAngle()
  +DomMatrix rotateFromVector()
  +DomMatrix scale()
  +DomMatrix scale3d()
  +DomMatrix skewX()
  +DomMatrix skewY()
  +Float32List toFloat32Array()
  +Float64List toFloat64Array()
  +DomPoint transformPoint()
  -DomPoint _transformPoint_1()
  -DomPoint _transformPoint_2()
  +DomMatrix translate()
}

class "lib::html::html_dart2js.dart::DomParser" {
  {static} -DomParser _create_1()
  +Document parseFromString()
}

class "lib::html::html_dart2js.dart::DomPoint" {
  {static} +bool supported
  +num? w
  +num? x
  +num? y
  +num? z
  {static} -DomPoint _create_1()
  {static} -DomPoint _create_2()
  {static} -DomPoint _create_3()
  {static} -DomPoint _create_4()
  {static} -DomPoint _create_5()
  {static} +DomPoint fromPoint()
  {static} -DomPoint _fromPoint_1()
  {static} -DomPoint _fromPoint_2()
}

class "lib::html::html_dart2js.dart::DomPointReadOnly" {
  +num? w
  +num? x
  +num? y
  +num? z
  {static} -DomPointReadOnly _create_1()
  {static} -DomPointReadOnly _create_2()
  {static} -DomPointReadOnly _create_3()
  {static} -DomPointReadOnly _create_4()
  {static} -DomPointReadOnly _create_5()
  {static} +DomPointReadOnly fromPoint()
  {static} -DomPointReadOnly _fromPoint_1()
  {static} -DomPointReadOnly _fromPoint_2()
  +DomPoint matrixTransform()
  -DomPoint _matrixTransform_1()
  -DomPoint _matrixTransform_2()
}

class "lib::html::html_dart2js.dart::DomQuad" {
  +DomPoint? p1
  +DomPoint? p2
  +DomPoint? p3
  +DomPoint? p4
  {static} -DomQuad _create_1()
  {static} -DomQuad _create_2()
  {static} -DomQuad _create_3()
  {static} -DomQuad _create_4()
  {static} -DomQuad _create_5()
  {static} +DomQuad fromQuad()
  {static} -DomQuad _fromQuad_1()
  {static} -DomQuad _fromQuad_2()
  {static} +DomQuad fromRect()
  {static} -DomQuad _fromRect_1()
  {static} -DomQuad _fromRect_2()
  +Rectangle<num> getBounds()
}

class "lib::html::html_dart2js.dart::DomRectList" {
  +int length
  +Rectangle<num> first
  +Rectangle<num> last
  +Rectangle<num> single
  +Rectangle<num> []()
  +void []=()
  +Rectangle<num> elementAt()
  +Rectangle<num>? item()
}

class "lib::html::html_dart2js.dart::DomRectReadOnly" {
  +int hashCode
  +Point<num> topLeft
  +Point<num> topRight
  +Point<num> bottomRight
  +Point<num> bottomLeft
  -num? _bottom
  +num bottom
  -num? _height
  +num height
  -num? _left
  +num left
  -num? _right
  +num right
  -num? _top
  +num top
  -num? _width
  +num width
  +num? x
  +num? y
  +String toString()
  +bool ==()
  +Rectangle<num>? intersection()
  +bool intersects()
  +Rectangle<num> boundingBox()
  +bool containsRectangle()
  +bool containsPoint()
  {static} -DomRectReadOnly _create_1()
  {static} -DomRectReadOnly _create_2()
  {static} -DomRectReadOnly _create_3()
  {static} -DomRectReadOnly _create_4()
  {static} -DomRectReadOnly _create_5()
  {static} +DomRectReadOnly fromRect()
  {static} -DomRectReadOnly _fromRect_1()
  {static} -DomRectReadOnly _fromRect_2()
}

class "lib::html::html_dart2js.dart::DomStringList" {
  +int length
  +String first
  +String last
  +String single
  +String []()
  +void []=()
  +String elementAt()
  +String? item()
}

class "lib::html::html_dart2js.dart::DomStringMap" {
  -void __delete__()
  -void __setter__()
  +String item()
}

class "lib::html::html_dart2js.dart::DomTokenList" {
  +int length
  +String? value
  +void add()
  +bool contains()
  +String? item()
  +void remove()
  +void replace()
  +bool supports()
  +bool toggle()
}

class "lib::html::html_dart2js.dart::_ChildrenElementList" {
  -Element _element
  -HtmlCollection _childElements
  +bool isEmpty
  +int length
  +Iterator<Element> iterator
  +Element first
  +Element last
  +Element single
  +List<Node> rawList
  +bool contains()
  +Element []()
  +void []=()
  +Element add()
  +void addAll()
  {static} -void _addAll()
  +void sort()
  +void shuffle()
  +void removeWhere()
  +void retainWhere()
  -void _filter()
  +void fillRange()
  +void replaceRange()
  +void removeRange()
  +void setRange()
  +bool remove()
  {static} -bool _remove()
  +void insert()
  +void insertAll()
  +void setAll()
  +void clear()
  +Element removeAt()
  +Element removeLast()
  {static} -Element _first()
}

abstract class "lib::html::html_dart2js.dart::ElementList" {
  +CssClassSet classes
  +CssStyleDeclarationBase style
  +CssRect contentEdge
  +CssRect paddingEdge
  +CssRect borderEdge
  +CssRect marginEdge
  +ElementStream<Event> onAbort
  +ElementStream<Event> onBeforeCopy
  +ElementStream<Event> onBeforeCut
  +ElementStream<Event> onBeforePaste
  +ElementStream<Event> onBlur
  +ElementStream<Event> onCanPlay
  +ElementStream<Event> onCanPlayThrough
  +ElementStream<Event> onChange
  +ElementStream<MouseEvent> onClick
  +ElementStream<MouseEvent> onContextMenu
  +ElementStream<ClipboardEvent> onCopy
  +ElementStream<ClipboardEvent> onCut
  +ElementStream<Event> onDoubleClick
  +ElementStream<MouseEvent> onDrag
  +ElementStream<MouseEvent> onDragEnd
  +ElementStream<MouseEvent> onDragEnter
  +ElementStream<MouseEvent> onDragLeave
  +ElementStream<MouseEvent> onDragOver
  +ElementStream<MouseEvent> onDragStart
  +ElementStream<MouseEvent> onDrop
  +ElementStream<Event> onDurationChange
  +ElementStream<Event> onEmptied
  +ElementStream<Event> onEnded
  +ElementStream<Event> onError
  +ElementStream<Event> onFocus
  +ElementStream<Event> onInput
  +ElementStream<Event> onInvalid
  +ElementStream<KeyboardEvent> onKeyDown
  +ElementStream<KeyboardEvent> onKeyPress
  +ElementStream<KeyboardEvent> onKeyUp
  +ElementStream<Event> onLoad
  +ElementStream<Event> onLoadedData
  +ElementStream<Event> onLoadedMetadata
  +ElementStream<MouseEvent> onMouseDown
  +ElementStream<MouseEvent> onMouseEnter
  +ElementStream<MouseEvent> onMouseLeave
  +ElementStream<MouseEvent> onMouseMove
  +ElementStream<MouseEvent> onMouseOut
  +ElementStream<MouseEvent> onMouseOver
  +ElementStream<MouseEvent> onMouseUp
  +ElementStream<WheelEvent> onMouseWheel
  +ElementStream<ClipboardEvent> onPaste
  +ElementStream<Event> onPause
  +ElementStream<Event> onPlay
  +ElementStream<Event> onPlaying
  +ElementStream<Event> onRateChange
  +ElementStream<Event> onReset
  +ElementStream<Event> onResize
  +ElementStream<Event> onScroll
  +ElementStream<Event> onSearch
  +ElementStream<Event> onSeeked
  +ElementStream<Event> onSeeking
  +ElementStream<Event> onSelect
  +ElementStream<Event> onSelectStart
  +ElementStream<Event> onStalled
  +ElementStream<Event> onSubmit
  +ElementStream<Event> onSuspend
  +ElementStream<Event> onTimeUpdate
  +ElementStream<TouchEvent> onTouchCancel
  +ElementStream<TouchEvent> onTouchEnd
  +ElementStream<TouchEvent> onTouchEnter
  +ElementStream<TouchEvent> onTouchLeave
  +ElementStream<TouchEvent> onTouchMove
  +ElementStream<TouchEvent> onTouchStart
  +ElementStream<TransitionEvent> onTransitionEnd
  +ElementStream<Event> onVolumeChange
  +ElementStream<Event> onWaiting
  +ElementStream<Event> onFullscreenChange
  +ElementStream<Event> onFullscreenError
  +ElementStream<WheelEvent> onWheel
}

class "lib::html::html_dart2js.dart::_FrozenElementList" {
  -List<Node> _nodeList
  +int length
  +E first
  +E last
  +E single
  +CssClassSet classes
  +CssStyleDeclarationBase style
  +CssRect contentEdge
  +CssRect paddingEdge
  +CssRect borderEdge
  +CssRect marginEdge
  +List<Node> rawList
  +ElementStream<Event> onAbort
  +ElementStream<Event> onBeforeCopy
  +ElementStream<Event> onBeforeCut
  +ElementStream<Event> onBeforePaste
  +ElementStream<Event> onBlur
  +ElementStream<Event> onCanPlay
  +ElementStream<Event> onCanPlayThrough
  +ElementStream<Event> onChange
  +ElementStream<MouseEvent> onClick
  +ElementStream<MouseEvent> onContextMenu
  +ElementStream<ClipboardEvent> onCopy
  +ElementStream<ClipboardEvent> onCut
  +ElementStream<Event> onDoubleClick
  +ElementStream<MouseEvent> onDrag
  +ElementStream<MouseEvent> onDragEnd
  +ElementStream<MouseEvent> onDragEnter
  +ElementStream<MouseEvent> onDragLeave
  +ElementStream<MouseEvent> onDragOver
  +ElementStream<MouseEvent> onDragStart
  +ElementStream<MouseEvent> onDrop
  +ElementStream<Event> onDurationChange
  +ElementStream<Event> onEmptied
  +ElementStream<Event> onEnded
  +ElementStream<Event> onError
  +ElementStream<Event> onFocus
  +ElementStream<Event> onInput
  +ElementStream<Event> onInvalid
  +ElementStream<KeyboardEvent> onKeyDown
  +ElementStream<KeyboardEvent> onKeyPress
  +ElementStream<KeyboardEvent> onKeyUp
  +ElementStream<Event> onLoad
  +ElementStream<Event> onLoadedData
  +ElementStream<Event> onLoadedMetadata
  +ElementStream<MouseEvent> onMouseDown
  +ElementStream<MouseEvent> onMouseEnter
  +ElementStream<MouseEvent> onMouseLeave
  +ElementStream<MouseEvent> onMouseMove
  +ElementStream<MouseEvent> onMouseOut
  +ElementStream<MouseEvent> onMouseOver
  +ElementStream<MouseEvent> onMouseUp
  +ElementStream<WheelEvent> onMouseWheel
  +ElementStream<ClipboardEvent> onPaste
  +ElementStream<Event> onPause
  +ElementStream<Event> onPlay
  +ElementStream<Event> onPlaying
  +ElementStream<Event> onRateChange
  +ElementStream<Event> onReset
  +ElementStream<Event> onResize
  +ElementStream<Event> onScroll
  +ElementStream<Event> onSearch
  +ElementStream<Event> onSeeked
  +ElementStream<Event> onSeeking
  +ElementStream<Event> onSelect
  +ElementStream<Event> onSelectStart
  +ElementStream<Event> onStalled
  +ElementStream<Event> onSubmit
  +ElementStream<Event> onSuspend
  +ElementStream<Event> onTimeUpdate
  +ElementStream<TouchEvent> onTouchCancel
  +ElementStream<TouchEvent> onTouchEnd
  +ElementStream<TouchEvent> onTouchEnter
  +ElementStream<TouchEvent> onTouchLeave
  +ElementStream<TouchEvent> onTouchMove
  +ElementStream<TouchEvent> onTouchStart
  +ElementStream<TransitionEvent> onTransitionEnd
  +ElementStream<Event> onVolumeChange
  +ElementStream<Event> onWaiting
  +ElementStream<Event> onFullscreenChange
  +ElementStream<Event> onFullscreenError
  +ElementStream<WheelEvent> onWheel
  +E []()
  +void []=()
  +void sort()
  +void shuffle()
}

class "lib::html::html_dart2js.dart::Element" {
  {static} +EventStreamProvider<WheelEvent> mouseWheelEvent
  {static} +EventStreamProvider<TransitionEvent> transitionEndEvent
  {static} -HtmlDocument? _parseDocument
  {static} -Range? _parseRange
  {static} -NodeValidatorBuilder? _defaultValidator
  {static} -_ValidatingTreeSanitizer? _defaultSanitizer
  {static} -List<String> _tagsForWhichCreateContextualFragmentIsNotSupported
  {static} +EventStreamProvider<Event> abortEvent
  {static} +EventStreamProvider<Event> beforeCopyEvent
  {static} +EventStreamProvider<Event> beforeCutEvent
  {static} +EventStreamProvider<Event> beforePasteEvent
  {static} +EventStreamProvider<Event> blurEvent
  {static} +EventStreamProvider<Event> canPlayEvent
  {static} +EventStreamProvider<Event> canPlayThroughEvent
  {static} +EventStreamProvider<Event> changeEvent
  {static} +EventStreamProvider<MouseEvent> clickEvent
  {static} +EventStreamProvider<MouseEvent> contextMenuEvent
  {static} +EventStreamProvider<ClipboardEvent> copyEvent
  {static} +EventStreamProvider<ClipboardEvent> cutEvent
  {static} +EventStreamProvider<Event> doubleClickEvent
  {static} +EventStreamProvider<MouseEvent> dragEvent
  {static} +EventStreamProvider<MouseEvent> dragEndEvent
  {static} +EventStreamProvider<MouseEvent> dragEnterEvent
  {static} +EventStreamProvider<MouseEvent> dragLeaveEvent
  {static} +EventStreamProvider<MouseEvent> dragOverEvent
  {static} +EventStreamProvider<MouseEvent> dragStartEvent
  {static} +EventStreamProvider<MouseEvent> dropEvent
  {static} +EventStreamProvider<Event> durationChangeEvent
  {static} +EventStreamProvider<Event> emptiedEvent
  {static} +EventStreamProvider<Event> endedEvent
  {static} +EventStreamProvider<Event> errorEvent
  {static} +EventStreamProvider<Event> focusEvent
  {static} +EventStreamProvider<Event> inputEvent
  {static} +EventStreamProvider<Event> invalidEvent
  {static} +EventStreamProvider<KeyboardEvent> keyDownEvent
  {static} +EventStreamProvider<KeyboardEvent> keyPressEvent
  {static} +EventStreamProvider<KeyboardEvent> keyUpEvent
  {static} +EventStreamProvider<Event> loadEvent
  {static} +EventStreamProvider<Event> loadedDataEvent
  {static} +EventStreamProvider<Event> loadedMetadataEvent
  {static} +EventStreamProvider<MouseEvent> mouseDownEvent
  {static} +EventStreamProvider<MouseEvent> mouseEnterEvent
  {static} +EventStreamProvider<MouseEvent> mouseLeaveEvent
  {static} +EventStreamProvider<MouseEvent> mouseMoveEvent
  {static} +EventStreamProvider<MouseEvent> mouseOutEvent
  {static} +EventStreamProvider<MouseEvent> mouseOverEvent
  {static} +EventStreamProvider<MouseEvent> mouseUpEvent
  {static} +EventStreamProvider<ClipboardEvent> pasteEvent
  {static} +EventStreamProvider<Event> pauseEvent
  {static} +EventStreamProvider<Event> playEvent
  {static} +EventStreamProvider<Event> playingEvent
  {static} +EventStreamProvider<Event> rateChangeEvent
  {static} +EventStreamProvider<Event> resetEvent
  {static} +EventStreamProvider<Event> resizeEvent
  {static} +EventStreamProvider<Event> scrollEvent
  {static} +EventStreamProvider<Event> searchEvent
  {static} +EventStreamProvider<Event> seekedEvent
  {static} +EventStreamProvider<Event> seekingEvent
  {static} +EventStreamProvider<Event> selectEvent
  {static} +EventStreamProvider<Event> selectStartEvent
  {static} +EventStreamProvider<Event> stalledEvent
  {static} +EventStreamProvider<Event> submitEvent
  {static} +EventStreamProvider<Event> suspendEvent
  {static} +EventStreamProvider<Event> timeUpdateEvent
  {static} +EventStreamProvider<TouchEvent> touchCancelEvent
  {static} +EventStreamProvider<TouchEvent> touchEndEvent
  {static} +EventStreamProvider<TouchEvent> touchEnterEvent
  {static} +EventStreamProvider<TouchEvent> touchLeaveEvent
  {static} +EventStreamProvider<TouchEvent> touchMoveEvent
  {static} +EventStreamProvider<TouchEvent> touchStartEvent
  {static} +EventStreamProvider<Event> volumeChangeEvent
  {static} +EventStreamProvider<Event> waitingEvent
  {static} +EventStreamProvider<Event> fullscreenChangeEvent
  {static} +EventStreamProvider<Event> fullscreenErrorEvent
  {static} +EventStreamProvider<WheelEvent> wheelEvent
  +Map<String, String> attributes
  +List<Element> children
  -List<Node> _children
  +CssClassSet classes
  +Map<String, String> dataset
  +Rectangle<num> client
  +Rectangle<num> offset
  +String localName
  +String? namespaceUri
  +ShadowRoot? shadowRoot
  +CssRect contentEdge
  +CssRect paddingEdge
  +CssRect borderEdge
  +CssRect marginEdge
  +Point<num> documentOffset
  -bool _canBeUsedToCreateContextualFragment
  -bool _cannotBeUsedToCreateContextualFragment
  +String? innerHtml
  +String innerText
  +ElementEvents on
  +Element? offsetParent
  +int offsetHeight
  +int offsetLeft
  +int offsetTop
  +int offsetWidth
  +int scrollHeight
  +int scrollLeft
  +int scrollTop
  +int scrollWidth
  +String contentEditable
  +String? dir
  +bool draggable
  +bool hidden
  +bool? inert
  +String? inputMode
  +bool? isContentEditable
  +String? lang
  +bool? spellcheck
  +CssStyleDeclaration style
  +int? tabIndex
  +String? title
  +bool? translate
  +AccessibleNode? accessibleNode
  +SlotElement? assignedSlot
  -_NamedNodeMap? _attributes
  +String className
  +int clientHeight
  +int? clientLeft
  +int? clientTop
  +int clientWidth
  +String? computedName
  +String? computedRole
  +String id
  -String? _innerHtml
  -String? _localName
  -String? _namespaceUri
  +String? outerHtml
  -int? _scrollHeight
  -num _scrollLeft
  -num _scrollTop
  -int? _scrollWidth
  +String? slot
  +StylePropertyMap? styleMap
  +String tagName
  +Element? nextElementSibling
  +Element? previousElementSibling
  -int _childElementCount
  -Element? _firstElementChild
  -Element? _lastElementChild
  +ElementStream<Event> onAbort
  +ElementStream<Event> onBeforeCopy
  +ElementStream<Event> onBeforeCut
  +ElementStream<Event> onBeforePaste
  +ElementStream<Event> onBlur
  +ElementStream<Event> onCanPlay
  +ElementStream<Event> onCanPlayThrough
  +ElementStream<Event> onChange
  +ElementStream<MouseEvent> onClick
  +ElementStream<MouseEvent> onContextMenu
  +ElementStream<ClipboardEvent> onCopy
  +ElementStream<ClipboardEvent> onCut
  +ElementStream<Event> onDoubleClick
  +ElementStream<MouseEvent> onDrag
  +ElementStream<MouseEvent> onDragEnd
  +ElementStream<MouseEvent> onDragEnter
  +ElementStream<MouseEvent> onDragLeave
  +ElementStream<MouseEvent> onDragOver
  +ElementStream<MouseEvent> onDragStart
  +ElementStream<MouseEvent> onDrop
  +ElementStream<Event> onDurationChange
  +ElementStream<Event> onEmptied
  +ElementStream<Event> onEnded
  +ElementStream<Event> onError
  +ElementStream<Event> onFocus
  +ElementStream<Event> onInput
  +ElementStream<Event> onInvalid
  +ElementStream<KeyboardEvent> onKeyDown
  +ElementStream<KeyboardEvent> onKeyPress
  +ElementStream<KeyboardEvent> onKeyUp
  +ElementStream<Event> onLoad
  +ElementStream<Event> onLoadedData
  +ElementStream<Event> onLoadedMetadata
  +ElementStream<MouseEvent> onMouseDown
  +ElementStream<MouseEvent> onMouseEnter
  +ElementStream<MouseEvent> onMouseLeave
  +ElementStream<MouseEvent> onMouseMove
  +ElementStream<MouseEvent> onMouseOut
  +ElementStream<MouseEvent> onMouseOver
  +ElementStream<MouseEvent> onMouseUp
  +ElementStream<WheelEvent> onMouseWheel
  +ElementStream<ClipboardEvent> onPaste
  +ElementStream<Event> onPause
  +ElementStream<Event> onPlay
  +ElementStream<Event> onPlaying
  +ElementStream<Event> onRateChange
  +ElementStream<Event> onReset
  +ElementStream<Event> onResize
  +ElementStream<Event> onScroll
  +ElementStream<Event> onSearch
  +ElementStream<Event> onSeeked
  +ElementStream<Event> onSeeking
  +ElementStream<Event> onSelect
  +ElementStream<Event> onSelectStart
  +ElementStream<Event> onStalled
  +ElementStream<Event> onSubmit
  +ElementStream<Event> onSuspend
  +ElementStream<Event> onTimeUpdate
  +ElementStream<TouchEvent> onTouchCancel
  +ElementStream<TouchEvent> onTouchEnd
  +ElementStream<TouchEvent> onTouchEnter
  +ElementStream<TouchEvent> onTouchLeave
  +ElementStream<TouchEvent> onTouchMove
  +ElementStream<TouchEvent> onTouchStart
  +ElementStream<TransitionEvent> onTransitionEnd
  +ElementStream<Event> onVolumeChange
  +ElementStream<Event> onWaiting
  +ElementStream<Event> onFullscreenChange
  +ElementStream<Event> onFullscreenError
  +ElementStream<WheelEvent> onWheel
  +String? getAttribute()
  +String? getAttributeNS()
  +bool hasAttribute()
  +bool hasAttributeNS()
  +void removeAttribute()
  +void removeAttributeNS()
  +void setAttribute()
  +void setAttributeNS()
  +ElementList<T> querySelectorAll()
  -void _setApplyScroll()
  +dynamic setApplyScroll()
  -void _setDistributeScroll()
  +dynamic setDistributeScroll()
  +Map<String, String> getNamespacedAttributes()
  +CssStyleDeclaration getComputedStyle()
  +void appendText()
  +void appendHtml()
  {static} +bool isTagSupported()
  +void attached()
  +void detached()
  +void enteredView()
  +List<Rectangle<num>> getClientRects()
  +void leftView()
  +Animation animate()
  -Animation _animate()
  +void attributeChanged()
  +String toString()
  +void scrollIntoView()
  {static} -String _determineMouseWheelEventType()
  {static} -String _determineTransitionEventType()
  +void insertAdjacentText()
  -void _insertAdjacentText()
  +void insertAdjacentHtml()
  -void _insertAdjacentHtml()
  +Element insertAdjacentElement()
  -void _insertAdjacentElement()
  -void _insertAdjacentNode()
  +bool matches()
  +bool matchesWithAncestors()
  +ShadowRoot createShadowRoot()
  +Point<num> offsetTo()
  {static} -Point<num> _offsetToHelper()
  +DocumentFragment createFragment()
  +void setInnerHtml()
  {static} -bool _hasCorruptedAttributes()
  {static} -bool _hasCorruptedAttributesAdditionalCheck()
  {static} -String _safeTagName()
  +dynamic requestFullscreen()
  +void blur()
  +void click()
  +void focus()
  +ShadowRoot attachShadow()
  -ShadowRoot _attachShadow_1()
  +Element? closest()
  +List<Animation> getAnimations()
  -String? _getAttribute()
  -String? _getAttributeNS()
  +List<String> getAttributeNames()
  +Rectangle<num> getBoundingClientRect()
  -List<Rectangle<num>> _getClientRects()
  +List<Node> getDestinationInsertionPoints()
  +List<Node> getElementsByClassName()
  -List<Node> _getElementsByTagName()
  -bool _hasAttribute()
  -bool _hasAttributeNS()
  +bool hasPointerCapture()
  +void releasePointerCapture()
  -void _removeAttribute()
  -void _removeAttributeNS()
  +void requestPointerLock()
  +void scroll()
  -void _scroll_1()
  -void _scroll_2()
  -void _scroll_3()
  +void scrollBy()
  -void _scrollBy_1()
  -void _scrollBy_2()
  -void _scrollBy_3()
  -void _scrollIntoView()
  +void scrollIntoViewIfNeeded()
  +void scrollTo()
  -void _scrollTo_1()
  -void _scrollTo_2()
  -void _scrollTo_3()
  -void _setAttribute()
  -void _setAttributeNS()
  +void setPointerCapture()
  +void after()
  +void before()
  +Element? querySelector()
  -List<Node> _querySelectorAll()
}

class "lib::html::html_dart2js.dart::_ElementFactoryProvider" {
  {static} +dynamic createElement_tag()
}

class "lib::html::html_dart2js.dart::ScrollAlignment" {
  -dynamic _value
  {static} +ScrollAlignment TOP
  {static} +ScrollAlignment CENTER
  {static} +ScrollAlignment BOTTOM
  +String toString()
}

class "lib::html::html_dart2js.dart::EmbedElement" {
  {static} +bool supported
  +String height
  +String? name
  +String src
  +String type
  +String width
  -Node __getter__()
  -void __setter__()
}

class "lib::html::html_dart2js.dart::Entry" {
  +FileSystem? filesystem
  +String? fullPath
  +bool? isDirectory
  +bool? isFile
  +String? name
  -void _copyTo()
  +dynamic copyTo()
  -void _getMetadata()
  +dynamic getMetadata()
  -void _getParent()
  +dynamic getParent()
  -void _moveTo()
  +dynamic moveTo()
  -void _remove()
  +dynamic remove()
  +String toUrl()
}

class "lib::html::html_dart2js.dart::ErrorEvent" {
  +int? colno
  +Object? error
  +String? filename
  +int? lineno
  +String? message
  {static} -ErrorEvent _create_1()
  {static} -ErrorEvent _create_2()
}

class "lib::html::html_dart2js.dart::Event" {
  {static} +int AT_TARGET
  {static} +int BUBBLING_PHASE
  {static} +int CAPTURING_PHASE
  -String? _selector
  +Element matchingTarget
  +List<EventTarget> path
  +bool? bubbles
  +bool? cancelable
  +bool? composed
  +EventTarget? currentTarget
  -dynamic _get_currentTarget
  +bool defaultPrevented
  +int eventPhase
  +bool? isTrusted
  +EventTarget? target
  -dynamic _get_target
  +num? timeStamp
  +String type
  {static} -Event _create_1()
  {static} -Event _create_2()
  +List<EventTarget> composedPath()
  -void _initEvent()
  +void preventDefault()
  +void stopImmediatePropagation()
  +void stopPropagation()
}

class "lib::html::html_dart2js.dart::EventSource" {
  {static} +EventStreamProvider<Event> errorEvent
  {static} +EventStreamProvider<MessageEvent> messageEvent
  {static} +EventStreamProvider<Event> openEvent
  {static} +int CLOSED
  {static} +int CONNECTING
  {static} +int OPEN
  +int? readyState
  +String? url
  +bool? withCredentials
  +Stream<Event> onError
  +Stream<MessageEvent> onMessage
  +Stream<Event> onOpen
  {static} -EventSource _factoryEventSource()
  {static} -EventSource _create_1()
  {static} -EventSource _create_2()
  +void close()
}

class "lib::html::html_dart2js.dart::Events" {
  -EventTarget _ptr
  +Stream<Event> []()
}

class "lib::html::html_dart2js.dart::ElementEvents" {
  {static} +Map<String, String> webkitEvents
  +Stream<Event> []()
}

class "lib::html::html_dart2js.dart::EventTarget" {
  +Events on
  +void addEventListener()
  +void removeEventListener()
  -void _addEventListener()
  +bool dispatchEvent()
  -void _removeEventListener()
}

class "lib::html::html_dart2js.dart::ExtendableEvent" {
  {static} -ExtendableEvent _create_1()
  {static} -ExtendableEvent _create_2()
  +void waitUntil()
}

class "lib::html::html_dart2js.dart::ExtendableMessageEvent" {
  +Object? data
  +String? lastEventId
  +String? origin
  +List<MessagePort>? ports
  +Object? source
}

class "lib::html::html_dart2js.dart::External" {
  +void AddSearchProvider()
  +void IsSearchProviderInstalled()
}

class "lib::html::html_dart2js.dart::FaceDetector" {
  {static} -FaceDetector _create_1()
  {static} -FaceDetector _create_2()
  +dynamic detect()
}

class "lib::html::html_dart2js.dart::FederatedCredential" {
  +String? protocol
  +String? provider
  +String? iconUrl
  +String? name
  {static} -FederatedCredential _create_1()
}

class "lib::html::html_dart2js.dart::FetchEvent" {
  +String? clientId
  +bool? isReload
  +dynamic preloadResponse
  +_Request? request
  {static} -FetchEvent _create_1()
  +void respondWith()
}

class "lib::html::html_dart2js.dart::FieldSetElement" {
  +bool? disabled
  +List<Node>? elements
  +FormElement? form
  +String name
  +String type
  +String validationMessage
  +ValidityState validity
  +bool willValidate
  +bool checkValidity()
  +bool reportValidity()
  +void setCustomValidity()
}

class "lib::html::html_dart2js.dart::File" {
  +int? lastModified
  +DateTime lastModifiedDate
  -dynamic _get_lastModifiedDate
  +String name
  +String? relativePath
  {static} -File _create_1()
  {static} -File _create_2()
}

class "lib::html::html_dart2js.dart::FileEntry" {
  -void _createWriter()
  +dynamic createWriter()
  -void _file()
  +dynamic file()
}

class "lib::html::html_dart2js.dart::FileList" {
  +int length
  +File first
  +File last
  +File single
  +File []()
  +void []=()
  +File elementAt()
  +File? item()
}

class "lib::html::html_dart2js.dart::FileReader" {
  {static} +EventStreamProvider<ProgressEvent> abortEvent
  {static} +EventStreamProvider<ProgressEvent> errorEvent
  {static} +EventStreamProvider<ProgressEvent> loadEvent
  {static} +EventStreamProvider<ProgressEvent> loadEndEvent
  {static} +EventStreamProvider<ProgressEvent> loadStartEvent
  {static} +EventStreamProvider<ProgressEvent> progressEvent
  {static} +int DONE
  {static} +int EMPTY
  {static} +int LOADING
  +Object? result
  +DomException? error
  +int readyState
  +Stream<ProgressEvent> onAbort
  +Stream<ProgressEvent> onError
  +Stream<ProgressEvent> onLoad
  +Stream<ProgressEvent> onLoadEnd
  +Stream<ProgressEvent> onLoadStart
  +Stream<ProgressEvent> onProgress
  {static} -FileReader _create_1()
  +void abort()
  +void readAsArrayBuffer()
  +void readAsDataUrl()
  +void readAsText()
}

class "lib::html::html_dart2js.dart::FileSystem" {
  {static} +bool supported
  +String? name
  +DirectoryEntry? root
}

class "lib::html::html_dart2js.dart::FileWriter" {
  {static} +EventStreamProvider<ProgressEvent> abortEvent
  {static} +EventStreamProvider<Event> errorEvent
  {static} +EventStreamProvider<ProgressEvent> progressEvent
  {static} +EventStreamProvider<ProgressEvent> writeEvent
  {static} +EventStreamProvider<ProgressEvent> writeEndEvent
  {static} +EventStreamProvider<ProgressEvent> writeStartEvent
  {static} +int DONE
  {static} +int INIT
  {static} +int WRITING
  +DomException? error
  +int? length
  +int? position
  +int? readyState
  +Stream<ProgressEvent> onAbort
  +Stream<Event> onError
  +Stream<ProgressEvent> onProgress
  +Stream<ProgressEvent> onWrite
  +Stream<ProgressEvent> onWriteEnd
  +Stream<ProgressEvent> onWriteStart
  +void abort()
  +void seek()
  +void truncate()
  +void write()
}

class "lib::html::html_dart2js.dart::FocusEvent" {
  +EventTarget? relatedTarget
  -dynamic _get_relatedTarget
  {static} -FocusEvent _create_1()
  {static} -FocusEvent _create_2()
}

class "lib::html::html_dart2js.dart::FontFace" {
  +String? display
  +String? family
  +String? featureSettings
  +dynamic loaded
  +String? status
  +String? stretch
  +String? style
  +String? unicodeRange
  +String? variant
  +String? weight
  {static} -FontFace _create_1()
  {static} -FontFace _create_2()
  +dynamic load()
}

class "lib::html::html_dart2js.dart::FontFaceSet" {
  {static} +EventStreamProvider<FontFaceSetLoadEvent> loadingEvent
  {static} +EventStreamProvider<FontFaceSetLoadEvent> loadingDoneEvent
  {static} +EventStreamProvider<FontFaceSetLoadEvent> loadingErrorEvent
  +String? status
  +Stream<FontFaceSetLoadEvent> onLoading
  +Stream<FontFaceSetLoadEvent> onLoadingDone
  +Stream<FontFaceSetLoadEvent> onLoadingError
  +FontFaceSet? add()
  +bool check()
  +void clear()
  +bool delete()
  +void forEach()
  +bool has()
}

class "lib::html::html_dart2js.dart::FontFaceSetLoadEvent" {
  +List<FontFace>? fontfaces
  {static} -FontFaceSetLoadEvent _create_1()
  {static} -FontFaceSetLoadEvent _create_2()
}

class "lib::html::html_dart2js.dart::FontFaceSource" {
  +FontFaceSet? fonts
}

class "lib::html::html_dart2js.dart::ForeignFetchEvent" {
  +String? origin
  +_Request? request
  {static} -ForeignFetchEvent _create_1()
  +void respondWith()
}

class "lib::html::html_dart2js.dart::FormData" {
  {static} +bool supported
  {static} -FormData _create_1()
  {static} -FormData _create_2()
  +void append()
  +void appendBlob()
  +void delete()
  +Object? get()
  +List<Object> getAll()
  +bool has()
  +void set()
}

class "lib::html::html_dart2js.dart::FormElement" {
  +String? acceptCharset
  +String? action
  +String? autocomplete
  +String? encoding
  +String? enctype
  +int? length
  +String? method
  +String? name
  +bool? noValidate
  +String? target
  -Object? __getter__()
  +bool checkValidity()
  +Element item()
  +bool reportValidity()
  +void requestAutocomplete()
  -void _requestAutocomplete_1()
  +void reset()
  +void submit()
}

class "lib::html::html_dart2js.dart::Gamepad" {
  +List<num>? axes
  +List<GamepadButton>? buttons
  +bool? connected
  +int? displayId
  +String? hand
  +String? id
  +int? index
  +String? mapping
  +GamepadPose? pose
  +int? timestamp
}

class "lib::html::html_dart2js.dart::GamepadButton" {
  +bool? pressed
  +bool? touched
  +num? value
}

class "lib::html::html_dart2js.dart::GamepadEvent" {
  +Gamepad? gamepad
  {static} -GamepadEvent _create_1()
  {static} -GamepadEvent _create_2()
}

class "lib::html::html_dart2js.dart::GamepadPose" {
  +Float32List? angularAcceleration
  +Float32List? angularVelocity
  +bool? hasOrientation
  +bool? hasPosition
  +Float32List? linearAcceleration
  +Float32List? linearVelocity
  +Float32List? orientation
  +Float32List? position
}

class "lib::html::html_dart2js.dart::Geolocation" {
  +dynamic getCurrentPosition()
  +Stream<Geoposition> watchPosition()
  -Geoposition _ensurePosition()
  -void _clearWatch()
  -void _getCurrentPosition()
  -void _getCurrentPosition_1()
  -void _getCurrentPosition_2()
  -void _getCurrentPosition_3()
  -int _watchPosition()
  -int _watchPosition_1()
  -int _watchPosition_2()
  -int _watchPosition_3()
}

class "lib::html::html_dart2js.dart::_GeopositionWrapper" {
  -dynamic _ptr
  +Coordinates coords
  +int timestamp
}

class "lib::html::html_dart2js.dart::Geoposition" {
  +Coordinates? coords
  +int? timestamp
}

abstract class "lib::html::html_dart2js.dart::GlobalEventHandlers" {
  {static} +EventStreamProvider<Event> abortEvent
  {static} +EventStreamProvider<Event> blurEvent
  {static} +EventStreamProvider<Event> canPlayEvent
  {static} +EventStreamProvider<Event> canPlayThroughEvent
  {static} +EventStreamProvider<Event> changeEvent
  {static} +EventStreamProvider<MouseEvent> clickEvent
  {static} +EventStreamProvider<MouseEvent> contextMenuEvent
  {static} +EventStreamProvider<Event> doubleClickEvent
  {static} +EventStreamProvider<MouseEvent> dragEvent
  {static} +EventStreamProvider<MouseEvent> dragEndEvent
  {static} +EventStreamProvider<MouseEvent> dragEnterEvent
  {static} +EventStreamProvider<MouseEvent> dragLeaveEvent
  {static} +EventStreamProvider<MouseEvent> dragOverEvent
  {static} +EventStreamProvider<MouseEvent> dragStartEvent
  {static} +EventStreamProvider<MouseEvent> dropEvent
  {static} +EventStreamProvider<Event> durationChangeEvent
  {static} +EventStreamProvider<Event> emptiedEvent
  {static} +EventStreamProvider<Event> endedEvent
  {static} +EventStreamProvider<Event> errorEvent
  {static} +EventStreamProvider<Event> focusEvent
  {static} +EventStreamProvider<Event> inputEvent
  {static} +EventStreamProvider<Event> invalidEvent
  {static} +EventStreamProvider<KeyboardEvent> keyDownEvent
  {static} +EventStreamProvider<KeyboardEvent> keyPressEvent
  {static} +EventStreamProvider<KeyboardEvent> keyUpEvent
  {static} +EventStreamProvider<Event> loadEvent
  {static} +EventStreamProvider<Event> loadedDataEvent
  {static} +EventStreamProvider<Event> loadedMetadataEvent
  {static} +EventStreamProvider<MouseEvent> mouseDownEvent
  {static} +EventStreamProvider<MouseEvent> mouseEnterEvent
  {static} +EventStreamProvider<MouseEvent> mouseLeaveEvent
  {static} +EventStreamProvider<MouseEvent> mouseMoveEvent
  {static} +EventStreamProvider<MouseEvent> mouseOutEvent
  {static} +EventStreamProvider<MouseEvent> mouseOverEvent
  {static} +EventStreamProvider<MouseEvent> mouseUpEvent
  {static} +EventStreamProvider<WheelEvent> mouseWheelEvent
  {static} +EventStreamProvider<Event> pauseEvent
  {static} +EventStreamProvider<Event> playEvent
  {static} +EventStreamProvider<Event> playingEvent
  {static} +EventStreamProvider<Event> rateChangeEvent
  {static} +EventStreamProvider<Event> resetEvent
  {static} +EventStreamProvider<Event> resizeEvent
  {static} +EventStreamProvider<Event> scrollEvent
  {static} +EventStreamProvider<Event> seekedEvent
  {static} +EventStreamProvider<Event> seekingEvent
  {static} +EventStreamProvider<Event> selectEvent
  {static} +EventStreamProvider<Event> stalledEvent
  {static} +EventStreamProvider<Event> submitEvent
  {static} +EventStreamProvider<Event> suspendEvent
  {static} +EventStreamProvider<Event> timeUpdateEvent
  {static} +EventStreamProvider<TouchEvent> touchCancelEvent
  {static} +EventStreamProvider<TouchEvent> touchEndEvent
  {static} +EventStreamProvider<TouchEvent> touchMoveEvent
  {static} +EventStreamProvider<TouchEvent> touchStartEvent
  {static} +EventStreamProvider<Event> volumeChangeEvent
  {static} +EventStreamProvider<Event> waitingEvent
  {static} +EventStreamProvider<WheelEvent> wheelEvent
  +Events on
  +Stream<Event> onAbort
  +Stream<Event> onBlur
  +Stream<Event> onCanPlay
  +Stream<Event> onCanPlayThrough
  +Stream<Event> onChange
  +Stream<MouseEvent> onClick
  +Stream<MouseEvent> onContextMenu
  +Stream<Event> onDoubleClick
  +Stream<MouseEvent> onDrag
  +Stream<MouseEvent> onDragEnd
  +Stream<MouseEvent> onDragEnter
  +Stream<MouseEvent> onDragLeave
  +Stream<MouseEvent> onDragOver
  +Stream<MouseEvent> onDragStart
  +Stream<MouseEvent> onDrop
  +Stream<Event> onDurationChange
  +Stream<Event> onEmptied
  +Stream<Event> onEnded
  +Stream<Event> onError
  +Stream<Event> onFocus
  +Stream<Event> onInput
  +Stream<Event> onInvalid
  +Stream<KeyboardEvent> onKeyDown
  +Stream<KeyboardEvent> onKeyPress
  +Stream<KeyboardEvent> onKeyUp
  +Stream<Event> onLoad
  +Stream<Event> onLoadedData
  +Stream<Event> onLoadedMetadata
  +Stream<MouseEvent> onMouseDown
  +Stream<MouseEvent> onMouseEnter
  +Stream<MouseEvent> onMouseLeave
  +Stream<MouseEvent> onMouseMove
  +Stream<MouseEvent> onMouseOut
  +Stream<MouseEvent> onMouseOver
  +Stream<MouseEvent> onMouseUp
  +Stream<WheelEvent> onMouseWheel
  +Stream<Event> onPause
  +Stream<Event> onPlay
  +Stream<Event> onPlaying
  +Stream<Event> onRateChange
  +Stream<Event> onReset
  +Stream<Event> onResize
  +Stream<Event> onScroll
  +Stream<Event> onSeeked
  +Stream<Event> onSeeking
  +Stream<Event> onSelect
  +Stream<Event> onStalled
  +Stream<Event> onSubmit
  +Stream<Event> onSuspend
  +Stream<Event> onTimeUpdate
  +Stream<TouchEvent> onTouchCancel
  +Stream<TouchEvent> onTouchEnd
  +Stream<TouchEvent> onTouchMove
  +Stream<TouchEvent> onTouchStart
  +Stream<Event> onVolumeChange
  +Stream<Event> onWaiting
  +Stream<WheelEvent> onWheel
  +void addEventListener()
  +bool dispatchEvent()
  +void removeEventListener()
}

class "lib::html::html_dart2js.dart::Gyroscope" {
  +num? x
  +num? y
  +num? z
  {static} -Gyroscope _create_1()
  {static} -Gyroscope _create_2()
}

class "lib::html::html_dart2js.dart::HRElement" {
  +String color
}

class "lib::html::html_dart2js.dart::HashChangeEvent" {
  {static} +bool supported
  +String? newUrl
  +String? oldUrl
  {static} -HashChangeEvent _create_1()
  {static} -HashChangeEvent _create_2()
}

class "lib::html::html_dart2js.dart::HeadElement" {
}

class "lib::html::html_dart2js.dart::Headers" {
  {static} -Headers _create_1()
  {static} -Headers _create_2()
}

class "lib::html::html_dart2js.dart::HeadingElement" {
}

class "lib::html::html_dart2js.dart::History" {
  {static} +bool supportsState
  +int length
  +String? scrollRestoration
  +dynamic state
  -dynamic _get_state
  +void back()
  +void forward()
  +void go()
  +void pushState()
  -void _pushState_1()
  +void replaceState()
  -void _replaceState_1()
}

class "lib::html::html_dart2js.dart::HtmlCollection" {
  +int length
  +Node first
  +Node last
  +Node single
  +Node []()
  +void []=()
  +Node elementAt()
  +Node? item()
  +Object? namedItem()
}

class "lib::html::html_dart2js.dart::HtmlDocument" {
  {static} +EventStreamProvider<Event> visibilityChangeEvent
  +BodyElement? body
  +HeadElement? head
  +String? lastModified
  +String? preferredStylesheetSet
  +String referrer
  +String? selectedStylesheetSet
  +List<StyleSheet>? styleSheets
  +String title
  +Stream<Event> onVisibilityChange
  +Range caretRangeFromPoint()
  +Element? elementFromPoint()
  +void exitFullscreen()
  {static} -String _determineVisibilityChangeEventType()
  +ElementUpgrader createElementUpgrader()
}

class "lib::html::html_dart2js.dart::HtmlFormControlsCollection" {
  +Object? namedItem()
}

class "lib::html::html_dart2js.dart::HtmlHtmlElement" {
}

class "lib::html::html_dart2js.dart::HtmlHyperlinkElementUtils" {
  +String? hash
  +String? host
  +String? hostname
  +String? href
  +String? origin
  +String? password
  +String? pathname
  +String? port
  +String? protocol
  +String? search
  +String? username
}

class "lib::html::html_dart2js.dart::HtmlOptionsCollection" {
  -Element? _item()
}

class "lib::html::html_dart2js.dart::HttpRequest" {
  {static} +EventStreamProvider<Event> readyStateChangeEvent
  {static} +int DONE
  {static} +int HEADERS_RECEIVED
  {static} +int LOADING
  {static} +int OPENED
  {static} +int UNSENT
  {static} +bool supportsProgressEvent
  {static} +bool supportsCrossOrigin
  {static} +bool supportsLoadEndEvent
  {static} +bool supportsOverrideMimeType
  +Map<String, String> responseHeaders
  +int readyState
  +dynamic response
  -dynamic _get_response
  +String? responseText
  +String responseType
  +String? responseUrl
  +Document? responseXml
  +int? status
  +String? statusText
  +int? timeout
  +HttpRequestUpload upload
  +bool? withCredentials
  +Stream<Event> onReadyStateChange
  {static} +dynamic getString()
  {static} +dynamic postFormData()
  {static} +dynamic request()
  {static} +dynamic requestCrossOrigin()
  +void open()
  {static} -HttpRequest _create_1()
  +void abort()
  +String getAllResponseHeaders()
  +String? getResponseHeader()
  +void overrideMimeType()
  +void send()
  +void setRequestHeader()
}

class "lib::html::html_dart2js.dart::HttpRequestEventTarget" {
  {static} +EventStreamProvider<ProgressEvent> abortEvent
  {static} +EventStreamProvider<ProgressEvent> errorEvent
  {static} +EventStreamProvider<ProgressEvent> loadEvent
  {static} +EventStreamProvider<ProgressEvent> loadEndEvent
  {static} +EventStreamProvider<ProgressEvent> loadStartEvent
  {static} +EventStreamProvider<ProgressEvent> progressEvent
  {static} +EventStreamProvider<ProgressEvent> timeoutEvent
  +Stream<ProgressEvent> onAbort
  +Stream<ProgressEvent> onError
  +Stream<ProgressEvent> onLoad
  +Stream<ProgressEvent> onLoadEnd
  +Stream<ProgressEvent> onLoadStart
  +Stream<ProgressEvent> onProgress
  +Stream<ProgressEvent> onTimeout
}

class "lib::html::html_dart2js.dart::HttpRequestUpload" {
}

class "lib::html::html_dart2js.dart::IFrameElement" {
  +String? allow
  +bool? allowFullscreen
  +bool? allowPaymentRequest
  +WindowBase? contentWindow
  -dynamic _get_contentWindow
  +String? csp
  +String? height
  +String? name
  +String? referrerPolicy
  +DomTokenList? sandbox
  +String? src
  +String? srcdoc
  +String? width
}

class "lib::html::html_dart2js.dart::IdleDeadline" {
  +bool? didTimeout
  +double timeRemaining()
}

class "lib::html::html_dart2js.dart::ImageBitmap" {
  +int? height
  +int? width
  +void close()
}

class "lib::html::html_dart2js.dart::ImageBitmapRenderingContext" {
  +CanvasElement? canvas
  +void transferFromImageBitmap()
}

class "lib::html::html_dart2js.dart::ImageCapture" {
  +MediaStreamTrack? track
  {static} -ImageCapture _create_1()
  +dynamic getPhotoCapabilities()
  +dynamic getPhotoSettings()
  +dynamic grabFrame()
  +dynamic setOptions()
  +dynamic takePhoto()
}

class "lib::html::html_dart2js.dart::ImageData" {
  +Uint8ClampedList data
  +int height
  +int width
  {static} -ImageData _create_1()
  {static} -ImageData _create_2()
  {static} -ImageData _create_3()
}

class "lib::html::html_dart2js.dart::ImageElement" {
  +String? alt
  +String? async
  +bool? complete
  +String? crossOrigin
  +String? currentSrc
  +int? height
  +bool? isMap
  +int naturalHeight
  +int naturalWidth
  +String? referrerPolicy
  +String? sizes
  +String? src
  +String? srcset
  +String? useMap
  +int? width
  +dynamic decode()
}

class "lib::html::html_dart2js.dart::InputDeviceCapabilities" {
  +bool? firesTouchEvents
  {static} -InputDeviceCapabilities _create_1()
  {static} -InputDeviceCapabilities _create_2()
}

class "lib::html::html_dart2js.dart::InputElement" {
  +String? accept
  +String? alt
  +String? autocapitalize
  +String autocomplete
  +bool autofocus
  +String? capture
  +bool? checked
  +bool? defaultChecked
  +String? defaultValue
  +String? dirName
  +bool? disabled
  +List<File>? files
  +FormElement? form
  +String formAction
  +String formEnctype
  +String formMethod
  +bool formNoValidate
  +String formTarget
  +int? height
  +bool? incremental
  +bool? indeterminate
  +List<Node>? labels
  +HtmlElement? list
  +String? max
  +int? maxLength
  +String? min
  +int? minLength
  +bool? multiple
  +String? name
  +String pattern
  +String placeholder
  +bool? readOnly
  +bool required
  +String? selectionDirection
  +int? selectionEnd
  +int? selectionStart
  +int? size
  +String? src
  +String? step
  +String? type
  +String validationMessage
  +ValidityState validity
  +String? value
  +DateTime valueAsDate
  -dynamic _get_valueAsDate
  -dynamic _set_valueAsDate
  +num? valueAsNumber
  +List<Entry>? entries
  +bool? directory
  +int? width
  +bool willValidate
  +bool checkValidity()
  +bool reportValidity()
  +void select()
  +void setCustomValidity()
  +void setRangeText()
  +void setSelectionRange()
  +void stepDown()
  +void stepUp()
}

abstract class "lib::html::html_dart2js.dart::InputElementBase" {
  +bool autofocus
  +bool? disabled
  +bool? incremental
  +bool? indeterminate
  +String? name
  +String? value
  +List<Node>? labels
  +String validationMessage
  +ValidityState validity
  +bool willValidate
  +bool checkValidity()
  +void setCustomValidity()
}

abstract class "lib::html::html_dart2js.dart::HiddenInputElement" {
}

abstract class "lib::html::html_dart2js.dart::TextInputElementBase" {
  +String autocomplete
  +int? maxLength
  +String pattern
  +String placeholder
  +bool? readOnly
  +bool required
  +int? size
  +String? selectionDirection
  +int? selectionEnd
  +int? selectionStart
  +void select()
  +void setSelectionRange()
}

abstract class "lib::html::html_dart2js.dart::SearchInputElement" {
  +String? dirName
  +Element? list
  {static} +bool supported
}

abstract class "lib::html::html_dart2js.dart::TextInputElement" {
  +String? dirName
  +Element? list
}

abstract class "lib::html::html_dart2js.dart::UrlInputElement" {
  +Element? list
  {static} +bool supported
}

abstract class "lib::html::html_dart2js.dart::TelephoneInputElement" {
  +Element? list
  {static} +bool supported
}

abstract class "lib::html::html_dart2js.dart::EmailInputElement" {
  +String autocomplete
  +bool autofocus
  +Element? list
  +int? maxLength
  +bool? multiple
  +String pattern
  +String placeholder
  +bool? readOnly
  +bool required
  +int? size
  {static} +bool supported
}

abstract class "lib::html::html_dart2js.dart::PasswordInputElement" {
}

abstract class "lib::html::html_dart2js.dart::RangeInputElementBase" {
  +Element? list
  +String? max
  +String? min
  +String? step
  +num? valueAsNumber
  +void stepDown()
  +void stepUp()
}

abstract class "lib::html::html_dart2js.dart::DateInputElement" {
  +DateTime valueAsDate
  +bool? readOnly
  +bool required
  {static} +bool supported
}

abstract class "lib::html::html_dart2js.dart::MonthInputElement" {
  +DateTime valueAsDate
  +bool? readOnly
  +bool required
  {static} +bool supported
}

abstract class "lib::html::html_dart2js.dart::WeekInputElement" {
  +DateTime valueAsDate
  +bool? readOnly
  +bool required
  {static} +bool supported
}

abstract class "lib::html::html_dart2js.dart::TimeInputElement" {
  +DateTime valueAsDate
  +bool? readOnly
  +bool required
  {static} +bool supported
}

abstract class "lib::html::html_dart2js.dart::LocalDateTimeInputElement" {
  +bool? readOnly
  +bool required
  {static} +bool supported
}

abstract class "lib::html::html_dart2js.dart::NumberInputElement" {
  +String placeholder
  +bool? readOnly
  +bool required
  {static} +bool supported
}

abstract class "lib::html::html_dart2js.dart::RangeInputElement" {
  {static} +bool supported
}

abstract class "lib::html::html_dart2js.dart::CheckboxInputElement" {
  +bool? checked
  +bool required
}

abstract class "lib::html::html_dart2js.dart::RadioButtonInputElement" {
  +bool? checked
  +bool required
}

abstract class "lib::html::html_dart2js.dart::FileUploadInputElement" {
  +List<File>? files
  +String? accept
  +bool? multiple
  +bool required
}

abstract class "lib::html::html_dart2js.dart::SubmitButtonInputElement" {
  +String formAction
  +String formEnctype
  +String formMethod
  +bool formNoValidate
  +String formTarget
}

abstract class "lib::html::html_dart2js.dart::ImageButtonInputElement" {
  +String? alt
  +String formAction
  +String formEnctype
  +String formMethod
  +bool formNoValidate
  +String formTarget
  +int? height
  +String? src
  +int? width
}

abstract class "lib::html::html_dart2js.dart::ResetButtonInputElement" {
}

abstract class "lib::html::html_dart2js.dart::ButtonInputElement" {
}

class "lib::html::html_dart2js.dart::InstallEvent" {
  {static} -InstallEvent _create_1()
  {static} -InstallEvent _create_2()
  +void registerForeignFetch()
  -void _registerForeignFetch_1()
}

class "lib::html::html_dart2js.dart::IntersectionObserver" {
  +Element? root
  +String? rootMargin
  +List<num>? thresholds
  {static} -IntersectionObserver _create_1()
  {static} -IntersectionObserver _create_2()
  +void disconnect()
  +void observe()
  +List<IntersectionObserverEntry> takeRecords()
  +void unobserve()
}

class "lib::html::html_dart2js.dart::IntersectionObserverEntry" {
  +DomRectReadOnly? boundingClientRect
  +num? intersectionRatio
  +DomRectReadOnly? intersectionRect
  +bool? isIntersecting
  +DomRectReadOnly? rootBounds
  +Element? target
  +num? time
}

class "lib::html::html_dart2js.dart::InterventionReport" {
  +int? lineNumber
  +String? message
  +String? sourceFile
}

class "lib::html::html_dart2js.dart::KeyboardEvent" {
  {static} +int DOM_KEY_LOCATION_LEFT
  {static} +int DOM_KEY_LOCATION_NUMPAD
  {static} +int DOM_KEY_LOCATION_RIGHT
  {static} +int DOM_KEY_LOCATION_STANDARD
  +int keyCode
  +int charCode
  +int? which
  +bool altKey
  -int _charCode
  +String? code
  +bool ctrlKey
  +bool? isComposing
  +String? key
  -int _keyCode
  +int location
  +bool metaKey
  +bool? repeat
  +bool shiftKey
  -void _initKeyboardEvent()
  {static} -KeyboardEvent _create_1()
  {static} -KeyboardEvent _create_2()
  +bool getModifierState()
}

class "lib::html::html_dart2js.dart::KeyframeEffect" {
  {static} -KeyframeEffect _create_1()
  {static} -KeyframeEffect _create_2()
}

class "lib::html::html_dart2js.dart::KeyframeEffectReadOnly" {
  {static} -KeyframeEffectReadOnly _create_1()
  {static} -KeyframeEffectReadOnly _create_2()
}

class "lib::html::html_dart2js.dart::LIElement" {
  +int value
}

class "lib::html::html_dart2js.dart::LabelElement" {
  +HtmlElement? control
  +FormElement? form
  +String htmlFor
}

class "lib::html::html_dart2js.dart::LegendElement" {
  +FormElement? form
}

class "lib::html::html_dart2js.dart::LinearAccelerationSensor" {
  {static} -LinearAccelerationSensor _create_1()
  {static} -LinearAccelerationSensor _create_2()
}

class "lib::html::html_dart2js.dart::LinkElement" {
  +String? as
  +String? crossOrigin
  +bool? disabled
  +String href
  +String hreflang
  +Document? import
  +String? integrity
  +String media
  +String? referrerPolicy
  +String rel
  +DomTokenList? relList
  +String? scope
  +StyleSheet? sheet
  +DomTokenList? sizes
  +String type
  +bool supportsImport
}

class "lib::html::html_dart2js.dart::Location" {
  +List<String>? ancestorOrigins
  +String hash
  +String host
  +String? hostname
  +String href
  +String? pathname
  +String port
  +String protocol
  +String? search
  +TrustedUrl? trustedHref
  +String origin
  +void assign()
  +void reload()
  +void replace()
  +String toString()
}

class "lib::html::html_dart2js.dart::Magnetometer" {
  +num? x
  +num? y
  +num? z
  {static} -Magnetometer _create_1()
  {static} -Magnetometer _create_2()
}

class "lib::html::html_dart2js.dart::MapElement" {
  +List<Node> areas
  +String name
}

class "lib::html::html_dart2js.dart::MathMLElement" {
}

class "lib::html::html_dart2js.dart::MediaCapabilities" {
  +dynamic decodingInfo()
  +dynamic encodingInfo()
}

class "lib::html::html_dart2js.dart::MediaCapabilitiesInfo" {
  +bool? powerEfficient
  +bool? smooth
  +bool? supported
}

class "lib::html::html_dart2js.dart::MediaDeviceInfo" {
  +String? deviceId
  +String? groupId
  +String? kind
  +String? label
}

class "lib::html::html_dart2js.dart::MediaDevices" {
  +dynamic enumerateDevices()
  +Map<dynamic, dynamic> getSupportedConstraints()
  -dynamic _getSupportedConstraints_1()
  +dynamic getUserMedia()
}

class "lib::html::html_dart2js.dart::MediaElement" {
  {static} +int HAVE_CURRENT_DATA
  {static} +int HAVE_ENOUGH_DATA
  {static} +int HAVE_FUTURE_DATA
  {static} +int HAVE_METADATA
  {static} +int HAVE_NOTHING
  {static} +int NETWORK_EMPTY
  {static} +int NETWORK_IDLE
  {static} +int NETWORK_LOADING
  {static} +int NETWORK_NO_SOURCE
  +AudioTrackList? audioTracks
  +bool autoplay
  +TimeRanges buffered
  +bool controls
  +DomTokenList? controlsList
  +String? crossOrigin
  +String currentSrc
  +num currentTime
  +bool? defaultMuted
  +num defaultPlaybackRate
  +bool disableRemotePlayback
  +num duration
  +bool ended
  +MediaError? error
  +bool loop
  +MediaKeys? mediaKeys
  +bool muted
  +int? networkState
  +bool paused
  +num playbackRate
  +TimeRanges played
  +String preload
  +int readyState
  +RemotePlayback? remote
  +TimeRanges seekable
  +bool seeking
  +String? sinkId
  +String src
  +MediaStream? srcObject
  +TextTrackList? textTracks
  +VideoTrackList? videoTracks
  +num volume
  +int? audioDecodedByteCount
  +int? videoDecodedByteCount
  +TextTrack addTextTrack()
  +String canPlayType()
  +MediaStream captureStream()
  +void load()
  +void pause()
  +dynamic play()
  +dynamic setMediaKeys()
  +dynamic setSinkId()
}

class "lib::html::html_dart2js.dart::MediaEncryptedEvent" {
  +ByteBuffer? initData
  +String? initDataType
  {static} -MediaEncryptedEvent _create_1()
  {static} -MediaEncryptedEvent _create_2()
}

class "lib::html::html_dart2js.dart::MediaError" {
  {static} +int MEDIA_ERR_ABORTED
  {static} +int MEDIA_ERR_DECODE
  {static} +int MEDIA_ERR_NETWORK
  {static} +int MEDIA_ERR_SRC_NOT_SUPPORTED
  +int code
  +String? message
}

class "lib::html::html_dart2js.dart::MediaKeyMessageEvent" {
  +ByteBuffer? message
  +String? messageType
  {static} -MediaKeyMessageEvent _create_1()
}

class "lib::html::html_dart2js.dart::MediaKeySession" {
  {static} +EventStreamProvider<MessageEvent> messageEvent
  +dynamic closed
  +num? expiration
  +MediaKeyStatusMap? keyStatuses
  +String? sessionId
  +Stream<MessageEvent> onMessage
  +dynamic close()
  +dynamic generateRequest()
  +dynamic load()
  +dynamic remove()
  -dynamic _update()
}

class "lib::html::html_dart2js.dart::MediaKeyStatusMap" {
  +int? size
  +Object? get()
  +bool has()
}

class "lib::html::html_dart2js.dart::MediaKeySystemAccess" {
  +String? keySystem
  +dynamic createMediaKeys()
  +Map<dynamic, dynamic> getConfiguration()
  -dynamic _getConfiguration_1()
}

class "lib::html::html_dart2js.dart::MediaKeys" {
  -MediaKeySession _createSession()
  +dynamic getStatusForPolicy()
  +dynamic setServerCertificate()
}

class "lib::html::html_dart2js.dart::MediaKeysPolicy" {
  +String? minHdcpVersion
  {static} -MediaKeysPolicy _create_1()
}

class "lib::html::html_dart2js.dart::MediaList" {
  +int? length
  +String? mediaText
  +void appendMedium()
  +void deleteMedium()
  +String? item()
}

class "lib::html::html_dart2js.dart::MediaMetadata" {
  +String? album
  +String? artist
  +List<dynamic>? artwork
  +String? title
  {static} -MediaMetadata _create_1()
  {static} -MediaMetadata _create_2()
}

class "lib::html::html_dart2js.dart::MediaQueryList" {
  {static} +EventStreamProvider<Event> changeEvent
  +bool matches
  +String media
  +Stream<Event> onChange
  +void addListener()
  +void removeListener()
}

class "lib::html::html_dart2js.dart::MediaQueryListEvent" {
  +bool? matches
  +String? media
  {static} -MediaQueryListEvent _create_1()
  {static} -MediaQueryListEvent _create_2()
}

class "lib::html::html_dart2js.dart::MediaRecorder" {
  {static} +EventStreamProvider<Event> errorEvent
  {static} +EventStreamProvider<Event> pauseEvent
  +int? audioBitsPerSecond
  +String? mimeType
  +String? state
  +MediaStream? stream
  +int? videoBitsPerSecond
  +Stream<Event> onError
  +Stream<Event> onPause
  {static} -MediaRecorder _create_1()
  {static} -MediaRecorder _create_2()
  {static} +bool isTypeSupported()
  +void pause()
  +void requestData()
  +void resume()
  +void start()
  +void stop()
}

class "lib::html::html_dart2js.dart::MediaSession" {
  +MediaMetadata? metadata
  +String? playbackState
  +void setActionHandler()
}

class "lib::html::html_dart2js.dart::MediaSettingsRange" {
  +num? max
  +num? min
  +num? step
}

class "lib::html::html_dart2js.dart::MediaSource" {
  {static} +bool supported
  +SourceBufferList? activeSourceBuffers
  +num? duration
  +String? readyState
  +SourceBufferList? sourceBuffers
  {static} -MediaSource _create_1()
  +SourceBuffer addSourceBuffer()
  +void clearLiveSeekableRange()
  +void endOfStream()
  {static} +bool isTypeSupported()
  +void removeSourceBuffer()
  +void setLiveSeekableRange()
}

class "lib::html::html_dart2js.dart::MediaStream" {
  {static} +EventStreamProvider<Event> addTrackEvent
  {static} +EventStreamProvider<Event> removeTrackEvent
  +bool? active
  +String? id
  +Stream<Event> onAddTrack
  +Stream<Event> onRemoveTrack
  {static} +bool supported
  {static} -MediaStream _create_1()
  {static} -MediaStream _create_2()
  {static} -MediaStream _create_3()
  +void addTrack()
  +MediaStream clone()
  +List<MediaStreamTrack> getAudioTracks()
  +MediaStreamTrack? getTrackById()
  +List<MediaStreamTrack> getTracks()
  +List<MediaStreamTrack> getVideoTracks()
  +void removeTrack()
}

class "lib::html::html_dart2js.dart::MediaStreamEvent" {
  {static} +bool supported
  +MediaStream? stream
  {static} -MediaStreamEvent _create_1()
  {static} -MediaStreamEvent _create_2()
}

class "lib::html::html_dart2js.dart::MediaStreamTrack" {
  {static} +EventStreamProvider<Event> endedEvent
  {static} +EventStreamProvider<Event> muteEvent
  {static} +EventStreamProvider<Event> unmuteEvent
  +String? contentHint
  +bool? enabled
  +String? id
  +String? kind
  +String? label
  +bool? muted
  +String? readyState
  +Stream<Event> onEnded
  +Stream<Event> onMute
  +Stream<Event> onUnmute
  +dynamic applyConstraints()
  +MediaStreamTrack clone()
  +Map<dynamic, dynamic> getCapabilities()
  -dynamic _getCapabilities_1()
  +Map<dynamic, dynamic> getConstraints()
  -dynamic _getConstraints_1()
  +Map<dynamic, dynamic> getSettings()
  -dynamic _getSettings_1()
  +void stop()
}

class "lib::html::html_dart2js.dart::MediaStreamTrackEvent" {
  {static} +bool supported
  +MediaStreamTrack? track
  {static} -MediaStreamTrackEvent _create_1()
}

class "lib::html::html_dart2js.dart::MemoryInfo" {
  +int? jsHeapSizeLimit
  +int? totalJSHeapSize
  +int? usedJSHeapSize
}

class "lib::html::html_dart2js.dart::MenuElement" {
}

class "lib::html::html_dart2js.dart::MessageChannel" {
  +MessagePort port1
  +MessagePort port2
  {static} -MessageChannel _create_1()
}

class "lib::html::html_dart2js.dart::MessageEvent" {
  +dynamic data
  -dynamic _get_data
  +String lastEventId
  +String origin
  +List<MessagePort> ports
  +EventTarget? source
  -dynamic _get_source
  +String? suborigin
  {static} -MessageEvent _create_1()
  {static} -MessageEvent _create_2()
  -void _initMessageEvent()
  -void _initMessageEvent_1()
}

class "lib::html::html_dart2js.dart::MessagePort" {
  {static} +EventStreamProvider<MessageEvent> messageEvent
  +Stream<MessageEvent> onMessage
  +void addEventListener()
  +void close()
  +void postMessage()
  -void _postMessage_1()
  -void _postMessage_2()
  -void _start()
}

class "lib::html::html_dart2js.dart::MetaElement" {
  +String content
  +String? httpEquiv
  +String name
}

class "lib::html::html_dart2js.dart::Metadata" {
  +DateTime modificationTime
  -dynamic _get_modificationTime
  +int? size
}

class "lib::html::html_dart2js.dart::MeterElement" {
  {static} +bool supported
  +num? high
  +List<Node>? labels
  +num? low
  +num? max
  +num? min
  +num? optimum
  +num? value
}

class "lib::html::html_dart2js.dart::MidiAccess" {
  +MidiInputMap? inputs
  +MidiOutputMap? outputs
  +bool? sysexEnabled
}

class "lib::html::html_dart2js.dart::MidiConnectionEvent" {
  +MidiPort? port
  {static} -MidiConnectionEvent _create_1()
  {static} -MidiConnectionEvent _create_2()
}

class "lib::html::html_dart2js.dart::MidiInput" {
  {static} +EventStreamProvider<MidiMessageEvent> midiMessageEvent
  +Stream<MidiMessageEvent> onMidiMessage
}

class "lib::html::html_dart2js.dart::MidiInputMap" {
  +Iterable<String> keys
  +Iterable<Map<dynamic, dynamic>> values
  +int length
  +bool isEmpty
  +bool isNotEmpty
  -Map<dynamic, dynamic>? _getItem()
  +void addAll()
  +bool containsValue()
  +bool containsKey()
  +Map<dynamic, dynamic>? []()
  +void forEach()
  +void []=()
  +dynamic putIfAbsent()
  +String remove()
  +void clear()
}

class "lib::html::html_dart2js.dart::MidiMessageEvent" {
  +Uint8List? data
  {static} -MidiMessageEvent _create_1()
  {static} -MidiMessageEvent _create_2()
}

class "lib::html::html_dart2js.dart::MidiOutput" {
  +void send()
}

class "lib::html::html_dart2js.dart::MidiOutputMap" {
  +Iterable<String> keys
  +Iterable<Map<dynamic, dynamic>> values
  +int length
  +bool isEmpty
  +bool isNotEmpty
  -Map<dynamic, dynamic>? _getItem()
  +void addAll()
  +bool containsValue()
  +bool containsKey()
  +Map<dynamic, dynamic>? []()
  +void forEach()
  +void []=()
  +dynamic putIfAbsent()
  +String remove()
  +void clear()
}

class "lib::html::html_dart2js.dart::MidiPort" {
  +String? connection
  +String? id
  +String? manufacturer
  +String? name
  +String? state
  +String? type
  +String? version
  +dynamic close()
  +dynamic open()
}

class "lib::html::html_dart2js.dart::MimeType" {
  +String? description
  +Plugin? enabledPlugin
  +String? suffixes
  +String? type
}

class "lib::html::html_dart2js.dart::MimeTypeArray" {
  +int length
  +MimeType first
  +MimeType last
  +MimeType single
  +MimeType []()
  +void []=()
  +MimeType elementAt()
  +MimeType? item()
  +MimeType? namedItem()
}

class "lib::html::html_dart2js.dart::ModElement" {
  +String cite
  +String dateTime
}

class "lib::html::html_dart2js.dart::MouseEvent" {
  +bool altKey
  +int button
  +int? buttons
  -num _clientX
  -num _clientY
  +bool ctrlKey
  +Node? fromElement
  -int? _layerX
  -int? _layerY
  +bool metaKey
  -int? _movementX
  -int? _movementY
  -num? _pageX
  -num? _pageY
  +String? region
  +EventTarget? relatedTarget
  -dynamic _get_relatedTarget
  -num _screenX
  -num _screenY
  +bool shiftKey
  +Node? toElement
  +Point<num> client
  +Point<num> movement
  +Point<num> offset
  +Point<num> screen
  +Point<num> layer
  +Point<num> page
  +DataTransfer dataTransfer
  {static} -MouseEvent _create_1()
  {static} -MouseEvent _create_2()
  +bool getModifierState()
  -void _initMouseEvent()
  -void _initMouseEvent_1()
}

class "lib::html::html_dart2js.dart::MutationEvent" {
  {static} +int ADDITION
  {static} +int MODIFICATION
  {static} +int REMOVAL
  +int? attrChange
  +String? attrName
  +String? newValue
  +String? prevValue
  +Node? relatedNode
  +void initMutationEvent()
}

class "lib::html::html_dart2js.dart::MutationObserver" {
  {static} -Map<String, bool> _boolKeys
  {static} +bool supported
  +void disconnect()
  -void _observe()
  -void _observe_1()
  -void _observe_2()
  +List<MutationRecord> takeRecords()
  +void observe()
  {static} -dynamic _createDict()
  {static} -dynamic _add()
  {static} -dynamic _fixupList()
  -void _call()
}

class "lib::html::html_dart2js.dart::MutationRecord" {
  +List<Node>? addedNodes
  +String? attributeName
  +String? attributeNamespace
  +Node? nextSibling
  +String? oldValue
  +Node? previousSibling
  +List<Node>? removedNodes
  +Node? target
  +String? type
}

class "lib::html::html_dart2js.dart::NavigationPreloadManager" {
  +dynamic disable()
  +dynamic enable()
  +dynamic getState()
}

class "lib::html::html_dart2js.dart::Navigator" {
  +String language
  +_BudgetService? budget
  +_Clipboard? clipboard
  +NetworkInformation? connection
  +CredentialsContainer? credentials
  +num? deviceMemory
  +String? doNotTrack
  +Geolocation geolocation
  +int? maxTouchPoints
  +MediaCapabilities? mediaCapabilities
  +MediaDevices? mediaDevices
  +MediaSession? mediaSession
  +MimeTypeArray? mimeTypes
  +_NFC? nfc
  +Permissions? permissions
  +Presentation? presentation
  +String? productSub
  +ServiceWorkerContainer? serviceWorker
  +StorageManager? storage
  +String vendor
  +String vendorSub
  +VR? vr
  +DeprecatedStorageQuota? persistentStorage
  +DeprecatedStorageQuota? temporaryStorage
  +bool? webdriver
  +bool? cookieEnabled
  +String appCodeName
  +String appName
  +String appVersion
  +bool? dartEnabled
  +String? platform
  +String product
  +String userAgent
  +List<String>? languages
  +bool? onLine
  +List<Gamepad?> getGamepads()
  +dynamic getUserMedia()
  -dynamic _ensureGetUserMedia()
  -void _getUserMedia()
  +void cancelKeyboardLock()
  +dynamic getBattery()
  -List<Gamepad?> _getGamepads()
  +dynamic getInstalledRelatedApps()
  +dynamic getVRDisplays()
  +void registerProtocolHandler()
  +dynamic requestKeyboardLock()
  -dynamic _requestKeyboardLock_1()
  -dynamic _requestKeyboardLock_2()
  +dynamic requestMidiAccess()
  +dynamic requestMediaKeySystemAccess()
  +bool sendBeacon()
  +dynamic share()
}

class "lib::html::html_dart2js.dart::NavigatorAutomationInformation" {
  +bool? webdriver
}

class "lib::html::html_dart2js.dart::NavigatorConcurrentHardware" {
  +int? hardwareConcurrency
}

class "lib::html::html_dart2js.dart::NavigatorCookies" {
  +bool? cookieEnabled
}

abstract class "lib::html::html_dart2js.dart::NavigatorID" {
  +String appCodeName
  +String appName
  +String appVersion
  +bool? dartEnabled
  +String? platform
  +String product
  +String userAgent
}

abstract class "lib::html::html_dart2js.dart::NavigatorLanguage" {
  +String? language
  +List<String>? languages
}

abstract class "lib::html::html_dart2js.dart::NavigatorOnLine" {
  +bool? onLine
}

class "lib::html::html_dart2js.dart::NavigatorUserMediaError" {
  +String? constraintName
  +String? message
  +String? name
}

class "lib::html::html_dart2js.dart::NetworkInformation" {
  {static} +EventStreamProvider<Event> changeEvent
  +num? downlink
  +num? downlinkMax
  +String? effectiveType
  +int? rtt
  +String? type
  +Stream<Event> onChange
}

class "lib::html::html_dart2js.dart::_ChildNodeListLazy" {
  -Node _this
  +Node first
  +Node last
  +Node single
  +Iterator<Node> iterator
  +int length
  +List<Node> rawList
  +void add()
  +void addAll()
  +void insert()
  +void insertAll()
  +void setAll()
  +Node removeLast()
  +Node removeAt()
  +bool remove()
  -void _filter()
  +void removeWhere()
  +void retainWhere()
  +void clear()
  +void []=()
  +void sort()
  +void shuffle()
  +void setRange()
  +void fillRange()
  +void removeRange()
  +Node []()
}

class "lib::html::html_dart2js.dart::Node" {
  {static} +int ATTRIBUTE_NODE
  {static} +int CDATA_SECTION_NODE
  {static} +int COMMENT_NODE
  {static} +int DOCUMENT_FRAGMENT_NODE
  {static} +int DOCUMENT_NODE
  {static} +int DOCUMENT_TYPE_NODE
  {static} +int ELEMENT_NODE
  {static} +int ENTITY_NODE
  {static} +int ENTITY_REFERENCE_NODE
  {static} +int NOTATION_NODE
  {static} +int PROCESSING_INSTRUCTION_NODE
  {static} +int TEXT_NODE
  +List<Node> nodes
  +List<Node> childNodes
  +String? baseUri
  +Node? firstChild
  +bool? isConnected
  +Node? lastChild
  +Node? nextNode
  +String? nodeName
  +int nodeType
  +String? nodeValue
  +Document? ownerDocument
  +Element? parent
  +Node? parentNode
  +Node? previousNode
  +String? text
  +void remove()
  +Node replaceWith()
  +void insertAllBefore()
  -void _clearChildren()
  +String toString()
  +Node append()
  +Node clone()
  +bool contains()
  +Node getRootNode()
  -Node _getRootNode_1()
  -Node _getRootNode_2()
  +bool hasChildNodes()
  +Node insertBefore()
  -Node _removeChild()
  -Node _replaceChild()
}

class "lib::html::html_dart2js.dart::NodeFilter" {
  {static} +int FILTER_ACCEPT
  {static} +int FILTER_REJECT
  {static} +int FILTER_SKIP
  {static} +int SHOW_ALL
  {static} +int SHOW_COMMENT
  {static} +int SHOW_DOCUMENT
  {static} +int SHOW_DOCUMENT_FRAGMENT
  {static} +int SHOW_DOCUMENT_TYPE
  {static} +int SHOW_ELEMENT
  {static} +int SHOW_PROCESSING_INSTRUCTION
  {static} +int SHOW_TEXT
}

class "lib::html::html_dart2js.dart::NodeIterator" {
  +bool? pointerBeforeReferenceNode
  +Node? referenceNode
  +Node root
  +int whatToShow
  +void detach()
  +Node? nextNode()
  +Node? previousNode()
}

class "lib::html::html_dart2js.dart::NodeList" {
  +int length
  +Node first
  +Node last
  +Node single
  +Node []()
  +void []=()
  +Node elementAt()
  -Node? _item()
}

class "lib::html::html_dart2js.dart::NonDocumentTypeChildNode" {
  +Element? nextElementSibling
  +Element? previousElementSibling
}

class "lib::html::html_dart2js.dart::NonElementParentNode" {
  +Element? getElementById()
}

class "lib::html::html_dart2js.dart::NoncedElement" {
  +String? nonce
}

class "lib::html::html_dart2js.dart::Notification" {
  {static} +EventStreamProvider<Event> clickEvent
  {static} +EventStreamProvider<Event> closeEvent
  {static} +EventStreamProvider<Event> errorEvent
  {static} +EventStreamProvider<Event> showEvent
  {static} +bool supported
  +List<dynamic>? actions
  +String? badge
  +String? body
  +Object? data
  +String? dir
  +String? icon
  +String? image
  +String? lang
  {static} +int? maxActions
  {static} +String? permission
  +bool? renotify
  +bool? requireInteraction
  +bool? silent
  +String? tag
  +int? timestamp
  +String? title
  +List<int>? vibrate
  +Stream<Event> onClick
  +Stream<Event> onClose
  +Stream<Event> onError
  +Stream<Event> onShow
  {static} -Notification _factoryNotification()
  {static} -Notification _create_1()
  {static} -Notification _create_2()
  +void close()
  {static} -dynamic _requestPermission()
  {static} +dynamic requestPermission()
}

class "lib::html::html_dart2js.dart::NotificationEvent" {
  +String? action
  +Notification? notification
  +String? reply
  {static} -NotificationEvent _create_1()
}

class "lib::html::html_dart2js.dart::OListElement" {
  +bool? reversed
  +int start
  +String type
}

class "lib::html::html_dart2js.dart::ObjectElement" {
  {static} +bool supported
  +WindowBase? contentWindow
  -dynamic _get_contentWindow
  +String data
  +FormElement? form
  +String height
  +String name
  +String type
  +String useMap
  +String validationMessage
  +ValidityState validity
  +String width
  +bool willValidate
  -Node __getter__()
  -void __setter__()
  +bool checkValidity()
  +bool reportValidity()
  +void setCustomValidity()
}

class "lib::html::html_dart2js.dart::OffscreenCanvas" {
  +int? height
  +int? width
  {static} -OffscreenCanvas _create_1()
  +dynamic convertToBlob()
  +Object? getContext()
  -Object? _getContext_1()
  -Object? _getContext_2()
  +ImageBitmap transferToImageBitmap()
}

class "lib::html::html_dart2js.dart::OffscreenCanvasRenderingContext2D" {
  +OffscreenCanvas? canvas
  +String? direction
  +Object? fillStyle
  +String? filter
  +String? font
  +num? globalAlpha
  +String? globalCompositeOperation
  +bool? imageSmoothingEnabled
  +String? imageSmoothingQuality
  +String? lineCap
  +num? lineDashOffset
  +String? lineJoin
  +num? lineWidth
  +num? miterLimit
  +num? shadowBlur
  +String? shadowColor
  +num? shadowOffsetX
  +num? shadowOffsetY
  +Object? strokeStyle
  +String? textAlign
  +String? textBaseline
  +void beginPath()
  +void clearRect()
  +void clip()
  +dynamic commit()
  +ImageData createImageData()
  -dynamic _createImageData_1()
  -dynamic _createImageData_2()
  -dynamic _createImageData_3()
  -dynamic _createImageData_4()
  +CanvasGradient createLinearGradient()
  +CanvasPattern? createPattern()
  +CanvasGradient createRadialGradient()
  +void drawImage()
  +void fill()
  +void fillRect()
  +void fillText()
  +ImageData getImageData()
  -dynamic _getImageData_1()
  +List<num> getLineDash()
  +bool isPointInPath()
  +bool isPointInStroke()
  +TextMetrics measureText()
  +void putImageData()
  -void _putImageData_1()
  -void _putImageData_2()
  +void resetTransform()
  +void restore()
  +void rotate()
  +void save()
  +void scale()
  +void setLineDash()
  +void setTransform()
  +void stroke()
  +void strokeRect()
  +void strokeText()
  +void transform()
  +void translate()
  +void arc()
  +void arcTo()
  +void bezierCurveTo()
  +void closePath()
  +void ellipse()
  +void lineTo()
  +void moveTo()
  +void quadraticCurveTo()
  +void rect()
}

class "lib::html::html_dart2js.dart::OptGroupElement" {
  +bool disabled
  +String label
}

class "lib::html::html_dart2js.dart::OptionElement" {
  +bool defaultSelected
  +bool disabled
  +FormElement? form
  +int index
  +String? label
  +bool selected
  +String value
  {static} -OptionElement _create_1()
  {static} -OptionElement _create_2()
  {static} -OptionElement _create_3()
  {static} -OptionElement _create_4()
  {static} -OptionElement _create_5()
}

class "lib::html::html_dart2js.dart::OrientationSensor" {
  +List<num>? quaternion
  +void populateMatrix()
}

class "lib::html::html_dart2js.dart::OutputElement" {
  {static} +bool supported
  +String? defaultValue
  +FormElement? form
  +DomTokenList? htmlFor
  +List<Node>? labels
  +String? name
  +String? type
  +String? validationMessage
  +ValidityState? validity
  +String? value
  +bool? willValidate
  +bool checkValidity()
  +bool reportValidity()
  +void setCustomValidity()
}

class "lib::html::html_dart2js.dart::OverconstrainedError" {
  +String? constraint
  +String? message
  +String? name
  {static} -OverconstrainedError _create_1()
}

class "lib::html::html_dart2js.dart::PageTransitionEvent" {
  +bool? persisted
  {static} -PageTransitionEvent _create_1()
  {static} -PageTransitionEvent _create_2()
}

class "lib::html::html_dart2js.dart::PaintRenderingContext2D" {
  +Matrix? currentTransform
  +Object? fillStyle
  +String? filter
  +num? globalAlpha
  +String? globalCompositeOperation
  +bool? imageSmoothingEnabled
  +String? imageSmoothingQuality
  +String? lineCap
  +num? lineDashOffset
  +String? lineJoin
  +num? lineWidth
  +num? miterLimit
  +num? shadowBlur
  +String? shadowColor
  +num? shadowOffsetX
  +num? shadowOffsetY
  +Object? strokeStyle
  +void beginPath()
  +void clearRect()
  +void clip()
  +CanvasGradient createLinearGradient()
  +CanvasPattern? createPattern()
  +CanvasGradient createRadialGradient()
  +void drawImage()
  +void fill()
  +void fillRect()
  +List<num> getLineDash()
  +bool isPointInPath()
  +bool isPointInStroke()
  +void resetTransform()
  +void restore()
  +void rotate()
  +void save()
  +void scale()
  +void setLineDash()
  +void setTransform()
  +void stroke()
  +void strokeRect()
  +void transform()
  +void translate()
  +void arc()
  +void arcTo()
  +void bezierCurveTo()
  +void closePath()
  +void ellipse()
  +void lineTo()
  +void moveTo()
  +void quadraticCurveTo()
  +void rect()
}

class "lib::html::html_dart2js.dart::PaintSize" {
  +num? height
  +num? width
}

class "lib::html::html_dart2js.dart::PaintWorkletGlobalScope" {
  +num? devicePixelRatio
  +void registerPaint()
}

class "lib::html::html_dart2js.dart::ParagraphElement" {
}

class "lib::html::html_dart2js.dart::ParamElement" {
  +String name
  +String value
}

abstract class "lib::html::html_dart2js.dart::ParentNode" {
  -int _childElementCount
  -List<Node>? _children
  -Element? _firstElementChild
  -Element? _lastElementChild
  +Element? querySelector()
  -List<Node> _querySelectorAll()
}

class "lib::html::html_dart2js.dart::PasswordCredential" {
  +Object? additionalData
  +String? idName
  +String? password
  +String? passwordName
  +String? iconUrl
  +String? name
  {static} -PasswordCredential _create_1()
  {static} -PasswordCredential _create_2()
}

class "lib::html::html_dart2js.dart::Path2D" {
  {static} -Path2D _create_1()
  {static} -Path2D _create_2()
  {static} -Path2D _create_3()
  +void addPath()
  +void arc()
  +void arcTo()
  +void bezierCurveTo()
  +void closePath()
  +void ellipse()
  +void lineTo()
  +void moveTo()
  +void quadraticCurveTo()
  +void rect()
}

class "lib::html::html_dart2js.dart::PaymentAddress" {
  +List<String>? addressLine
  +String? city
  +String? country
  +String? dependentLocality
  +String? languageCode
  +String? organization
  +String? phone
  +String? postalCode
  +String? recipient
  +String? region
  +String? sortingCode
}

class "lib::html::html_dart2js.dart::PaymentInstruments" {
  +dynamic clear()
  +dynamic delete()
  +dynamic get()
  +dynamic has()
  +dynamic keys()
  +dynamic set()
}

class "lib::html::html_dart2js.dart::PaymentManager" {
  +PaymentInstruments? instruments
  +String? userHint
}

class "lib::html::html_dart2js.dart::PaymentRequest" {
  +String? id
  +PaymentAddress? shippingAddress
  +String? shippingOption
  +String? shippingType
  {static} -PaymentRequest _create_1()
  {static} -PaymentRequest _create_2()
  +dynamic abort()
  +dynamic canMakePayment()
  +dynamic show()
}

class "lib::html::html_dart2js.dart::PaymentRequestEvent" {
  +String? instrumentKey
  +List<dynamic>? methodData
  +List<dynamic>? modifiers
  +String? paymentRequestId
  +String? paymentRequestOrigin
  +String? topLevelOrigin
  +Object? total
  {static} -PaymentRequestEvent _create_1()
  +dynamic openWindow()
  +void respondWith()
}

class "lib::html::html_dart2js.dart::PaymentRequestUpdateEvent" {
  {static} -PaymentRequestUpdateEvent _create_1()
  {static} -PaymentRequestUpdateEvent _create_2()
  +void updateWith()
}

class "lib::html::html_dart2js.dart::PaymentResponse" {
  +Object? details
  +String? methodName
  +String? payerEmail
  +String? payerName
  +String? payerPhone
  +String? requestId
  +PaymentAddress? shippingAddress
  +String? shippingOption
  +dynamic complete()
}

class "lib::html::html_dart2js.dart::Performance" {
  {static} +bool supported
  +MemoryInfo? memory
  +PerformanceNavigation navigation
  +num? timeOrigin
  +PerformanceTiming timing
  +void clearMarks()
  +void clearMeasures()
  +void clearResourceTimings()
  +List<PerformanceEntry> getEntries()
  +List<PerformanceEntry> getEntriesByName()
  +List<PerformanceEntry> getEntriesByType()
  +PerformanceEntry? mark()
  -PerformanceEntry? _mark_1()
  -PerformanceEntry? _mark_2()
  +PerformanceMeasure? measure()
  -PerformanceMeasure? _measure_1()
  -PerformanceMeasure? _measure_2()
  -PerformanceMeasure? _measure_3()
  -PerformanceMeasure? _measure_4()
  +double now()
  +void setResourceTimingBufferSize()
}

class "lib::html::html_dart2js.dart::PerformanceEntry" {
  +num duration
  +String entryType
  +String name
  +num startTime
}

class "lib::html::html_dart2js.dart::PerformanceLongTaskTiming" {
  +List<TaskAttributionTiming>? attribution
}

class "lib::html::html_dart2js.dart::PerformanceMark" {
}

class "lib::html::html_dart2js.dart::PerformanceMeasure" {
}

class "lib::html::html_dart2js.dart::PerformanceNavigation" {
  {static} +int TYPE_BACK_FORWARD
  {static} +int TYPE_NAVIGATE
  {static} +int TYPE_RELOAD
  {static} +int TYPE_RESERVED
  +int? redirectCount
  +int? type
}

class "lib::html::html_dart2js.dart::PerformanceNavigationTiming" {
  +num? domComplete
  +num? domContentLoadedEventEnd
  +num? domContentLoadedEventStart
  +num? domInteractive
  +num? loadEventEnd
  +num? loadEventStart
  +int? redirectCount
  +String? type
  +num? unloadEventEnd
  +num? unloadEventStart
}

class "lib::html::html_dart2js.dart::PerformanceObserver" {
  {static} -PerformanceObserver _create_1()
  +void disconnect()
  +void observe()
  -void _observe_1()
}

class "lib::html::html_dart2js.dart::PerformanceObserverEntryList" {
  +List<PerformanceEntry> getEntries()
  +List<PerformanceEntry> getEntriesByName()
  +List<PerformanceEntry> getEntriesByType()
}

class "lib::html::html_dart2js.dart::PerformancePaintTiming" {
}

class "lib::html::html_dart2js.dart::PerformanceResourceTiming" {
  +num connectEnd
  +num connectStart
  +int? decodedBodySize
  +num? domainLookupEnd
  +num? domainLookupStart
  +int? encodedBodySize
  +num? fetchStart
  +String? initiatorType
  +String? nextHopProtocol
  +num? redirectEnd
  +num? redirectStart
  +num? requestStart
  +num? responseEnd
  +num? responseStart
  +num? secureConnectionStart
  +List<PerformanceServerTiming>? serverTiming
  +int? transferSize
  +num? workerStart
}

class "lib::html::html_dart2js.dart::PerformanceServerTiming" {
  +String? description
  +num? duration
  +String? name
}

class "lib::html::html_dart2js.dart::PerformanceTiming" {
  +int connectEnd
  +int connectStart
  +int domComplete
  +int domContentLoadedEventEnd
  +int domContentLoadedEventStart
  +int domInteractive
  +int domLoading
  +int domainLookupEnd
  +int domainLookupStart
  +int fetchStart
  +int loadEventEnd
  +int loadEventStart
  +int navigationStart
  +int redirectEnd
  +int redirectStart
  +int requestStart
  +int responseEnd
  +int responseStart
  +int secureConnectionStart
  +int unloadEventEnd
  +int unloadEventStart
}

class "lib::html::html_dart2js.dart::PermissionStatus" {
  {static} +EventStreamProvider<Event> changeEvent
  +String? state
  +Stream<Event> onChange
}

class "lib::html::html_dart2js.dart::Permissions" {
  +dynamic query()
  +dynamic request()
  +dynamic requestAll()
  +dynamic revoke()
}

class "lib::html::html_dart2js.dart::PhotoCapabilities" {
  +List<dynamic>? fillLightMode
  +MediaSettingsRange? imageHeight
  +MediaSettingsRange? imageWidth
  +String? redEyeReduction
}

class "lib::html::html_dart2js.dart::PictureElement" {
}

class "lib::html::html_dart2js.dart::Plugin" {
  +String? description
  +String? filename
  +int? length
  +String? name
  +MimeType? item()
  +MimeType? namedItem()
}

class "lib::html::html_dart2js.dart::PluginArray" {
  +int length
  +Plugin first
  +Plugin last
  +Plugin single
  +Plugin []()
  +void []=()
  +Plugin elementAt()
  +Plugin? item()
  +Plugin? namedItem()
  +void refresh()
}

class "lib::html::html_dart2js.dart::PointerEvent" {
  +num? height
  +bool? isPrimary
  +int? pointerId
  +String? pointerType
  +num? pressure
  +num? tangentialPressure
  +int? tiltX
  +int? tiltY
  +int? twist
  +num? width
  {static} +bool supported
  {static} -PointerEvent _create_1()
  {static} -PointerEvent _create_2()
  +List<PointerEvent> getCoalescedEvents()
}

class "lib::html::html_dart2js.dart::PopStateEvent" {
  +dynamic state
  -dynamic _get_state
  {static} -PopStateEvent _create_1()
  {static} -PopStateEvent _create_2()
}

class "lib::html::html_dart2js.dart::PositionError" {
  {static} +int PERMISSION_DENIED
  {static} +int POSITION_UNAVAILABLE
  {static} +int TIMEOUT
  +int? code
  +String? message
}

class "lib::html::html_dart2js.dart::PreElement" {
}

class "lib::html::html_dart2js.dart::Presentation" {
  +PresentationRequest? defaultRequest
  +PresentationReceiver? receiver
}

class "lib::html::html_dart2js.dart::PresentationAvailability" {
  {static} +EventStreamProvider<Event> changeEvent
  +bool? value
  +Stream<Event> onChange
}

class "lib::html::html_dart2js.dart::PresentationConnection" {
  {static} +EventStreamProvider<MessageEvent> messageEvent
  +String? binaryType
  +String? id
  +String? state
  +String? url
  +Stream<MessageEvent> onMessage
  +void close()
  +void send()
  +void terminate()
}

class "lib::html::html_dart2js.dart::PresentationConnectionAvailableEvent" {
  +PresentationConnection? connection
  {static} -PresentationConnectionAvailableEvent _create_1()
}

class "lib::html::html_dart2js.dart::PresentationConnectionCloseEvent" {
  +String? message
  +String? reason
  {static} -PresentationConnectionCloseEvent _create_1()
}

class "lib::html::html_dart2js.dart::PresentationConnectionList" {
  +List<PresentationConnection>? connections
}

class "lib::html::html_dart2js.dart::PresentationReceiver" {
  +dynamic connectionList
}

class "lib::html::html_dart2js.dart::PresentationRequest" {
  {static} -PresentationRequest _create_1()
  {static} -PresentationRequest _create_2()
  +dynamic getAvailability()
  +dynamic reconnect()
  +dynamic start()
}

class "lib::html::html_dart2js.dart::ProcessingInstruction" {
  +StyleSheet? sheet
  +String? target
}

class "lib::html::html_dart2js.dart::ProgressElement" {
  {static} +bool supported
  +List<Node>? labels
  +num max
  +num position
  +num value
}

class "lib::html::html_dart2js.dart::ProgressEvent" {
  +bool lengthComputable
  +int? loaded
  +int? total
  {static} -ProgressEvent _create_1()
  {static} -ProgressEvent _create_2()
}

class "lib::html::html_dart2js.dart::PromiseRejectionEvent" {
  +dynamic promise
  +Object? reason
  {static} -PromiseRejectionEvent _create_1()
}

class "lib::html::html_dart2js.dart::PublicKeyCredential" {
  +ByteBuffer? rawId
  +AuthenticatorResponse? response
}

class "lib::html::html_dart2js.dart::PushEvent" {
  +PushMessageData? data
  {static} -PushEvent _create_1()
  {static} -PushEvent _create_2()
}

class "lib::html::html_dart2js.dart::PushManager" {
  {static} +List<String>? supportedContentEncodings
  +dynamic getSubscription()
  +dynamic permissionState()
  +dynamic subscribe()
}

class "lib::html::html_dart2js.dart::PushMessageData" {
  +ByteBuffer arrayBuffer()
  +Blob blob()
  +Object json()
  +String text()
}

class "lib::html::html_dart2js.dart::PushSubscription" {
  +String? endpoint
  +int? expirationTime
  +PushSubscriptionOptions? options
  +ByteBuffer? getKey()
  +dynamic unsubscribe()
}

class "lib::html::html_dart2js.dart::PushSubscriptionOptions" {
  +ByteBuffer? applicationServerKey
  +bool? userVisibleOnly
}

class "lib::html::html_dart2js.dart::QuoteElement" {
  +String cite
}

class "lib::html::html_dart2js.dart::Range" {
  {static} +int END_TO_END
  {static} +int END_TO_START
  {static} +int START_TO_END
  {static} +int START_TO_START
  +bool collapsed
  +Node commonAncestorContainer
  +Node endContainer
  +int endOffset
  +Node startContainer
  +int startOffset
  {static} +bool supportsCreateContextualFragment
  +DocumentFragment cloneContents()
  +Range cloneRange()
  +void collapse()
  +int compareBoundaryPoints()
  +int comparePoint()
  +DocumentFragment createContextualFragment()
  +void deleteContents()
  +void detach()
  +void expand()
  +DocumentFragment extractContents()
  +Rectangle<num> getBoundingClientRect()
  -List<Rectangle<num>> _getClientRects()
  +void insertNode()
  +bool isPointInRange()
  +void selectNode()
  +void selectNodeContents()
  +void setEnd()
  +void setEndAfter()
  +void setEndBefore()
  +void setStart()
  +void setStartAfter()
  +void setStartBefore()
  +void surroundContents()
  +List<Rectangle<num>> getClientRects()
}

class "lib::html::html_dart2js.dart::RelatedApplication" {
  +String? id
  +String? platform
  +String? url
}

class "lib::html::html_dart2js.dart::RelativeOrientationSensor" {
  {static} -RelativeOrientationSensor _create_1()
  {static} -RelativeOrientationSensor _create_2()
}

class "lib::html::html_dart2js.dart::RemotePlayback" {
  +String? state
  +dynamic cancelWatchAvailability()
  +dynamic prompt()
  +dynamic watchAvailability()
}

class "lib::html::html_dart2js.dart::ReportBody" {
}

class "lib::html::html_dart2js.dart::ReportingObserver" {
  {static} -ReportingObserver _create_1()
  +void disconnect()
  +void observe()
}

class "lib::html::html_dart2js.dart::ResizeObserver" {
  {static} -ResizeObserver _create_1()
  +void disconnect()
  +void observe()
  +void unobserve()
}

class "lib::html::html_dart2js.dart::ResizeObserverEntry" {
  +DomRectReadOnly? contentRect
  +Element? target
}

class "lib::html::html_dart2js.dart::RtcCertificate" {
  +int? expires
  +List<Map<dynamic, dynamic>> getFingerprints()
}

class "lib::html::html_dart2js.dart::RtcDataChannel" {
  {static} +EventStreamProvider<Event> closeEvent
  {static} +EventStreamProvider<Event> errorEvent
  {static} +EventStreamProvider<MessageEvent> messageEvent
  {static} +EventStreamProvider<Event> openEvent
  +String? binaryType
  +int? bufferedAmount
  +int? bufferedAmountLowThreshold
  +int? id
  +String? label
  +int? maxRetransmitTime
  +int? maxRetransmits
  +bool? negotiated
  +bool? ordered
  +String? protocol
  +String? readyState
  +bool? reliable
  +Stream<Event> onClose
  +Stream<Event> onError
  +Stream<MessageEvent> onMessage
  +Stream<Event> onOpen
  +void close()
  +void send()
  +void sendBlob()
  +void sendByteBuffer()
  +void sendString()
  +void sendTypedData()
}

class "lib::html::html_dart2js.dart::RtcDataChannelEvent" {
  +RtcDataChannel? channel
  {static} -RtcDataChannelEvent _create_1()
}

class "lib::html::html_dart2js.dart::RtcDtmfSender" {
  {static} +EventStreamProvider<RtcDtmfToneChangeEvent> toneChangeEvent
  +bool? canInsertDtmf
  +int? duration
  +int? interToneGap
  +String? toneBuffer
  +MediaStreamTrack? track
  +Stream<RtcDtmfToneChangeEvent> onToneChange
  +void insertDtmf()
}

class "lib::html::html_dart2js.dart::RtcDtmfToneChangeEvent" {
  +String? tone
  {static} -RtcDtmfToneChangeEvent _create_1()
}

class "lib::html::html_dart2js.dart::RtcIceCandidate" {
  +String? candidate
  +int? sdpMLineIndex
  +String? sdpMid
}

class "lib::html::html_dart2js.dart::RtcLegacyStatsReport" {
  +String? id
  +DateTime timestamp
  -dynamic _get_timestamp
  +String? type
  +List<String> names()
  +String stat()
}

class "lib::html::html_dart2js.dart::RtcPeerConnection" {
  {static} +EventStreamProvider<MediaStreamEvent> addStreamEvent
  {static} +EventStreamProvider<Event> connectionStateChangeEvent
  {static} +EventStreamProvider<RtcDataChannelEvent> dataChannelEvent
  {static} +EventStreamProvider<RtcPeerConnectionIceEvent> iceCandidateEvent
  {static} +EventStreamProvider<Event> iceConnectionStateChangeEvent
  {static} +EventStreamProvider<Event> negotiationNeededEvent
  {static} +EventStreamProvider<MediaStreamEvent> removeStreamEvent
  {static} +EventStreamProvider<Event> signalingStateChangeEvent
  {static} +EventStreamProvider<RtcTrackEvent> trackEvent
  {static} +bool supported
  +String? connectionState
  +String? iceConnectionState
  +String? iceGatheringState
  +RtcSessionDescription? localDescription
  +RtcSessionDescription? remoteDescription
  +String? signalingState
  +Stream<MediaStreamEvent> onAddStream
  +Stream<Event> onConnectionStateChange
  +Stream<RtcDataChannelEvent> onDataChannel
  +Stream<RtcPeerConnectionIceEvent> onIceCandidate
  +Stream<Event> onIceConnectionStateChange
  +Stream<Event> onNegotiationNeeded
  +Stream<MediaStreamEvent> onRemoveStream
  +Stream<Event> onSignalingStateChange
  +Stream<RtcTrackEvent> onTrack
  +dynamic getLegacyStats()
  -dynamic _getStats()
  {static} +dynamic generateCertificate()
  +dynamic addIceCandidate()
  +void addStream()
  -void _addStream_1()
  -void _addStream_2()
  +RtcRtpSender addTrack()
  +void close()
  +dynamic createAnswer()
  +RtcDtmfSender createDtmfSender()
  +RtcDataChannel createDataChannel()
  -RtcDataChannel _createDataChannel_1()
  -RtcDataChannel _createDataChannel_2()
  +dynamic createOffer()
  +List<MediaStream> getLocalStreams()
  +List<RtcRtpReceiver> getReceivers()
  +List<MediaStream> getRemoteStreams()
  +List<RtcRtpSender> getSenders()
  +dynamic getStats()
  +void removeStream()
  +void removeTrack()
  +void setConfiguration()
  -void _setConfiguration_1()
  +dynamic setLocalDescription()
  +dynamic setRemoteDescription()
}

class "lib::html::html_dart2js.dart::RtcPeerConnectionIceEvent" {
  +RtcIceCandidate? candidate
  {static} -RtcPeerConnectionIceEvent _create_1()
  {static} -RtcPeerConnectionIceEvent _create_2()
}

class "lib::html::html_dart2js.dart::RtcRtpContributingSource" {
  +int? source
  +num? timestamp
}

class "lib::html::html_dart2js.dart::RtcRtpReceiver" {
  +MediaStreamTrack? track
  +List<RtcRtpContributingSource> getContributingSources()
}

class "lib::html::html_dart2js.dart::RtcRtpSender" {
  +MediaStreamTrack? track
}

class "lib::html::html_dart2js.dart::RtcSessionDescription" {
  +String? sdp
  +String? type
}

class "lib::html::html_dart2js.dart::RtcStatsReport" {
  +Iterable<String> keys
  +Iterable<Map<dynamic, dynamic>> values
  +int length
  +bool isEmpty
  +bool isNotEmpty
  -Map<dynamic, dynamic>? _getItem()
  +void addAll()
  +bool containsValue()
  +bool containsKey()
  +Map<dynamic, dynamic>? []()
  +void forEach()
  +void []=()
  +dynamic putIfAbsent()
  +String remove()
  +void clear()
}

class "lib::html::html_dart2js.dart::RtcStatsResponse" {
  +RtcLegacyStatsReport namedItem()
  +List<RtcLegacyStatsReport> result()
}

class "lib::html::html_dart2js.dart::RtcTrackEvent" {
  +RtcRtpReceiver? receiver
  +List<MediaStream>? streams
  +MediaStreamTrack? track
  {static} -RtcTrackEvent _create_1()
}

class "lib::html::html_dart2js.dart::Screen" {
  +Rectangle<num> available
  -int? _availHeight
  -int? _availLeft
  -int? _availTop
  -int? _availWidth
  +int? colorDepth
  +int? height
  +bool? keepAwake
  +ScreenOrientation? orientation
  +int? pixelDepth
  +int? width
}

class "lib::html::html_dart2js.dart::ScreenOrientation" {
  {static} +EventStreamProvider<Event> changeEvent
  +int? angle
  +String? type
  +Stream<Event> onChange
  +dynamic lock()
  +void unlock()
}

class "lib::html::html_dart2js.dart::ScriptElement" {
  +bool? async
  +String charset
  +String? crossOrigin
  +bool? defer
  +String? integrity
  +bool? noModule
  +String src
  +String type
}

class "lib::html::html_dart2js.dart::ScrollState" {
  +num? deltaGranularity
  +num? deltaX
  +num? deltaY
  +bool? fromUserInput
  +bool? inInertialPhase
  +bool? isBeginning
  +bool? isDirectManipulation
  +bool? isEnding
  +int? positionX
  +int? positionY
  +num? velocityX
  +num? velocityY
  {static} -ScrollState _create_1()
  {static} -ScrollState _create_2()
  +void consumeDelta()
  +void distributeToScrollChainDescendant()
}

class "lib::html::html_dart2js.dart::ScrollTimeline" {
  +String? orientation
  +Element? scrollSource
  +Object? timeRange
  {static} -ScrollTimeline _create_1()
  {static} -ScrollTimeline _create_2()
}

class "lib::html::html_dart2js.dart::SecurityPolicyViolationEvent" {
  +String? blockedUri
  +int? columnNumber
  +String? disposition
  +String? documentUri
  +String? effectiveDirective
  +int? lineNumber
  +String? originalPolicy
  +String? referrer
  +String? sample
  +String? sourceFile
  +int? statusCode
  +String? violatedDirective
  {static} -SecurityPolicyViolationEvent _create_1()
  {static} -SecurityPolicyViolationEvent _create_2()
}

class "lib::html::html_dart2js.dart::SelectElement" {
  +bool autofocus
  +bool disabled
  +FormElement? form
  +List<Node>? labels
  +int? length
  +bool? multiple
  +String? name
  +bool? required
  +int? selectedIndex
  +int? size
  +String type
  +String validationMessage
  +ValidityState validity
  +String? value
  +bool willValidate
  +List<OptionElement> options
  +List<OptionElement> selectedOptions
  -void __setter__()
  +void add()
  +bool checkValidity()
  +Element? item()
  +OptionElement? namedItem()
  +bool reportValidity()
  +void setCustomValidity()
}

class "lib::html::html_dart2js.dart::Selection" {
  +Node? anchorNode
  +int? anchorOffset
  +Node? baseNode
  +int? baseOffset
  +Node? extentNode
  +int? extentOffset
  +Node? focusNode
  +int? focusOffset
  +bool? isCollapsed
  +int? rangeCount
  +String? type
  +void addRange()
  +void collapse()
  +void collapseToEnd()
  +void collapseToStart()
  +bool containsNode()
  +void deleteFromDocument()
  +void empty()
  +void extend()
  +Range getRangeAt()
  +void modify()
  +void removeAllRanges()
  +void removeRange()
  +void selectAllChildren()
  +void setBaseAndExtent()
  +void setPosition()
}

class "lib::html::html_dart2js.dart::Sensor" {
  {static} +EventStreamProvider<Event> errorEvent
  +bool? activated
  +bool? hasReading
  +num? timestamp
  +Stream<Event> onError
  +void start()
  +void stop()
}

class "lib::html::html_dart2js.dart::SensorErrorEvent" {
  +DomException? error
  {static} -SensorErrorEvent _create_1()
}

class "lib::html::html_dart2js.dart::ServiceWorker" {
  {static} +EventStreamProvider<Event> errorEvent
  +String? scriptUrl
  +String? state
  +Stream<Event> onError
  +void postMessage()
  -void _postMessage_1()
  -void _postMessage_2()
}

class "lib::html::html_dart2js.dart::ServiceWorkerContainer" {
  {static} +EventStreamProvider<MessageEvent> messageEvent
  +ServiceWorker? controller
  +dynamic ready
  +Stream<MessageEvent> onMessage
  +dynamic getRegistration()
  +dynamic getRegistrations()
  +dynamic register()
}

class "lib::html::html_dart2js.dart::ServiceWorkerGlobalScope" {
  {static} +EventStreamProvider<Event> activateEvent
  {static} +EventStreamProvider<Event> fetchEvent
  {static} +EventStreamProvider<ForeignFetchEvent> foreignfetchEvent
  {static} +EventStreamProvider<Event> installEvent
  {static} +EventStreamProvider<MessageEvent> messageEvent
  +Clients? clients
  +ServiceWorkerRegistration? registration
  +Stream<Event> onActivate
  +Stream<Event> onFetch
  +Stream<ForeignFetchEvent> onForeignfetch
  +Stream<Event> onInstall
  +Stream<MessageEvent> onMessage
  {static} +ServiceWorkerGlobalScope instance
  +dynamic skipWaiting()
}

class "lib::html::html_dart2js.dart::ServiceWorkerRegistration" {
  +ServiceWorker? active
  +BackgroundFetchManager? backgroundFetch
  +ServiceWorker? installing
  +NavigationPreloadManager? navigationPreload
  +PaymentManager? paymentManager
  +PushManager? pushManager
  +String? scope
  +SyncManager? sync
  +ServiceWorker? waiting
  +dynamic getNotifications()
  +dynamic showNotification()
  +dynamic unregister()
  +dynamic update()
}

class "lib::html::html_dart2js.dart::ShadowElement" {
  {static} +bool supported
  +List<Node> getDistributedNodes()
}

class "lib::html::html_dart2js.dart::ShadowRoot" {
  {static} -bool _shadowRootDeprecationReported
  +bool? delegatesFocus
  +Element? host
  +String? innerHtml
  +String? mode
  +ShadowRoot? olderShadowRoot
  +Element? activeElement
  +Element? fullscreenElement
  +Element? pointerLockElement
  +List<StyleSheet>? styleSheets
  {static} +bool supported
  +bool resetStyleInheritance
  +bool applyAuthorStyles
  +Element? elementFromPoint()
  +List<Element> elementsFromPoint()
  +Selection? getSelection()
  {static} -void _shadowRootDeprecationReport()
}

class "lib::html::html_dart2js.dart::SharedArrayBuffer" {
  +int? byteLength
  {static} -SharedArrayBuffer _create_1()
  {static} -SharedArrayBuffer _create_2()
  +SharedArrayBuffer slice()
}

class "lib::html::html_dart2js.dart::SharedWorker" {
  {static} +EventStreamProvider<Event> errorEvent
  +MessagePort? port
  +Stream<Event> onError
  {static} -SharedWorker _create_1()
  {static} -SharedWorker _create_2()
}

class "lib::html::html_dart2js.dart::SharedWorkerGlobalScope" {
  {static} +EventStreamProvider<Event> connectEvent
  {static} +int PERSISTENT
  {static} +int TEMPORARY
  +String? name
  +Stream<Event> onConnect
  {static} +SharedWorkerGlobalScope instance
  +void close()
  -void _webkitRequestFileSystem()
  +_DOMFileSystemSync requestFileSystemSync()
  +_EntrySync resolveLocalFileSystemSyncUrl()
  -void _webkitResolveLocalFileSystemUrl()
}

class "lib::html::html_dart2js.dart::SlotElement" {
  +String? name
  +List<Node> assignedNodes()
  -List<Node> _assignedNodes_1()
  -List<Node> _assignedNodes_2()
}

class "lib::html::html_dart2js.dart::SourceBuffer" {
  {static} +EventStreamProvider<Event> abortEvent
  {static} +EventStreamProvider<Event> errorEvent
  +num? appendWindowEnd
  +num? appendWindowStart
  +AudioTrackList? audioTracks
  +TimeRanges? buffered
  +String? mode
  +num? timestampOffset
  +TrackDefaultList? trackDefaults
  +bool? updating
  +VideoTrackList? videoTracks
  +Stream<Event> onAbort
  +Stream<Event> onError
  +void abort()
  +void appendBuffer()
  +void appendTypedData()
  +void remove()
}

class "lib::html::html_dart2js.dart::SourceBufferList" {
  +int length
  +SourceBuffer first
  +SourceBuffer last
  +SourceBuffer single
  +SourceBuffer []()
  +void []=()
  +SourceBuffer elementAt()
  +SourceBuffer item()
}

class "lib::html::html_dart2js.dart::SourceElement" {
  +String media
  +String? sizes
  +String src
  +String? srcset
  +String type
}

class "lib::html::html_dart2js.dart::SpanElement" {
}

class "lib::html::html_dart2js.dart::SpeechGrammar" {
  +String? src
  +num? weight
  {static} -SpeechGrammar _create_1()
}

class "lib::html::html_dart2js.dart::SpeechGrammarList" {
  +int length
  +SpeechGrammar first
  +SpeechGrammar last
  +SpeechGrammar single
  {static} -SpeechGrammarList _create_1()
  +SpeechGrammar []()
  +void []=()
  +SpeechGrammar elementAt()
  +void addFromString()
  +void addFromUri()
  +SpeechGrammar item()
}

class "lib::html::html_dart2js.dart::SpeechRecognition" {
  {static} +EventStreamProvider<Event> audioEndEvent
  {static} +EventStreamProvider<Event> audioStartEvent
  {static} +EventStreamProvider<Event> endEvent
  {static} +EventStreamProvider<SpeechRecognitionError> errorEvent
  {static} +EventStreamProvider<SpeechRecognitionEvent> noMatchEvent
  {static} +EventStreamProvider<SpeechRecognitionEvent> resultEvent
  {static} +EventStreamProvider<Event> soundEndEvent
  {static} +EventStreamProvider<Event> soundStartEvent
  {static} +EventStreamProvider<Event> speechEndEvent
  {static} +EventStreamProvider<Event> speechStartEvent
  {static} +EventStreamProvider<Event> startEvent
  {static} +bool supported
  +MediaStreamTrack? audioTrack
  +bool? continuous
  +SpeechGrammarList? grammars
  +bool? interimResults
  +String? lang
  +int? maxAlternatives
  +Stream<Event> onAudioEnd
  +Stream<Event> onAudioStart
  +Stream<Event> onEnd
  +Stream<SpeechRecognitionError> onError
  +Stream<SpeechRecognitionEvent> onNoMatch
  +Stream<SpeechRecognitionEvent> onResult
  +Stream<Event> onSoundEnd
  +Stream<Event> onSoundStart
  +Stream<Event> onSpeechEnd
  +Stream<Event> onSpeechStart
  +Stream<Event> onStart
  +void abort()
  +void start()
  +void stop()
}

class "lib::html::html_dart2js.dart::SpeechRecognitionAlternative" {
  +num? confidence
  +String? transcript
}

class "lib::html::html_dart2js.dart::SpeechRecognitionError" {
  +String? error
  +String? message
  {static} -SpeechRecognitionError _create_1()
  {static} -SpeechRecognitionError _create_2()
}

class "lib::html::html_dart2js.dart::SpeechRecognitionEvent" {
  +Document? emma
  +Document? interpretation
  +int? resultIndex
  +List<SpeechRecognitionResult>? results
  {static} -SpeechRecognitionEvent _create_1()
  {static} -SpeechRecognitionEvent _create_2()
}

class "lib::html::html_dart2js.dart::SpeechRecognitionResult" {
  +bool? isFinal
  +int? length
  +SpeechRecognitionAlternative item()
}

class "lib::html::html_dart2js.dart::SpeechSynthesis" {
  +bool? paused
  +bool? pending
  +bool? speaking
  +List<SpeechSynthesisVoice> getVoices()
  +void cancel()
  -List<SpeechSynthesisVoice> _getVoices()
  +void pause()
  +void resume()
  +void speak()
}

class "lib::html::html_dart2js.dart::SpeechSynthesisEvent" {
  +int? charIndex
  +num? elapsedTime
  +String? name
  +SpeechSynthesisUtterance? utterance
}

class "lib::html::html_dart2js.dart::SpeechSynthesisUtterance" {
  {static} +EventStreamProvider<SpeechSynthesisEvent> boundaryEvent
  {static} +EventStreamProvider<SpeechSynthesisEvent> endEvent
  {static} +EventStreamProvider<Event> errorEvent
  {static} +EventStreamProvider<SpeechSynthesisEvent> markEvent
  {static} +EventStreamProvider<Event> pauseEvent
  {static} +EventStreamProvider<SpeechSynthesisEvent> resumeEvent
  {static} +EventStreamProvider<SpeechSynthesisEvent> startEvent
  +String? lang
  +num? pitch
  +num? rate
  +String? text
  +SpeechSynthesisVoice? voice
  +num? volume
  +Stream<SpeechSynthesisEvent> onBoundary
  +Stream<SpeechSynthesisEvent> onEnd
  +Stream<Event> onError
  +Stream<SpeechSynthesisEvent> onMark
  +Stream<Event> onPause
  +Stream<SpeechSynthesisEvent> onResume
  +Stream<SpeechSynthesisEvent> onStart
  {static} -SpeechSynthesisUtterance _create_1()
  {static} -SpeechSynthesisUtterance _create_2()
}

class "lib::html::html_dart2js.dart::SpeechSynthesisVoice" {
  +bool? defaultValue
  +String? lang
  +bool? localService
  +String? name
  +String? voiceUri
}

class "lib::html::html_dart2js.dart::StaticRange" {
  +bool? collapsed
  +Node? endContainer
  +int? endOffset
  +Node? startContainer
  +int? startOffset
}

class "lib::html::html_dart2js.dart::Storage" {
  +Iterable<String> keys
  +Iterable<String> values
  +int length
  +bool isEmpty
  +bool isNotEmpty
  -int _length
  +void addAll()
  +bool containsValue()
  +bool containsKey()
  +String? []()
  +void []=()
  +String putIfAbsent()
  +String? remove()
  +void clear()
  +void forEach()
  -void _clear()
  -String? _getItem()
  -String? _key()
  -void _removeItem()
  -void _setItem()
}

class "lib::html::html_dart2js.dart::StorageEvent" {
  +String? key
  +String? newValue
  +String? oldValue
  +Storage? storageArea
  +String? url
  {static} -StorageEvent _create_1()
  {static} -StorageEvent _create_2()
  -void _initStorageEvent()
}

class "lib::html::html_dart2js.dart::StorageManager" {
  +dynamic estimate()
  +dynamic persist()
  +dynamic persisted()
}

class "lib::html::html_dart2js.dart::StyleElement" {
  +bool disabled
  +String media
  +StyleSheet? sheet
  +String? type
}

class "lib::html::html_dart2js.dart::StyleMedia" {
  +String? type
  +bool matchMedium()
}

class "lib::html::html_dart2js.dart::StylePropertyMap" {
  +void append()
  +void delete()
  +void set()
}

class "lib::html::html_dart2js.dart::StylePropertyMapReadonly" {
  +CssStyleValue? get()
  +List<CssStyleValue> getAll()
  +List<String> getProperties()
  +bool has()
}

class "lib::html::html_dart2js.dart::StyleSheet" {
  +bool? disabled
  +String? href
  +MediaList? media
  +Node? ownerNode
  +StyleSheet? parentStyleSheet
  +String? title
  +String? type
}

class "lib::html::html_dart2js.dart::SyncEvent" {
  +bool? lastChance
  +String? tag
  {static} -SyncEvent _create_1()
}

class "lib::html::html_dart2js.dart::SyncManager" {
  +dynamic getTags()
  +dynamic register()
}

class "lib::html::html_dart2js.dart::TableCaptionElement" {
}

class "lib::html::html_dart2js.dart::TableCellElement" {
  +int cellIndex
  +int colSpan
  +String headers
  +int rowSpan
}

class "lib::html::html_dart2js.dart::TableColElement" {
  +int span
}

class "lib::html::html_dart2js.dart::TableElement" {
  +List<TableSectionElement> tBodies
  +List<TableRowElement> rows
  +TableCaptionElement? caption
  -List<Node> _rows
  -List<Node> _tBodies
  +TableSectionElement? tFoot
  +TableSectionElement? tHead
  +TableRowElement addRow()
  +TableCaptionElement createCaption()
  +TableSectionElement createTBody()
  +TableSectionElement createTFoot()
  +TableSectionElement createTHead()
  +TableRowElement insertRow()
  -TableSectionElement _createTBody()
  -TableSectionElement _nativeCreateTBody()
  +DocumentFragment createFragment()
  -TableCaptionElement _createCaption()
  -TableSectionElement _createTFoot()
  -TableSectionElement _createTHead()
  +void deleteCaption()
  +void deleteRow()
  +void deleteTFoot()
  +void deleteTHead()
  -TableRowElement _insertRow()
}

class "lib::html::html_dart2js.dart::TableRowElement" {
  +List<TableCellElement> cells
  -List<Node> _cells
  +int rowIndex
  +int sectionRowIndex
  +TableCellElement addCell()
  +TableCellElement insertCell()
  +DocumentFragment createFragment()
  +void deleteCell()
  -HtmlElement _insertCell()
}

class "lib::html::html_dart2js.dart::TableSectionElement" {
  +List<TableRowElement> rows
  -List<Node> _rows
  +TableRowElement addRow()
  +TableRowElement insertRow()
  +DocumentFragment createFragment()
  +void deleteRow()
  -HtmlElement _insertRow()
}

class "lib::html::html_dart2js.dart::TaskAttributionTiming" {
  +String? containerId
  +String? containerName
  +String? containerSrc
  +String? containerType
  +String? scriptUrl
}

class "lib::html::html_dart2js.dart::TemplateElement" {
  {static} +bool supported
  +DocumentFragment? content
  +void setInnerHtml()
}

class "lib::html::html_dart2js.dart::Text" {
  +SlotElement? assignedSlot
  +String wholeText
  +List<Node> getDestinationInsertionPoints()
  +Text splitText()
}

class "lib::html::html_dart2js.dart::TextAreaElement" {
  +String? autocapitalize
  +bool autofocus
  +int cols
  +String? defaultValue
  +String? dirName
  +bool disabled
  +FormElement? form
  +List<Node>? labels
  +int maxLength
  +int minLength
  +String name
  +String placeholder
  +bool readOnly
  +bool required
  +int rows
  +String? selectionDirection
  +int? selectionEnd
  +int? selectionStart
  +int? textLength
  +String? type
  +String? validationMessage
  +ValidityState? validity
  +String? value
  +bool? willValidate
  +String wrap
  +bool checkValidity()
  +bool reportValidity()
  +void select()
  +void setCustomValidity()
  +void setRangeText()
  +void setSelectionRange()
}

class "lib::html::html_dart2js.dart::TextDetector" {
  {static} -TextDetector _create_1()
  +dynamic detect()
}

class "lib::html::html_dart2js.dart::TextEvent" {
  +String? data
  -void _initTextEvent()
}

class "lib::html::html_dart2js.dart::TextMetrics" {
  +num? actualBoundingBoxAscent
  +num? actualBoundingBoxDescent
  +num? actualBoundingBoxLeft
  +num? actualBoundingBoxRight
  +num? alphabeticBaseline
  +num? emHeightAscent
  +num? emHeightDescent
  +num? fontBoundingBoxAscent
  +num? fontBoundingBoxDescent
  +num? hangingBaseline
  +num? ideographicBaseline
  +num? width
}

class "lib::html::html_dart2js.dart::TextTrack" {
  {static} +EventStreamProvider<Event> cueChangeEvent
  +TextTrackCueList? activeCues
  +TextTrackCueList? cues
  +String id
  +String kind
  +String label
  +String language
  +String? mode
  +Stream<Event> onCueChange
  +void addCue()
  +void removeCue()
}

class "lib::html::html_dart2js.dart::TextTrackCue" {
  {static} +EventStreamProvider<Event> enterEvent
  {static} +EventStreamProvider<Event> exitEvent
  +num? endTime
  +String? id
  +bool? pauseOnExit
  +num? startTime
  +TextTrack? track
  +Stream<Event> onEnter
  +Stream<Event> onExit
}

class "lib::html::html_dart2js.dart::TextTrackCueList" {
  +int length
  +TextTrackCue first
  +TextTrackCue last
  +TextTrackCue single
  +TextTrackCue []()
  +void []=()
  +TextTrackCue elementAt()
  -TextTrackCue __getter__()
  +TextTrackCue? getCueById()
}

class "lib::html::html_dart2js.dart::TextTrackList" {
  {static} +EventStreamProvider<TrackEvent> addTrackEvent
  {static} +EventStreamProvider<Event> changeEvent
  +int length
  +TextTrack first
  +TextTrack last
  +TextTrack single
  +Stream<TrackEvent> onAddTrack
  +Stream<Event> onChange
  +TextTrack []()
  +void []=()
  +TextTrack elementAt()
  -TextTrack __getter__()
  +TextTrack? getTrackById()
}

class "lib::html::html_dart2js.dart::TimeElement" {
  +String? dateTime
}

class "lib::html::html_dart2js.dart::TimeRanges" {
  +int length
  +double end()
  +double start()
}

class "lib::html::html_dart2js.dart::TitleElement" {
}

class "lib::html::html_dart2js.dart::Touch" {
  -num? _clientX
  -num? _clientY
  +num? force
  +int? identifier
  -num? _pageX
  -num? _pageY
  -num? _radiusX
  -num? _radiusY
  +String? region
  +num? rotationAngle
  -num? _screenX
  -num? _screenY
  +EventTarget? target
  -dynamic _get_target
  -int __clientX
  -int __clientY
  -int __screenX
  -int __screenY
  -int __pageX
  -int __pageY
  -int __radiusX
  -int __radiusY
  +Point<num> client
  +Point<num> page
  +Point<num> screen
  +int radiusX
  +int radiusY
  {static} -Touch _create_1()
}

class "lib::html::html_dart2js.dart::TouchEvent" {
  +bool? altKey
  +TouchList? changedTouches
  +bool? ctrlKey
  +bool? metaKey
  +bool? shiftKey
  +TouchList? targetTouches
  +TouchList? touches
  {static} +bool supported
  {static} -TouchEvent _create_1()
  {static} -TouchEvent _create_2()
}

class "lib::html::html_dart2js.dart::TouchList" {
  {static} +bool supported
  +int length
  +Touch first
  +Touch last
  +Touch single
  +Touch []()
  +void []=()
  +Touch elementAt()
  +Touch? item()
}

class "lib::html::html_dart2js.dart::TrackDefault" {
  +String? byteStreamTrackID
  +Object? kinds
  +String? label
  +String? language
  +String? type
  {static} -TrackDefault _create_1()
  {static} -TrackDefault _create_2()
}

class "lib::html::html_dart2js.dart::TrackDefaultList" {
  +int? length
  {static} -TrackDefaultList _create_1()
  {static} -TrackDefaultList _create_2()
  +TrackDefault item()
}

class "lib::html::html_dart2js.dart::TrackElement" {
  {static} +int ERROR
  {static} +int LOADED
  {static} +int LOADING
  {static} +int NONE
  {static} +bool supported
  +bool? defaultValue
  +String? kind
  +String? label
  +int? readyState
  +String? src
  +String? srclang
  +TextTrack? track
}

class "lib::html::html_dart2js.dart::TrackEvent" {
  +Object? track
  {static} -TrackEvent _create_1()
  {static} -TrackEvent _create_2()
}

class "lib::html::html_dart2js.dart::TransitionEvent" {
  +num? elapsedTime
  +String? propertyName
  +String? pseudoElement
  {static} -TransitionEvent _create_1()
  {static} -TransitionEvent _create_2()
}

class "lib::html::html_dart2js.dart::TreeWalker" {
  +Node currentNode
  +NodeFilter? filter
  +Node root
  +int whatToShow
  +Node? firstChild()
  +Node? lastChild()
  +Node? nextNode()
  +Node? nextSibling()
  +Node? parentNode()
  +Node? previousNode()
  +Node? previousSibling()
}

class "lib::html::html_dart2js.dart::TrustedHtml" {
  {static} +TrustedHtml escape()
  {static} +TrustedHtml unsafelyCreate()
}

class "lib::html::html_dart2js.dart::TrustedScriptUrl" {
  {static} +TrustedScriptUrl unsafelyCreate()
}

class "lib::html::html_dart2js.dart::TrustedUrl" {
  {static} +TrustedUrl create()
  {static} +TrustedUrl unsafelyCreate()
}

class "lib::html::html_dart2js.dart::UIEvent" {
  +int? detail
  +InputDeviceCapabilities? sourceCapabilities
  +WindowBase? view
  -dynamic _get_view
  -int? _which
  {static} -UIEvent _create_1()
  {static} -UIEvent _create_2()
  -void _initUIEvent()
}

class "lib::html::html_dart2js.dart::UListElement" {
}

class "lib::html::html_dart2js.dart::UnderlyingSourceBase" {
  +dynamic cancel()
  +void notifyLockAcquired()
  +void notifyLockReleased()
  +dynamic pull()
  +dynamic start()
}

class "lib::html::html_dart2js.dart::UnknownElement" {
}

class "lib::html::html_dart2js.dart::Url" {
  +String? hash
  +String? host
  +String? hostname
  +String? href
  +String? origin
  +String? password
  +String? pathname
  +String? port
  +String? protocol
  +String? search
  +UrlSearchParams? searchParams
  +String? username
  {static} +String createObjectUrl()
  {static} +String createObjectUrlFromSource()
  {static} +String createObjectUrlFromStream()
  {static} +String createObjectUrlFromBlob()
  {static} +void revokeObjectUrl()
  +String toString()
}

class "lib::html::html_dart2js.dart::UrlSearchParams" {
  {static} -UrlSearchParams _create_1()
  {static} -UrlSearchParams _create_2()
  +void append()
  +void delete()
  +String? get()
  +List<String> getAll()
  +bool has()
  +void set()
  +void sort()
}

abstract class "lib::html::html_dart2js.dart::UrlUtilsReadOnly" {
  +String? hash
  +String? host
  +String? hostname
  +String? href
  +String? origin
  +String? pathname
  +String? port
  +String? protocol
  +String? search
}

class "lib::html::html_dart2js.dart::VR" {
  +dynamic getDevices()
}

class "lib::html::html_dart2js.dart::VRCoordinateSystem" {
  +Float32List? getTransformTo()
}

class "lib::html::html_dart2js.dart::VRDevice" {
  +String? deviceName
  +bool? isExternal
  +dynamic requestSession()
  +dynamic supportsSession()
}

class "lib::html::html_dart2js.dart::VRDeviceEvent" {
  +VRDevice? device
  {static} -VRDeviceEvent _create_1()
}

class "lib::html::html_dart2js.dart::VRDisplay" {
  +VRDisplayCapabilities? capabilities
  +num? depthFar
  +num? depthNear
  +int? displayId
  +String? displayName
  +bool? isPresenting
  +VRStageParameters? stageParameters
  +void cancelAnimationFrame()
  +dynamic exitPresent()
  +VREyeParameters getEyeParameters()
  +bool getFrameData()
  +List<Map<dynamic, dynamic>> getLayers()
  +int requestAnimationFrame()
  +dynamic requestPresent()
  +void submitFrame()
}

class "lib::html::html_dart2js.dart::VRDisplayCapabilities" {
  +bool? canPresent
  +bool? hasExternalDisplay
  +bool? hasPosition
  +int? maxLayers
}

class "lib::html::html_dart2js.dart::VRDisplayEvent" {
  +VRDisplay? display
  +String? reason
  {static} -VRDisplayEvent _create_1()
  {static} -VRDisplayEvent _create_2()
}

class "lib::html::html_dart2js.dart::VREyeParameters" {
  +Float32List? offset
  +int? renderHeight
  +int? renderWidth
}

class "lib::html::html_dart2js.dart::VRFrameData" {
  +Float32List? leftProjectionMatrix
  +Float32List? leftViewMatrix
  +VRPose? pose
  +Float32List? rightProjectionMatrix
  +Float32List? rightViewMatrix
  {static} -VRFrameData _create_1()
}

class "lib::html::html_dart2js.dart::VRFrameOfReference" {
  +VRStageBounds? bounds
  +num? emulatedHeight
}

class "lib::html::html_dart2js.dart::VRPose" {
  +Float32List? angularAcceleration
  +Float32List? angularVelocity
  +Float32List? linearAcceleration
  +Float32List? linearVelocity
  +Float32List? orientation
  +Float32List? position
}

class "lib::html::html_dart2js.dart::VRSession" {
  {static} +EventStreamProvider<Event> blurEvent
  {static} +EventStreamProvider<Event> focusEvent
  +num? depthFar
  +num? depthNear
  +VRDevice? device
  +bool? exclusive
  +Stream<Event> onBlur
  +Stream<Event> onFocus
  +dynamic end()
  +dynamic requestFrameOfReference()
}

class "lib::html::html_dart2js.dart::VRSessionEvent" {
  +VRSession? session
  {static} -VRSessionEvent _create_1()
}

class "lib::html::html_dart2js.dart::VRStageBounds" {
  +List<VRStageBoundsPoint>? geometry
}

class "lib::html::html_dart2js.dart::VRStageBoundsPoint" {
  +num? x
  +num? z
}

class "lib::html::html_dart2js.dart::VRStageParameters" {
  +Float32List? sittingToStandingTransform
  +num? sizeX
  +num? sizeZ
}

class "lib::html::html_dart2js.dart::ValidityState" {
  +bool? badInput
  +bool? customError
  +bool? patternMismatch
  +bool? rangeOverflow
  +bool? rangeUnderflow
  +bool? stepMismatch
  +bool? tooLong
  +bool? tooShort
  +bool? typeMismatch
  +bool? valid
  +bool? valueMissing
}

class "lib::html::html_dart2js.dart::VideoElement" {
  +int height
  +String poster
  +int videoHeight
  +int videoWidth
  +int? decodedFrameCount
  +int? droppedFrameCount
  +int width
  +VideoPlaybackQuality getVideoPlaybackQuality()
  +void enterFullscreen()
  +void exitFullscreen()
}

class "lib::html::html_dart2js.dart::VideoPlaybackQuality" {
  +int? corruptedVideoFrames
  +num? creationTime
  +int? droppedVideoFrames
  +int? totalVideoFrames
}

class "lib::html::html_dart2js.dart::VideoTrack" {
  +String? id
  +String? kind
  +String? label
  +String? language
  +bool? selected
  +SourceBuffer? sourceBuffer
}

class "lib::html::html_dart2js.dart::VideoTrackList" {
  {static} +EventStreamProvider<Event> changeEvent
  +int? length
  +int? selectedIndex
  +Stream<Event> onChange
  -VideoTrack __getter__()
  +VideoTrack? getTrackById()
}

class "lib::html::html_dart2js.dart::VisualViewport" {
  {static} +EventStreamProvider<Event> resizeEvent
  {static} +EventStreamProvider<Event> scrollEvent
  +num? height
  +num? offsetLeft
  +num? offsetTop
  +num? pageLeft
  +num? pageTop
  +num? scale
  +num? width
  +Stream<Event> onResize
  +Stream<Event> onScroll
}

class "lib::html::html_dart2js.dart::VttCue" {
  +String? align
  +Object? line
  +Object? position
  +VttRegion? region
  +num? size
  +bool? snapToLines
  +String? text
  +String? vertical
  {static} -VttCue _create_1()
  +DocumentFragment getCueAsHtml()
}

class "lib::html::html_dart2js.dart::VttRegion" {
  +String? id
  +int? lines
  +num? regionAnchorX
  +num? regionAnchorY
  +String? scroll
  +num? viewportAnchorX
  +num? viewportAnchorY
  +num? width
  {static} -VttRegion _create_1()
}

class "lib::html::html_dart2js.dart::WebSocket" {
  {static} +EventStreamProvider<CloseEvent> closeEvent
  {static} +EventStreamProvider<Event> errorEvent
  {static} +EventStreamProvider<MessageEvent> messageEvent
  {static} +EventStreamProvider<Event> openEvent
  {static} +int CLOSED
  {static} +int CLOSING
  {static} +int CONNECTING
  {static} +int OPEN
  {static} +bool supported
  +String? binaryType
  +int? bufferedAmount
  +String? extensions
  +String? protocol
  +int readyState
  +String? url
  +Stream<CloseEvent> onClose
  +Stream<Event> onError
  +Stream<MessageEvent> onMessage
  +Stream<Event> onOpen
  {static} -WebSocket _create_1()
  {static} -WebSocket _create_2()
  +void close()
  +void send()
  +void sendBlob()
  +void sendByteBuffer()
  +void sendString()
  +void sendTypedData()
}

class "lib::html::html_dart2js.dart::WheelEvent" {
  {static} +int DOM_DELTA_LINE
  {static} +int DOM_DELTA_PAGE
  {static} +int DOM_DELTA_PIXEL
  -num? _deltaX
  -num? _deltaY
  +num? deltaZ
  +num deltaY
  +num deltaX
  +int deltaMode
  -num _wheelDelta
  -num _wheelDeltaX
  -num _detail
  -bool _hasInitMouseScrollEvent
  -bool _hasInitWheelEvent
  {static} -WheelEvent _create_1()
  {static} -WheelEvent _create_2()
  -void _initMouseScrollEvent()
  -void _initWheelEvent()
}

class "lib::html::html_dart2js.dart::Window" {
  {static} +EventStreamProvider<Event> contentLoadedEvent
  {static} +EventStreamProvider<DeviceMotionEvent> deviceMotionEvent
  {static} +EventStreamProvider<DeviceOrientationEvent> deviceOrientationEvent
  {static} +EventStreamProvider<Event> hashChangeEvent
  {static} +EventStreamProvider<Event> loadStartEvent
  {static} +EventStreamProvider<MessageEvent> messageEvent
  {static} +EventStreamProvider<Event> offlineEvent
  {static} +EventStreamProvider<Event> onlineEvent
  {static} +EventStreamProvider<Event> pageHideEvent
  {static} +EventStreamProvider<Event> pageShowEvent
  {static} +EventStreamProvider<PopStateEvent> popStateEvent
  {static} +EventStreamProvider<Event> progressEvent
  {static} +EventStreamProvider<StorageEvent> storageEvent
  {static} +EventStreamProvider<Event> unloadEvent
  {static} +EventStreamProvider<AnimationEvent> animationEndEvent
  {static} +EventStreamProvider<AnimationEvent> animationIterationEvent
  {static} +EventStreamProvider<AnimationEvent> animationStartEvent
  {static} +int PERSISTENT
  {static} +int TEMPORARY
  {static} +EventStreamProvider<BeforeUnloadEvent> beforeUnloadEvent
  +dynamic animationFrame
  +Document document
  +Location location
  -dynamic _location
  +IdbFactory? indexedDB
  +Console console
  {static} +bool supportsPointConversions
  +_Worklet? animationWorklet
  +ApplicationCache? applicationCache
  +_Worklet? audioWorklet
  +CacheStorage? caches
  +bool? closed
  +CookieStore? cookieStore
  +Crypto? crypto
  +CustomElementRegistry? customElements
  +String? defaultStatus
  +String? defaultstatus
  +num devicePixelRatio
  +External? external
  +History history
  +int? innerHeight
  +int? innerWidth
  +bool? isSecureContext
  +Storage localStorage
  +BarProp? locationbar
  +BarProp? menubar
  +String? name
  +Navigator navigator
  +bool? offscreenBuffering
  +WindowBase? opener
  -dynamic _get_opener
  +int? orientation
  +String? origin
  +int outerHeight
  +int outerWidth
  -num _pageXOffset
  -num _pageYOffset
  +WindowBase? parent
  -dynamic _get_parent
  +Performance performance
  +Screen? screen
  +int? screenLeft
  +int? screenTop
  +int? screenX
  +int? screenY
  +BarProp? scrollbars
  +WindowBase? self
  -dynamic _get_self
  +Storage sessionStorage
  +SpeechSynthesis? speechSynthesis
  +String? status
  +BarProp? statusbar
  +StyleMedia? styleMedia
  +BarProp? toolbar
  +WindowBase? top
  -dynamic _get_top
  +VisualViewport? visualViewport
  +WindowBase? window
  -dynamic _get_window
  +Stream<Event> onContentLoaded
  +Stream<Event> onAbort
  +Stream<Event> onBlur
  +Stream<Event> onCanPlay
  +Stream<Event> onCanPlayThrough
  +Stream<Event> onChange
  +Stream<MouseEvent> onClick
  +Stream<MouseEvent> onContextMenu
  +Stream<Event> onDoubleClick
  +Stream<DeviceMotionEvent> onDeviceMotion
  +Stream<DeviceOrientationEvent> onDeviceOrientation
  +Stream<MouseEvent> onDrag
  +Stream<MouseEvent> onDragEnd
  +Stream<MouseEvent> onDragEnter
  +Stream<MouseEvent> onDragLeave
  +Stream<MouseEvent> onDragOver
  +Stream<MouseEvent> onDragStart
  +Stream<MouseEvent> onDrop
  +Stream<Event> onDurationChange
  +Stream<Event> onEmptied
  +Stream<Event> onEnded
  +Stream<Event> onError
  +Stream<Event> onFocus
  +Stream<Event> onHashChange
  +Stream<Event> onInput
  +Stream<Event> onInvalid
  +Stream<KeyboardEvent> onKeyDown
  +Stream<KeyboardEvent> onKeyPress
  +Stream<KeyboardEvent> onKeyUp
  +Stream<Event> onLoad
  +Stream<Event> onLoadedData
  +Stream<Event> onLoadedMetadata
  +Stream<Event> onLoadStart
  +Stream<MessageEvent> onMessage
  +Stream<MouseEvent> onMouseDown
  +Stream<MouseEvent> onMouseEnter
  +Stream<MouseEvent> onMouseLeave
  +Stream<MouseEvent> onMouseMove
  +Stream<MouseEvent> onMouseOut
  +Stream<MouseEvent> onMouseOver
  +Stream<MouseEvent> onMouseUp
  +Stream<WheelEvent> onMouseWheel
  +Stream<Event> onOffline
  +Stream<Event> onOnline
  +Stream<Event> onPageHide
  +Stream<Event> onPageShow
  +Stream<Event> onPause
  +Stream<Event> onPlay
  +Stream<Event> onPlaying
  +Stream<PopStateEvent> onPopState
  +Stream<Event> onProgress
  +Stream<Event> onRateChange
  +Stream<Event> onReset
  +Stream<Event> onResize
  +Stream<Event> onScroll
  +Stream<Event> onSearch
  +Stream<Event> onSeeked
  +Stream<Event> onSeeking
  +Stream<Event> onSelect
  +Stream<Event> onStalled
  +Stream<StorageEvent> onStorage
  +Stream<Event> onSubmit
  +Stream<Event> onSuspend
  +Stream<Event> onTimeUpdate
  +Stream<TouchEvent> onTouchCancel
  +Stream<TouchEvent> onTouchEnd
  +Stream<TouchEvent> onTouchMove
  +Stream<TouchEvent> onTouchStart
  +Stream<TransitionEvent> onTransitionEnd
  +Stream<Event> onUnload
  +Stream<Event> onVolumeChange
  +Stream<Event> onWaiting
  +Stream<AnimationEvent> onAnimationEnd
  +Stream<AnimationEvent> onAnimationIteration
  +Stream<AnimationEvent> onAnimationStart
  +Stream<Event> onBeforeUnload
  +Stream<WheelEvent> onWheel
  +int pageXOffset
  +int pageYOffset
  +int scrollX
  +int scrollY
  -WindowBase? _open2()
  -WindowBase? _open3()
  +WindowBase open()
  +int requestAnimationFrame()
  +void cancelAnimationFrame()
  -int _requestAnimationFrame()
  -void _cancelAnimationFrame()
  -dynamic _ensureRequestAnimationFrame()
  +dynamic requestFileSystem()
  -WindowBase __getter__()
  -dynamic __getter___1()
  -dynamic __getter___2()
  +void alert()
  +void cancelIdleCallback()
  +void close()
  +bool confirm()
  +dynamic fetch()
  +bool find()
  -CssStyleDeclaration _getComputedStyle()
  +StylePropertyMapReadonly getComputedStyleMap()
  +List<CssRule> getMatchedCssRules()
  +Selection? getSelection()
  +MediaQueryList matchMedia()
  +void moveBy()
  -void _moveTo()
  +void postMessage()
  -void _postMessage_1()
  -void _postMessage_2()
  +void print()
  +int requestIdleCallback()
  -int _requestIdleCallback_1()
  -int _requestIdleCallback_2()
  +void resizeBy()
  +void resizeTo()
  +void scroll()
  -void _scroll_1()
  -void _scroll_2()
  -void _scroll_3()
  -void _scroll_4()
  -void _scroll_5()
  +void scrollBy()
  -void _scrollBy_1()
  -void _scrollBy_2()
  -void _scrollBy_3()
  -void _scrollBy_4()
  -void _scrollBy_5()
  +void scrollTo()
  -void _scrollTo_1()
  -void _scrollTo_2()
  -void _scrollTo_3()
  -void _scrollTo_4()
  -void _scrollTo_5()
  +void stop()
  -void __requestFileSystem()
  -dynamic _requestFileSystem()
  -void _resolveLocalFileSystemUrl()
  +dynamic resolveLocalFileSystemUrl()
  +String atob()
  +String btoa()
  -int _setInterval_String()
  -int _setTimeout_String()
  -void _clearInterval()
  -void _clearTimeout()
  -int _setInterval()
  -int _setTimeout()
  +void moveTo()
}

class "lib::html::html_dart2js.dart::NullWindowException" {
  +String toString()
}

abstract class "lib::html::html_dart2js.dart::WindowBase64" {
  +String atob()
  +String btoa()
}

class "lib::html::html_dart2js.dart::WindowClient" {
  +bool? focused
  +String? visibilityState
  +dynamic focus()
  +dynamic navigate()
}

abstract class "lib::html::html_dart2js.dart::WindowEventHandlers" {
  {static} +EventStreamProvider<Event> hashChangeEvent
  {static} +EventStreamProvider<MessageEvent> messageEvent
  {static} +EventStreamProvider<Event> offlineEvent
  {static} +EventStreamProvider<Event> onlineEvent
  {static} +EventStreamProvider<PopStateEvent> popStateEvent
  {static} +EventStreamProvider<StorageEvent> storageEvent
  {static} +EventStreamProvider<Event> unloadEvent
  +Stream<Event> onHashChange
  +Stream<MessageEvent> onMessage
  +Stream<Event> onOffline
  +Stream<Event> onOnline
  +Stream<PopStateEvent> onPopState
  +Stream<StorageEvent> onStorage
  +Stream<Event> onUnload
}

class "lib::html::html_dart2js.dart::Worker" {
  {static} +EventStreamProvider<Event> errorEvent
  {static} +EventStreamProvider<MessageEvent> messageEvent
  {static} +bool supported
  +Stream<Event> onError
  +Stream<MessageEvent> onMessage
  {static} -Worker _create_1()
  +void postMessage()
  -void _postMessage_1()
  -void _postMessage_2()
  +void terminate()
}

class "lib::html::html_dart2js.dart::WorkerGlobalScope" {
  {static} +EventStreamProvider<Event> errorEvent
  +String? addressSpace
  +CacheStorage? caches
  +Crypto? crypto
  +IdbFactory? indexedDB
  +bool? isSecureContext
  +_WorkerLocation location
  +_WorkerNavigator navigator
  +String? origin
  +WorkerPerformance? performance
  +WorkerGlobalScope self
  +Stream<Event> onError
  {static} +WorkerGlobalScope instance
  +dynamic fetch()
  +void importScripts()
  +String atob()
  +String btoa()
  -int _setInterval_String()
  -int _setTimeout_String()
  -void _clearInterval()
  -void _clearTimeout()
  -int _setInterval()
  -int _setTimeout()
}

class "lib::html::html_dart2js.dart::WorkerPerformance" {
  +MemoryInfo? memory
  +num? timeOrigin
  +void clearMarks()
  +void clearMeasures()
  +void clearResourceTimings()
  +List<PerformanceEntry> getEntries()
  +List<PerformanceEntry> getEntriesByName()
  +List<PerformanceEntry> getEntriesByType()
  +void mark()
  +void measure()
  +double now()
  +void setResourceTimingBufferSize()
}

class "lib::html::html_dart2js.dart::WorkletAnimation" {
  +String? playState
  {static} -WorkletAnimation _create_1()
  +void cancel()
  +void play()
}

class "lib::html::html_dart2js.dart::WorkletGlobalScope" {
}

class "lib::html::html_dart2js.dart::XPathEvaluator" {
  {static} -XPathEvaluator _create_1()
  +XPathExpression createExpression()
  +XPathNSResolver createNSResolver()
  +XPathResult evaluate()
}

class "lib::html::html_dart2js.dart::XPathExpression" {
  +XPathResult evaluate()
}

class "lib::html::html_dart2js.dart::XPathNSResolver" {
  +String? lookupNamespaceUri()
}

class "lib::html::html_dart2js.dart::XPathResult" {
  {static} +int ANY_TYPE
  {static} +int ANY_UNORDERED_NODE_TYPE
  {static} +int BOOLEAN_TYPE
  {static} +int FIRST_ORDERED_NODE_TYPE
  {static} +int NUMBER_TYPE
  {static} +int ORDERED_NODE_ITERATOR_TYPE
  {static} +int ORDERED_NODE_SNAPSHOT_TYPE
  {static} +int STRING_TYPE
  {static} +int UNORDERED_NODE_ITERATOR_TYPE
  {static} +int UNORDERED_NODE_SNAPSHOT_TYPE
  +bool? booleanValue
  +bool? invalidIteratorState
  +num? numberValue
  +int? resultType
  +Node? singleNodeValue
  +int? snapshotLength
  +String? stringValue
  +Node? iterateNext()
  +Node? snapshotItem()
}

class "lib::html::html_dart2js.dart::XmlDocument" {
}

class "lib::html::html_dart2js.dart::XmlSerializer" {
  {static} -XmlSerializer _create_1()
  +String serializeToString()
}

class "lib::html::html_dart2js.dart::XsltProcessor" {
  {static} +bool supported
  {static} -XsltProcessor _create_1()
  +void clearParameters()
  +String? getParameter()
  +void importStylesheet()
  +void removeParameter()
  +void reset()
  +void setParameter()
  +Document? transformToDocument()
  +DocumentFragment? transformToFragment()
}

class "lib::html::html_dart2js.dart::_Attr" {
  -String? _localName
  +String? name
  -String? _namespaceUri
  +String? value
}

abstract class "lib::html::html_dart2js.dart::_Bluetooth" {
}

abstract class "lib::html::html_dart2js.dart::_BluetoothCharacteristicProperties" {
}

abstract class "lib::html::html_dart2js.dart::_BluetoothDevice" {
}

abstract class "lib::html::html_dart2js.dart::_BluetoothRemoteGATTCharacteristic" {
}

abstract class "lib::html::html_dart2js.dart::_BluetoothRemoteGATTServer" {
}

abstract class "lib::html::html_dart2js.dart::_BluetoothRemoteGATTService" {
}

abstract class "lib::html::html_dart2js.dart::_BluetoothUUID" {
}

class "lib::html::html_dart2js.dart::_BudgetService" {
  +dynamic getBudget()
  +dynamic getCost()
  +dynamic reserve()
}

abstract class "lib::html::html_dart2js.dart::_Cache" {
}

abstract class "lib::html::html_dart2js.dart::_CanvasPath" {
}

class "lib::html::html_dart2js.dart::_Clipboard" {
  +dynamic read()
  +dynamic readText()
  +dynamic write()
  +dynamic writeText()
}

class "lib::html::html_dart2js.dart::_CssRuleList" {
  +int length
  +CssRule first
  +CssRule last
  +CssRule single
  +CssRule []()
  +void []=()
  +CssRule elementAt()
  +CssRule? item()
}

abstract class "lib::html::html_dart2js.dart::_DOMFileSystemSync" {
}

abstract class "lib::html::html_dart2js.dart::_DirectoryEntrySync" {
}

abstract class "lib::html::html_dart2js.dart::_DirectoryReaderSync" {
}

abstract class "lib::html::html_dart2js.dart::_DocumentType" {
}

class "lib::html::html_dart2js.dart::_DomRect" {
  +int hashCode
  +Point<num> topLeft
  +Point<num> topRight
  +Point<num> bottomRight
  +Point<num> bottomLeft
  -num? _height
  +num height
  -num? _width
  +num width
  +num? x
  +num? y
  +String toString()
  +bool ==()
  +Rectangle<num>? intersection()
  +bool intersects()
  +Rectangle<num> boundingBox()
  +bool containsRectangle()
  +bool containsPoint()
  {static} -_DomRect _create_1()
  {static} -_DomRect _create_2()
  {static} -_DomRect _create_3()
  {static} -_DomRect _create_4()
  {static} -_DomRect _create_5()
}

abstract class "lib::html::html_dart2js.dart::_EntrySync" {
}

abstract class "lib::html::html_dart2js.dart::_FileEntrySync" {
}

abstract class "lib::html::html_dart2js.dart::_FileReaderSync" {
  {static} -_FileReaderSync _create_1()
}

abstract class "lib::html::html_dart2js.dart::_FileWriterSync" {
}

class "lib::html::html_dart2js.dart::_GamepadList" {
  +int length
  +Gamepad? first
  +Gamepad? last
  +Gamepad? single
  +Gamepad? []()
  +void []=()
  +Gamepad? elementAt()
  +Gamepad item()
}

abstract class "lib::html::html_dart2js.dart::_HTMLAllCollection" {
  -Element _item()
}

abstract class "lib::html::html_dart2js.dart::_HTMLDirectoryElement" {
}

abstract class "lib::html::html_dart2js.dart::_HTMLFontElement" {
}

abstract class "lib::html::html_dart2js.dart::_HTMLFrameElement" {
}

abstract class "lib::html::html_dart2js.dart::_HTMLFrameSetElement" {
}

abstract class "lib::html::html_dart2js.dart::_HTMLMarqueeElement" {
}

abstract class "lib::html::html_dart2js.dart::_Mojo" {
}

abstract class "lib::html::html_dart2js.dart::_MojoHandle" {
}

abstract class "lib::html::html_dart2js.dart::_MojoInterfaceInterceptor" {
  {static} -_MojoInterfaceInterceptor _create_1()
  {static} -_MojoInterfaceInterceptor _create_2()
}

abstract class "lib::html::html_dart2js.dart::_MojoInterfaceRequestEvent" {
  {static} -_MojoInterfaceRequestEvent _create_1()
  {static} -_MojoInterfaceRequestEvent _create_2()
}

abstract class "lib::html::html_dart2js.dart::_MojoWatcher" {
}

abstract class "lib::html::html_dart2js.dart::_NFC" {
}

class "lib::html::html_dart2js.dart::_NamedNodeMap" {
  +int length
  +Node first
  +Node last
  +Node single
  +Node []()
  +void []=()
  +Node elementAt()
  +_Attr? getNamedItem()
  +_Attr? getNamedItemNS()
  +_Attr? item()
  +_Attr removeNamedItem()
  +_Attr removeNamedItemNS()
  +_Attr? setNamedItem()
  +_Attr? setNamedItemNS()
}

abstract class "lib::html::html_dart2js.dart::_PagePopupController" {
}

class "lib::html::html_dart2js.dart::_Report" {
  +ReportBody? body
  +String? type
  +String? url
}

class "lib::html::html_dart2js.dart::_Request" {
  +String? cache
  +String? credentials
  +Headers? headers
  +String? integrity
  +String? mode
  +String? redirect
  +String? referrer
  +String? referrerPolicy
  +String? url
  {static} -_Request _create_1()
  {static} -_Request _create_2()
  +_Request clone()
}

abstract class "lib::html::html_dart2js.dart::_ResourceProgressEvent" {
}

abstract class "lib::html::html_dart2js.dart::_Response" {
  {static} -_Response _create_1()
  {static} -_Response _create_2()
  {static} -_Response _create_3()
}

class "lib::html::html_dart2js.dart::_SpeechRecognitionResultList" {
  +int length
  +SpeechRecognitionResult first
  +SpeechRecognitionResult last
  +SpeechRecognitionResult single
  +SpeechRecognitionResult []()
  +void []=()
  +SpeechRecognitionResult elementAt()
  +SpeechRecognitionResult item()
}

class "lib::html::html_dart2js.dart::_StyleSheetList" {
  +int length
  +StyleSheet first
  +StyleSheet last
  +StyleSheet single
  +StyleSheet []()
  +void []=()
  +StyleSheet elementAt()
  -CssStyleSheet __getter__()
  +StyleSheet? item()
}

abstract class "lib::html::html_dart2js.dart::_SubtleCrypto" {
}

abstract class "lib::html::html_dart2js.dart::_USB" {
}

abstract class "lib::html::html_dart2js.dart::_USBAlternateInterface" {
  {static} -_USBAlternateInterface _create_1()
}

abstract class "lib::html::html_dart2js.dart::_USBConfiguration" {
  {static} -_USBConfiguration _create_1()
}

abstract class "lib::html::html_dart2js.dart::_USBConnectionEvent" {
  {static} -_USBConnectionEvent _create_1()
}

abstract class "lib::html::html_dart2js.dart::_USBDevice" {
}

abstract class "lib::html::html_dart2js.dart::_USBEndpoint" {
  {static} -_USBEndpoint _create_1()
}

abstract class "lib::html::html_dart2js.dart::_USBInTransferResult" {
  {static} -_USBInTransferResult _create_1()
  {static} -_USBInTransferResult _create_2()
}

abstract class "lib::html::html_dart2js.dart::_USBInterface" {
  {static} -_USBInterface _create_1()
}

abstract class "lib::html::html_dart2js.dart::_USBIsochronousInTransferPacket" {
  {static} -_USBIsochronousInTransferPacket _create_1()
  {static} -_USBIsochronousInTransferPacket _create_2()
}

abstract class "lib::html::html_dart2js.dart::_USBIsochronousInTransferResult" {
  {static} -_USBIsochronousInTransferResult _create_1()
  {static} -_USBIsochronousInTransferResult _create_2()
}

abstract class "lib::html::html_dart2js.dart::_USBIsochronousOutTransferPacket" {
  {static} -_USBIsochronousOutTransferPacket _create_1()
  {static} -_USBIsochronousOutTransferPacket _create_2()
}

abstract class "lib::html::html_dart2js.dart::_USBIsochronousOutTransferResult" {
  {static} -_USBIsochronousOutTransferResult _create_1()
}

abstract class "lib::html::html_dart2js.dart::_USBOutTransferResult" {
  {static} -_USBOutTransferResult _create_1()
  {static} -_USBOutTransferResult _create_2()
}

abstract class "lib::html::html_dart2js.dart::_WindowTimers" {
  -int _setInterval_String()
  -int _setTimeout_String()
  -void _clearInterval()
  -void _clearTimeout()
  -int _setInterval()
  -int _setTimeout()
}

abstract class "lib::html::html_dart2js.dart::_WorkerLocation" {
}

abstract class "lib::html::html_dart2js.dart::_WorkerNavigator" {
}

abstract class "lib::html::html_dart2js.dart::_Worklet" {
}

abstract class "lib::html::html_dart2js.dart::_AttributeMap" {
  -Element _element
  +Iterable<String> keys
  +Iterable<String> values
  +bool isEmpty
  +bool isNotEmpty
  +void addAll()
  +Map<K, V> cast()
  +bool containsValue()
  +String putIfAbsent()
  +void clear()
  +void forEach()
  -bool _matches()
}

class "lib::html::html_dart2js.dart::_ElementAttributeMap" {
  +int length
  +bool containsKey()
  +String? []()
  +void []=()
  +String? remove()
  -bool _matches()
  {static} -String? _remove()
}

class "lib::html::html_dart2js.dart::_NamespacedAttributeMap" {
  -String? _namespace
  +int length
  +bool containsKey()
  +String? []()
  +void []=()
  +String? remove()
  -bool _matches()
  {static} -String? _remove()
}

class "lib::html::html_dart2js.dart::_DataAttributeMap" {
  -Map<String, String> _attributes
  +Iterable<String> keys
  +Iterable<String> values
  +int length
  +bool isEmpty
  +bool isNotEmpty
  +void addAll()
  +Map<K, V> cast()
  +bool containsValue()
  +bool containsKey()
  +String? []()
  +void []=()
  +String putIfAbsent()
  +String? remove()
  +void clear()
  +void forEach()
  -String _attr()
  -bool _matches()
  -String _strip()
  -String _toCamelCase()
  -String _toHyphenedName()
}

abstract class "lib::html::html_dart2js.dart::CanvasImageSource" {
}

abstract class "lib::html::html_dart2js.dart::WindowBase" {
  +LocationBase location
  +HistoryBase history
  +bool? closed
  +WindowBase? opener
  +WindowBase? parent
  +WindowBase? top
  +void close()
  +void postMessage()
}

abstract class "lib::html::html_dart2js.dart::LocationBase" {
  +String href
}

abstract class "lib::html::html_dart2js.dart::HistoryBase" {
  +void back()
  +void forward()
  +void go()
}

abstract class "lib::html::html_dart2js.dart::CssClassSet" {
  +bool frozen
  +bool toggle()
  +bool contains()
  +bool add()
  +bool remove()
  +void addAll()
  +void removeAll()
  +void toggleAll()
}

class "lib::html::html_dart2js.dart::_ContentCssRect" {
  +num height
  +num width
  +num left
  +num top
}

class "lib::html::html_dart2js.dart::_ContentCssListRect" {
  -List<Element> _elementList
  +dynamic height
  +dynamic width
}

class "lib::html::html_dart2js.dart::_PaddingCssRect" {
  +num height
  +num width
  +num left
  +num top
}

class "lib::html::html_dart2js.dart::_BorderCssRect" {
  +num height
  +num width
  +num left
  +num top
}

class "lib::html::html_dart2js.dart::_MarginCssRect" {
  +num height
  +num width
  +num left
  +num top
}

abstract class "lib::html::html_dart2js.dart::CssRect" {
  -Element _element
  +num left
  +num top
  +num height
  +num width
  +num right
  +num bottom
  +int hashCode
  +Point<num> topLeft
  +Point<num> topRight
  +Point<num> bottomRight
  +Point<num> bottomLeft
  -num _addOrSubtractToBoxModel()
  +String toString()
  +bool ==()
  +Rectangle<num>? intersection()
  +bool intersects()
  +Rectangle<num> boundingBox()
  +bool containsRectangle()
  +bool containsPoint()
}

class "lib::html::html_dart2js.dart::_MultiElementCssClassSet" {
  -Iterable<Element> _elementIterable
  -List<CssClassSetImpl> _sets
  +Set<String> readClasses()
  +void writeClasses()
  +dynamic modify()
  +bool toggle()
  +bool remove()
}

class "lib::html::html_dart2js.dart::_ElementCssClassSet" {
  -Element _element
  +int length
  +bool isEmpty
  +bool isNotEmpty
  +Set<String> readClasses()
  +void writeClasses()
  +void clear()
  +bool contains()
  +bool add()
  +bool remove()
  +bool toggle()
  +void addAll()
  +void removeAll()
  +void retainAll()
  +void removeWhere()
  +void retainWhere()
  {static} -bool _contains()
  {static} -bool _add()
  {static} -bool _remove()
  {static} -bool _toggle()
  {static} -bool _toggleDefault()
  {static} -bool _toggleOnOff()
  {static} -void _addAll()
  {static} -void _removeAll()
  {static} -void _removeWhere()
  {static} -DomTokenList _classListOf()
  {static} -int _classListLength()
  {static} -bool _classListContains()
  {static} -bool _classListContainsBeforeAddOrRemove()
  {static} -void _classListAdd()
  {static} -void _classListRemove()
  {static} -bool _classListToggle1()
  {static} -bool _classListToggle2()
}

class "lib::html::html_dart2js.dart::Dimension" {
  -num _value
  -String _unit
  +num value
  +String toString()
}

class "lib::html::html_dart2js.dart::EventStreamProvider" {
  -String _eventType
  +Stream<T> forTarget()
  +ElementStream<T> forElement()
  -ElementStream<T> _forElementList()
  +String getEventType()
}

abstract class "lib::html::html_dart2js.dart::ElementStream" {
  +Stream<T> matches()
  +StreamSubscription<T> capture()
}

class "lib::html::html_dart2js.dart::_EventStream" {
  -EventTarget? _target
  -String _eventType
  -bool _useCapture
  +bool isBroadcast
  +Stream<T> asBroadcastStream()
  +StreamSubscription<T> listen()
}

class "lib::html::html_dart2js.dart::_ElementEventStreamImpl" {
  +Stream<T> matches()
  +StreamSubscription<T> capture()
}

class "lib::html::html_dart2js.dart::_ElementListEventStreamImpl" {
  -Iterable<Element> _targetList
  -bool _useCapture
  -String _eventType
  +bool isBroadcast
  +Stream<T> matches()
  +StreamSubscription<T> listen()
  +StreamSubscription<T> capture()
  +Stream<T> asBroadcastStream()
}

class "lib::html::html_dart2js.dart::_EventStreamSubscription" {
  -int _pauseCount
  -EventTarget? _target
  -String _eventType
  -dynamic Function(Event)? _onData
  -bool _useCapture
  -bool _canceled
  +bool isPaused
  +dynamic cancel()
  +void onData()
  +void onError()
  +void onDone()
  +void pause()
  +void resume()
  -void _tryResume()
  -void _unlisten()
  +dynamic asFuture()
}

abstract class "lib::html::html_dart2js.dart::CustomStream" {
  +void add()
}

class "lib::html::html_dart2js.dart::_CustomEventStreamImpl" {
  -StreamController<T> _streamController
  -String _type
  +bool isBroadcast
  +StreamSubscription<T> listen()
  +Stream<T> asBroadcastStream()
  +void add()
}

class "lib::html::html_dart2js.dart::_CustomKeyEventStreamImpl" {
  +void add()
}

class "lib::html::html_dart2js.dart::_StreamPool" {
  -StreamController<T>? _controller
  -Map<Stream<T>, StreamSubscription<T>> _subscriptions
  +Stream<T> stream
  +void add()
  +void remove()
  +void close()
}

class "lib::html::html_dart2js.dart::_CustomEventStreamProvider" {
  -dynamic _eventTypeGetter
  -String _eventType
  +Stream<T> forTarget()
  +ElementStream<T> forElement()
  -ElementStream<T> _forElementList()
  +String getEventType()
}

class "lib::html::html_dart2js.dart::_Html5NodeValidator" {
  {static} -Set<String> _allowedElements
  {static} -List<String> _standardAttributes
  {static} -List<String> _uriAttributes
  +UriPolicy uriPolicy
  {static} -Map<String, Function> _attributeValidators
  +bool allowsElement()
  +bool allowsAttribute()
  {static} -bool _standardAttributeValidator()
  {static} -bool _uriAttributeValidator()
}

class "lib::html::html_dart2js.dart::ImmutableListMixin" {
  +Iterator<E> iterator
  +void add()
  +void addAll()
  +void sort()
  +void shuffle()
  +void insert()
  +void insertAll()
  +void setAll()
  +E removeAt()
  +E removeLast()
  +bool remove()
  +void removeWhere()
  +void retainWhere()
  +void setRange()
  +void removeRange()
  +void replaceRange()
  +void fillRange()
}

abstract class "lib::html::html_dart2js.dart::KeyCode" {
  {static} +int WIN_KEY_FF_LINUX
  {static} +int MAC_ENTER
  {static} +int BACKSPACE
  {static} +int TAB
  {static} +int NUM_CENTER
  {static} +int ENTER
  {static} +int SHIFT
  {static} +int CTRL
  {static} +int ALT
  {static} +int PAUSE
  {static} +int CAPS_LOCK
  {static} +int ESC
  {static} +int SPACE
  {static} +int PAGE_UP
  {static} +int PAGE_DOWN
  {static} +int END
  {static} +int HOME
  {static} +int LEFT
  {static} +int UP
  {static} +int RIGHT
  {static} +int DOWN
  {static} +int NUM_NORTH_EAST
  {static} +int NUM_SOUTH_EAST
  {static} +int NUM_SOUTH_WEST
  {static} +int NUM_NORTH_WEST
  {static} +int NUM_WEST
  {static} +int NUM_NORTH
  {static} +int NUM_EAST
  {static} +int NUM_SOUTH
  {static} +int PRINT_SCREEN
  {static} +int INSERT
  {static} +int NUM_INSERT
  {static} +int DELETE
  {static} +int NUM_DELETE
  {static} +int ZERO
  {static} +int ONE
  {static} +int TWO
  {static} +int THREE
  {static} +int FOUR
  {static} +int FIVE
  {static} +int SIX
  {static} +int SEVEN
  {static} +int EIGHT
  {static} +int NINE
  {static} +int FF_SEMICOLON
  {static} +int FF_EQUALS
  {static} +int QUESTION_MARK
  {static} +int A
  {static} +int B
  {static} +int C
  {static} +int D
  {static} +int E
  {static} +int F
  {static} +int G
  {static} +int H
  {static} +int I
  {static} +int J
  {static} +int K
  {static} +int L
  {static} +int M
  {static} +int N
  {static} +int O
  {static} +int P
  {static} +int Q
  {static} +int R
  {static} +int S
  {static} +int T
  {static} +int U
  {static} +int V
  {static} +int W
  {static} +int X
  {static} +int Y
  {static} +int Z
  {static} +int META
  {static} +int WIN_KEY_LEFT
  {static} +int WIN_KEY_RIGHT
  {static} +int CONTEXT_MENU
  {static} +int NUM_ZERO
  {static} +int NUM_ONE
  {static} +int NUM_TWO
  {static} +int NUM_THREE
  {static} +int NUM_FOUR
  {static} +int NUM_FIVE
  {static} +int NUM_SIX
  {static} +int NUM_SEVEN
  {static} +int NUM_EIGHT
  {static} +int NUM_NINE
  {static} +int NUM_MULTIPLY
  {static} +int NUM_PLUS
  {static} +int NUM_MINUS
  {static} +int NUM_PERIOD
  {static} +int NUM_DIVISION
  {static} +int F1
  {static} +int F2
  {static} +int F3
  {static} +int F4
  {static} +int F5
  {static} +int F6
  {static} +int F7
  {static} +int F8
  {static} +int F9
  {static} +int F10
  {static} +int F11
  {static} +int F12
  {static} +int NUMLOCK
  {static} +int SCROLL_LOCK
  {static} +int FIRST_MEDIA_KEY
  {static} +int LAST_MEDIA_KEY
  {static} +int SEMICOLON
  {static} +int DASH
  {static} +int EQUALS
  {static} +int COMMA
  {static} +int PERIOD
  {static} +int SLASH
  {static} +int APOSTROPHE
  {static} +int TILDE
  {static} +int SINGLE_QUOTE
  {static} +int OPEN_SQUARE_BRACKET
  {static} +int BACKSLASH
  {static} +int CLOSE_SQUARE_BRACKET
  {static} +int WIN_KEY
  {static} +int MAC_FF_META
  {static} +int WIN_IME
  {static} +int UNKNOWN
  {static} +bool isCharacterKey()
  {static} -String _convertKeyCodeToKeyName()
}

abstract class "lib::html::html_dart2js.dart::KeyLocation" {
  {static} +int STANDARD
  {static} +int LEFT
  {static} +int RIGHT
  {static} +int NUMPAD
  {static} +int MOBILE
  {static} +int JOYSTICK
}

abstract class "lib::html::html_dart2js.dart::_KeyName" {
  {static} +String ACCEPT
  {static} +String ADD
  {static} +String AGAIN
  {static} +String ALL_CANDIDATES
  {static} +String ALPHANUMERIC
  {static} +String ALT
  {static} +String ALT_GRAPH
  {static} +String APPS
  {static} +String ATTN
  {static} +String BROWSER_BACK
  {static} +String BROWSER_FAVORITES
  {static} +String BROWSER_FORWARD
  {static} +String BROWSER_NAME
  {static} +String BROWSER_REFRESH
  {static} +String BROWSER_SEARCH
  {static} +String BROWSER_STOP
  {static} +String CAMERA
  {static} +String CAPS_LOCK
  {static} +String CLEAR
  {static} +String CODE_INPUT
  {static} +String COMPOSE
  {static} +String CONTROL
  {static} +String CRSEL
  {static} +String CONVERT
  {static} +String COPY
  {static} +String CUT
  {static} +String DECIMAL
  {static} +String DIVIDE
  {static} +String DOWN
  {static} +String DOWN_LEFT
  {static} +String DOWN_RIGHT
  {static} +String EJECT
  {static} +String END
  {static} +String ENTER
  {static} +String ERASE_EOF
  {static} +String EXECUTE
  {static} +String EXSEL
  {static} +String FN
  {static} +String F1
  {static} +String F2
  {static} +String F3
  {static} +String F4
  {static} +String F5
  {static} +String F6
  {static} +String F7
  {static} +String F8
  {static} +String F9
  {static} +String F10
  {static} +String F11
  {static} +String F12
  {static} +String F13
  {static} +String F14
  {static} +String F15
  {static} +String F16
  {static} +String F17
  {static} +String F18
  {static} +String F19
  {static} +String F20
  {static} +String F21
  {static} +String F22
  {static} +String F23
  {static} +String F24
  {static} +String FINAL_MODE
  {static} +String FIND
  {static} +String FULL_WIDTH
  {static} +String HALF_WIDTH
  {static} +String HANGUL_MODE
  {static} +String HANJA_MODE
  {static} +String HELP
  {static} +String HIRAGANA
  {static} +String HOME
  {static} +String INSERT
  {static} +String JAPANESE_HIRAGANA
  {static} +String JAPANESE_KATAKANA
  {static} +String JAPANESE_ROMAJI
  {static} +String JUNJA_MODE
  {static} +String KANA_MODE
  {static} +String KANJI_MODE
  {static} +String KATAKANA
  {static} +String LAUNCH_APPLICATION_1
  {static} +String LAUNCH_APPLICATION_2
  {static} +String LAUNCH_MAIL
  {static} +String LEFT
  {static} +String MENU
  {static} +String META
  {static} +String MEDIA_NEXT_TRACK
  {static} +String MEDIA_PAUSE_PLAY
  {static} +String MEDIA_PREVIOUS_TRACK
  {static} +String MEDIA_STOP
  {static} +String MODE_CHANGE
  {static} +String NEXT_CANDIDATE
  {static} +String NON_CONVERT
  {static} +String NUM_LOCK
  {static} +String PAGE_DOWN
  {static} +String PAGE_UP
  {static} +String PASTE
  {static} +String PAUSE
  {static} +String PLAY
  {static} +String POWER
  {static} +String PREVIOUS_CANDIDATE
  {static} +String PRINT_SCREEN
  {static} +String PROCESS
  {static} +String PROPS
  {static} +String RIGHT
  {static} +String ROMAN_CHARACTERS
  {static} +String SCROLL
  {static} +String SELECT
  {static} +String SELECT_MEDIA
  {static} +String SEPARATOR
  {static} +String SHIFT
  {static} +String SOFT_1
  {static} +String SOFT_2
  {static} +String SOFT_3
  {static} +String SOFT_4
  {static} +String STOP
  {static} +String SUBTRACT
  {static} +String SYMBOL_LOCK
  {static} +String UP
  {static} +String UP_LEFT
  {static} +String UP_RIGHT
  {static} +String UNDO
  {static} +String VOLUME_DOWN
  {static} +String VOLUMN_MUTE
  {static} +String VOLUMN_UP
  {static} +String WIN
  {static} +String ZOOM
  {static} +String BACKSPACE
  {static} +String TAB
  {static} +String CANCEL
  {static} +String ESC
  {static} +String SPACEBAR
  {static} +String DEL
  {static} +String DEAD_GRAVE
  {static} +String DEAD_EACUTE
  {static} +String DEAD_CIRCUMFLEX
  {static} +String DEAD_TILDE
  {static} +String DEAD_MACRON
  {static} +String DEAD_BREVE
  {static} +String DEAD_ABOVE_DOT
  {static} +String DEAD_UMLAUT
  {static} +String DEAD_ABOVE_RING
  {static} +String DEAD_DOUBLEACUTE
  {static} +String DEAD_CARON
  {static} +String DEAD_CEDILLA
  {static} +String DEAD_OGONEK
  {static} +String DEAD_IOTA
  {static} +String DEAD_VOICED_SOUND
  {static} +String DEC_SEMIVOICED_SOUND
  {static} +String UNIDENTIFIED
}

class "lib::html::html_dart2js.dart::_KeyboardEventHandler" {
  -List<KeyEvent> _keyDownList
  -String _type
  -EventTarget? _target
  {static} -int _ROMAN_ALPHABET_OFFSET
  -_CustomKeyEventStreamImpl _stream
  {static} -String _EVENT_TYPE
  {static} -Map<String, int> _keyIdentifier
  -bool _capsLockOn
  +CustomStream<KeyEvent> forTarget()
  -int _determineKeyCodeForKeypress()
  -int _findCharCodeKeyDown()
  -bool _firesKeyPressEvent()
  -int _normalizeKeyCodes()
  +void processKeyDown()
  +void processKeyPress()
  +void processKeyUp()
}

class "lib::html::html_dart2js.dart::KeyboardEventStream" {
  {static} +CustomStream<KeyEvent> onKeyPress()
  {static} +CustomStream<KeyEvent> onKeyUp()
  {static} +CustomStream<KeyEvent> onKeyDown()
}

class "lib::html::html_dart2js.dart::NodeValidatorBuilder" {
  -List<NodeValidator> _validators
  +void allowNavigation()
  +void allowImages()
  +void allowTextElements()
  +void allowInlineStyles()
  +void allowHtml5()
  +void allowSvg()
  +void allowCustomElement()
  +void allowTagExtension()
  +void allowElement()
  +void allowTemplating()
  +void add()
  +bool allowsElement()
  +bool allowsAttribute()
}

class "lib::html::html_dart2js.dart::_SimpleNodeValidator" {
  +Set<String> allowedElements
  +Set<String> allowedAttributes
  +Set<String> allowedUriAttributes
  +UriPolicy? uriPolicy
  +bool allowsElement()
  +bool allowsAttribute()
}

class "lib::html::html_dart2js.dart::_CustomElementNodeValidator" {
  +bool allowTypeExtension
  +bool allowCustomTag
  +bool allowsElement()
  +bool allowsAttribute()
}

class "lib::html::html_dart2js.dart::_TemplatingNodeValidator" {
  {static} -List<String> _TEMPLATE_ATTRS
  -Set<String> _templateAttrs
  +bool allowsAttribute()
}

class "lib::html::html_dart2js.dart::_SvgNodeValidator" {
  +bool allowsElement()
  +bool allowsAttribute()
}

abstract class "lib::html::html_dart2js.dart::ReadyState" {
  {static} +String LOADING
  {static} +String INTERACTIVE
  {static} +String COMPLETE
}

class "lib::html::html_dart2js.dart::_WrappedList" {
  -List<Node> _list
  +Iterator<E> iterator
  +int length
  +List<Node> rawList
  +void add()
  +bool remove()
  +void clear()
  +E []()
  +void []=()
  +void sort()
  +int indexOf()
  +int lastIndexOf()
  +void insert()
  +E removeAt()
  +void setRange()
  +void removeRange()
  +void replaceRange()
  +void fillRange()
}

class "lib::html::html_dart2js.dart::_WrappedIterator" {
  -Iterator<Node> _iterator
  +E current
  +bool moveNext()
}

class "lib::html::html_dart2js.dart::_HttpRequestUtils" {
  {static} +HttpRequest get()
}

class "lib::html::html_dart2js.dart::FixedSizeListIterator" {
  -List<T> _array
  -int _length
  -int _position
  -T? _current
  +T current
  +bool moveNext()
}

class "lib::html::html_dart2js.dart::_VariableSizeListIterator" {
  -List<T> _array
  -int _position
  -T? _current
  +T current
  +bool moveNext()
}

class "lib::html::html_dart2js.dart::Console" {
  {static} -Console _safeConsole
  -bool _isConsoleDefined
  +MemoryInfo? memory
  +void assertCondition()
  +void clear()
  +void count()
  +void countReset()
  +void debug()
  +void dir()
  +void dirxml()
  +void error()
  +void group()
  +void groupCollapsed()
  +void groupEnd()
  +void info()
  +void log()
  +void table()
  +void time()
  +void timeEnd()
  +void timeLog()
  +void trace()
  +void warn()
  +void profile()
  +void profileEnd()
  +void timeStamp()
  +void markTimeline()
}

class "lib::html::html_dart2js.dart::_JSElementUpgrader" {
  -dynamic _interceptor
  -dynamic _constructor
  -dynamic _nativeType
  +Element upgrade()
}

class "lib::html::html_dart2js.dart::_DOMWindowCrossFrame" {
  -Object? __window
  -Object _window
  +HistoryBase history
  +LocationBase location
  +bool closed
  +WindowBase opener
  +WindowBase parent
  +WindowBase top
  +Events on
  +void close()
  +void postMessage()
  {static} -WindowBase _createSafe()
  -void _addEventListener()
  +void addEventListener()
  +bool dispatchEvent()
  -void _removeEventListener()
  +void removeEventListener()
}

class "lib::html::html_dart2js.dart::_LocationCrossFrame" {
  -dynamic _location
  +String href
  {static} -void _setHref()
  {static} -LocationBase _createSafe()
}

class "lib::html::html_dart2js.dart::_HistoryCrossFrame" {
  -dynamic _history
  +void back()
  +void forward()
  +void go()
  {static} -HistoryBase _createSafe()
}

class "lib::html::html_dart2js.dart::KeyEvent" {
  -KeyboardEvent _parent
  -bool _shadowAltKey
  -int _shadowCharCode
  -int _shadowKeyCode
  -EventTarget? _currentTarget
  {static} -dynamic _keyboardEventDispatchRecord
  {static} +EventStreamProvider<KeyEvent> keyDownEvent
  {static} +EventStreamProvider<KeyEvent> keyUpEvent
  {static} +EventStreamProvider<KeyEvent> keyPressEvent
  +int keyCode
  +int charCode
  +bool altKey
  +int which
  -int _realKeyCode
  -int _realCharCode
  -bool _realAltKey
  +InputDeviceCapabilities? sourceCapabilities
  {static} +bool canUseDispatchEvent
  +EventTarget? currentTarget
  +String code
  +bool ctrlKey
  +int detail
  +bool isComposing
  +String key
  +int location
  +bool metaKey
  +bool shiftKey
  +WindowBase? view
  -String _shadowKeyIdentifier
  -int _charCode
  -int _keyCode
  -int _which
  -String _keyIdentifier
  +bool repeat
  +bool isComposed
  -dynamic _get_view
  {static} -dynamic _makeRecord()
  {static} -String _convertToHexString()
  -void _initUIEvent()
  -void _initKeyboardEvent()
  +bool getModifierState()
}

class "lib::html::html_dart2js.dart::Platform" {
  {static} +bool supportsTypedData
  {static} +bool supportsSimd
}

class "lib::html::html_dart2js.dart::_WrappedEvent" {
  +Event wrapped
  -String? _selector
  +bool bubbles
  +bool cancelable
  +bool composed
  +EventTarget? currentTarget
  +bool defaultPrevented
  +int eventPhase
  +bool isTrusted
  +EventTarget? target
  +double timeStamp
  +String type
  +Element matchingTarget
  +List<Node> path
  -dynamic _get_currentTarget
  -dynamic _get_target
  -void _initEvent()
  +void preventDefault()
  +void stopImmediatePropagation()
  +void stopPropagation()
  +List<EventTarget> composedPath()
}

abstract class "lib::html::html_dart2js.dart::ElementUpgrader" {
  +Element upgrade()
}

abstract class "lib::html::html_dart2js.dart::NodeValidator" {
  +bool allowsElement()
  +bool allowsAttribute()
}

abstract class "lib::html::html_dart2js.dart::NodeTreeSanitizer" {
  {static} +_TrustedHtmlTreeSanitizer trusted
  +void sanitizeTree()
}

class "lib::html::html_dart2js.dart::_TrustedHtmlTreeSanitizer" {
  +void sanitizeTree()
}

abstract class "lib::html::html_dart2js.dart::UriPolicy" {
  +bool allowsUri()
}

class "lib::html::html_dart2js.dart::_SameOriginUriPolicy" {
  -AnchorElement _hiddenAnchor
  -Location _loc
  +bool allowsUri()
}

class "lib::html::html_dart2js.dart::_ThrowsNodeValidator" {
  +NodeValidator validator
  +bool allowsElement()
  +bool allowsAttribute()
}

class "lib::html::html_dart2js.dart::_ValidatingTreeSanitizer" {
  +NodeValidator validator
  +int numTreeModifications
  +void sanitizeTree()
  -void _removeNode()
  -void _sanitizeUntrustedElement()
  -void _sanitizeElement()
  +void sanitizeNode()
}


abstract class "dart::_internal::HttpStatus" {
  {static} +int continue_
  {static} +int switchingProtocols
  {static} +int processing
  {static} +int ok
  {static} +int created
  {static} +int accepted
  {static} +int nonAuthoritativeInformation
  {static} +int noContent
  {static} +int resetContent
  {static} +int partialContent
  {static} +int multiStatus
  {static} +int alreadyReported
  {static} +int imUsed
  {static} +int multipleChoices
  {static} +int movedPermanently
  {static} +int found
  {static} +int movedTemporarily
  {static} +int seeOther
  {static} +int notModified
  {static} +int useProxy
  {static} +int temporaryRedirect
  {static} +int permanentRedirect
  {static} +int badRequest
  {static} +int unauthorized
  {static} +int paymentRequired
  {static} +int forbidden
  {static} +int notFound
  {static} +int methodNotAllowed
  {static} +int notAcceptable
  {static} +int proxyAuthenticationRequired
  {static} +int requestTimeout
  {static} +int conflict
  {static} +int gone
  {static} +int lengthRequired
  {static} +int preconditionFailed
  {static} +int requestEntityTooLarge
  {static} +int requestUriTooLong
  {static} +int unsupportedMediaType
  {static} +int requestedRangeNotSatisfiable
  {static} +int expectationFailed
  {static} +int misdirectedRequest
  {static} +int unprocessableEntity
  {static} +int locked
  {static} +int failedDependency
  {static} +int upgradeRequired
  {static} +int preconditionRequired
  {static} +int tooManyRequests
  {static} +int requestHeaderFieldsTooLarge
  {static} +int connectionClosedWithoutResponse
  {static} +int unavailableForLegalReasons
  {static} +int clientClosedRequest
  {static} +int internalServerError
  {static} +int notImplemented
  {static} +int badGateway
  {static} +int serviceUnavailable
  {static} +int gatewayTimeout
  {static} +int httpVersionNotSupported
  {static} +int variantAlsoNegotiates
  {static} +int insufficientStorage
  {static} +int loopDetected
  {static} +int notExtended
  {static} +int networkAuthenticationRequired
  {static} +int networkConnectTimeoutError
  {static} +int CONTINUE
  {static} +int SWITCHING_PROTOCOLS
  {static} +int OK
  {static} +int CREATED
  {static} +int ACCEPTED
  {static} +int NON_AUTHORITATIVE_INFORMATION
  {static} +int NO_CONTENT
  {static} +int RESET_CONTENT
  {static} +int PARTIAL_CONTENT
  {static} +int MULTIPLE_CHOICES
  {static} +int MOVED_PERMANENTLY
  {static} +int FOUND
  {static} +int MOVED_TEMPORARILY
  {static} +int SEE_OTHER
  {static} +int NOT_MODIFIED
  {static} +int USE_PROXY
  {static} +int TEMPORARY_REDIRECT
  {static} +int BAD_REQUEST
  {static} +int UNAUTHORIZED
  {static} +int PAYMENT_REQUIRED
  {static} +int FORBIDDEN
  {static} +int NOT_FOUND
  {static} +int METHOD_NOT_ALLOWED
  {static} +int NOT_ACCEPTABLE
  {static} +int PROXY_AUTHENTICATION_REQUIRED
  {static} +int REQUEST_TIMEOUT
  {static} +int CONFLICT
  {static} +int GONE
  {static} +int LENGTH_REQUIRED
  {static} +int PRECONDITION_FAILED
  {static} +int REQUEST_ENTITY_TOO_LARGE
  {static} +int REQUEST_URI_TOO_LONG
  {static} +int UNSUPPORTED_MEDIA_TYPE
  {static} +int REQUESTED_RANGE_NOT_SATISFIABLE
  {static} +int EXPECTATION_FAILED
  {static} +int UPGRADE_REQUIRED
  {static} +int INTERNAL_SERVER_ERROR
  {static} +int NOT_IMPLEMENTED
  {static} +int BAD_GATEWAY
  {static} +int SERVICE_UNAVAILABLE
  {static} +int GATEWAY_TIMEOUT
  {static} +int HTTP_VERSION_NOT_SUPPORTED
  {static} +int NETWORK_CONNECT_TIMEOUT_ERROR
}

class "dart::math::Point" {
  +T x
  +T y
  +int hashCode
  +double magnitude
  +String toString()
  +bool ==()
  +Point<T> +()
  +Point<T> -()
  +Point<T> *()
  +double distanceTo()
  +T squaredDistanceTo()
}

class "dart::math::Rectangle" {
  +T left
  +T top
  +T width
  +T height
}

class "lib::math::math.dart::Point" {
  +T x
  +T y
  +int hashCode
  +double magnitude
  +String toString()
  +bool ==()
  +Point<T> +()
  +Point<T> -()
  +Point<T> *()
  +double distanceTo()
  +T squaredDistanceTo()
}

class "lib::math::math.dart::Random" {
  +int nextInt()
  +double nextDouble()
  +bool nextBool()
}

abstract class "lib::math::math.dart::_RectangleBase" {
  +T left
  +T top
  +T width
  +T height
  +T right
  +T bottom
  +int hashCode
  +Point<T> topLeft
  +Point<T> topRight
  +Point<T> bottomRight
  +Point<T> bottomLeft
  +String toString()
  +bool ==()
  +Rectangle<T>? intersection()
  +bool intersects()
  +Rectangle<T> boundingBox()
  +bool containsRectangle()
  +bool containsPoint()
}

class "lib::math::math.dart::Rectangle" {
  +T left
  +T top
  +T width
  +T height
}

class "lib::math::math.dart::MutableRectangle" {
  +T left
  +T top
  -T _width
  -T _height
  +T width
  +T height
}

class "lib::js_util::js_util.dart::NullRejectionException" {
  +bool isUndefined
  +String toString()
}

class "lib::ffi::ffi.dart::Pointer" {
  +int address
  +int hashCode
  {static} +Pointer<NativeFunction<T>> fromFunction()
  +Pointer<U> cast()
  +bool ==()
}

class "lib::ffi::ffi.dart::Array" {
}

class "lib::ffi::ffi.dart::_ArraySize" {
  +int? dimension1
  +int? dimension2
  +int? dimension3
  +int? dimension4
  +int? dimension5
  +List<int>? dimensions
}

abstract class "lib::ffi::ffi.dart::NativeCallable" {
  +bool keepIsolateAlive
  +Pointer<NativeFunction<T>> nativeFunction
  +void close()
}

class "lib::ffi::ffi.dart::Dart_CObject" {
}

abstract class "lib::ffi::ffi.dart::NativeApi" {
  {static} +int majorVersion
  {static} +int minorVersion
  {static} +Pointer<NativeFunction<Int8 Function(Int64, Pointer<Dart_CObject>)>> postCObject
  {static} +Pointer<NativeFunction<Int64 Function(Pointer<Uint8>, Pointer<NativeFunction<Void Function(Int64, Pointer<Dart_CObject>)>>, Int8)>> newNativePort
  {static} +Pointer<NativeFunction<Int8 Function(Int64)>> closeNativePort
  {static} +Pointer<Void> initializeApiDLData
}

class "lib::ffi::ffi.dart::Native" {
  +String? symbol
  +String? assetId
  +bool isLeaf
  {static} +Pointer<T> addressOf()
}

class "lib::ffi::ffi.dart::DefaultAsset" {
  +String id
}

class "lib::ffi::ffi.dart::Abi" {
  {static} +Abi androidArm
  {static} +Abi androidArm64
  {static} +Abi androidIA32
  {static} +Abi androidX64
  {static} +Abi androidRiscv64
  {static} +Abi fuchsiaArm64
  {static} +Abi fuchsiaX64
  {static} +Abi fuchsiaRiscv64
  {static} +Abi iosArm
  {static} +Abi iosArm64
  {static} +Abi iosX64
  {static} +Abi linuxArm
  {static} +Abi linuxArm64
  {static} +Abi linuxIA32
  {static} +Abi linuxX64
  {static} +Abi linuxRiscv32
  {static} +Abi linuxRiscv64
  {static} +Abi macosArm64
  {static} +Abi macosX64
  {static} +Abi windowsArm64
  {static} +Abi windowsIA32
  {static} +Abi windowsX64
  {static} +List<Abi> values
  -_OS _os
  -_Architecture _architecture
  {static} -Abi _androidArm
  {static} -Abi _androidArm64
  {static} -Abi _androidIA32
  {static} -Abi _androidX64
  {static} -Abi _androidRiscv64
  {static} -Abi _fuchsiaArm64
  {static} -Abi _fuchsiaX64
  {static} -Abi _fuchsiaRiscv64
  {static} -Abi _iosArm
  {static} -Abi _iosArm64
  {static} -Abi _iosX64
  {static} -Abi _linuxArm
  {static} -Abi _linuxArm64
  {static} -Abi _linuxIA32
  {static} -Abi _linuxX64
  {static} -Abi _linuxRiscv32
  {static} -Abi _linuxRiscv64
  {static} -Abi _macosArm64
  {static} -Abi _macosX64
  {static} -Abi _windowsArm64
  {static} -Abi _windowsIA32
  {static} -Abi _windowsX64
  +String toString()
}

class "lib::ffi::ffi.dart::_Architecture" {
  +int index
  {static} +List<_Architecture> values
  {static} +_Architecture arm
  {static} +_Architecture arm64
  {static} +_Architecture ia32
  {static} +_Architecture x64
  {static} +_Architecture riscv32
  {static} +_Architecture riscv64
}

class "lib::ffi::ffi.dart::_OS" {
  +int index
  {static} +List<_OS> values
  {static} +_OS android
  {static} +_OS fuchsia
  {static} +_OS ios
  {static} +_OS linux
  {static} +_OS macos
  {static} +_OS windows
}

class "lib::ffi::ffi.dart::AbiSpecificInteger" {
}

class "lib::ffi::ffi.dart::AbiSpecificIntegerMapping" {
  +Map<Abi, NativeType> mapping
}

abstract class "lib::ffi::ffi.dart::NativeType" {
}

class "lib::ffi::ffi.dart::Opaque" {
}

class "lib::ffi::ffi.dart::_NativeInteger" {
}

class "lib::ffi::ffi.dart::_NativeDouble" {
}

class "lib::ffi::ffi.dart::Int8" {
}

class "lib::ffi::ffi.dart::Int16" {
}

class "lib::ffi::ffi.dart::Int32" {
}

class "lib::ffi::ffi.dart::Int64" {
}

class "lib::ffi::ffi.dart::Uint8" {
}

class "lib::ffi::ffi.dart::Uint16" {
}

class "lib::ffi::ffi.dart::Uint32" {
}

class "lib::ffi::ffi.dart::Uint64" {
}

class "lib::ffi::ffi.dart::Float" {
}

class "lib::ffi::ffi.dart::Double" {
}

class "lib::ffi::ffi.dart::Bool" {
}

abstract class "lib::ffi::ffi.dart::Void" {
}

abstract class "lib::ffi::ffi.dart::Handle" {
}

abstract class "lib::ffi::ffi.dart::NativeFunction" {
}

abstract class "lib::ffi::ffi.dart::VarArgs" {
}

class "lib::ffi::ffi.dart::Finalizable" {
}

abstract class "lib::ffi::ffi.dart::NativeFinalizer" {
  +void attach()
  +void detach()
}

abstract class "lib::ffi::ffi.dart::Allocator" {
  +Pointer<T> allocate()
  +void free()
}

class "lib::ffi::ffi.dart::DartRepresentationOf" {
}

class "lib::ffi::ffi.dart::Unsized" {
}

class "lib::ffi::ffi.dart::Char" {
}

class "lib::ffi::ffi.dart::SignedChar" {
}

class "lib::ffi::ffi.dart::UnsignedChar" {
}

class "lib::ffi::ffi.dart::Short" {
}

class "lib::ffi::ffi.dart::UnsignedShort" {
}

class "lib::ffi::ffi.dart::Int" {
}

class "lib::ffi::ffi.dart::UnsignedInt" {
}

class "lib::ffi::ffi.dart::Long" {
}

class "lib::ffi::ffi.dart::UnsignedLong" {
}

class "lib::ffi::ffi.dart::LongLong" {
}

class "lib::ffi::ffi.dart::UnsignedLongLong" {
}

class "lib::ffi::ffi.dart::IntPtr" {
}

class "lib::ffi::ffi.dart::UintPtr" {
}

class "lib::ffi::ffi.dart::Size" {
}

class "lib::ffi::ffi.dart::WChar" {
}

class "lib::ffi::ffi.dart::DynamicLibrary" {
  +int hashCode
  +Pointer<Void> handle
  +Pointer<T> lookup()
  +bool providesSymbol()
  +void close()
  +bool ==()
}

abstract class "lib::ffi::ffi.dart::_Compound" {
  -Object _typedDataBase
}

class "lib::ffi::ffi.dart::Struct" {
}

class "lib::ffi::ffi.dart::Packed" {
  +int memberAlignment
}

class "lib::ffi::ffi.dart::Union" {
}

abstract class "lib::_http::http.dart::HttpServer" {
  +String? serverHeader
  +bool autoCompress
  +Duration? idleTimeout
  +HttpHeaders defaultResponseHeaders
  +int port
  +InternetAddress address
  +int sessionTimeout
  {static} +dynamic bind()
  {static} +dynamic bindSecure()
  +dynamic close()
  +HttpConnectionsInfo connectionsInfo()
}

class "lib::_http::http.dart::HttpConnectionsInfo" {
  +int total
  +int active
  +int idle
  +int closing
}

class "lib::_http::http.dart::HttpHeaders" {
  {static} +String acceptHeader
  {static} +String acceptCharsetHeader
  {static} +String acceptEncodingHeader
  {static} +String acceptLanguageHeader
  {static} +String acceptRangesHeader
  {static} +String accessControlAllowCredentialsHeader
  {static} +String accessControlAllowHeadersHeader
  {static} +String accessControlAllowMethodsHeader
  {static} +String accessControlAllowOriginHeader
  {static} +String accessControlExposeHeadersHeader
  {static} +String accessControlMaxAgeHeader
  {static} +String accessControlRequestHeadersHeader
  {static} +String accessControlRequestMethodHeader
  {static} +String ageHeader
  {static} +String allowHeader
  {static} +String authorizationHeader
  {static} +String cacheControlHeader
  {static} +String connectionHeader
  {static} +String contentEncodingHeader
  {static} +String contentLanguageHeader
  {static} +String contentLengthHeader
  {static} +String contentLocationHeader
  {static} +String contentMD5Header
  {static} +String contentRangeHeader
  {static} +String contentTypeHeader
  {static} +String dateHeader
  {static} +String etagHeader
  {static} +String expectHeader
  {static} +String expiresHeader
  {static} +String fromHeader
  {static} +String hostHeader
  {static} +String ifMatchHeader
  {static} +String ifModifiedSinceHeader
  {static} +String ifNoneMatchHeader
  {static} +String ifRangeHeader
  {static} +String ifUnmodifiedSinceHeader
  {static} +String lastModifiedHeader
  {static} +String locationHeader
  {static} +String maxForwardsHeader
  {static} +String pragmaHeader
  {static} +String proxyAuthenticateHeader
  {static} +String proxyAuthorizationHeader
  {static} +String rangeHeader
  {static} +String refererHeader
  {static} +String retryAfterHeader
  {static} +String serverHeader
  {static} +String teHeader
  {static} +String trailerHeader
  {static} +String transferEncodingHeader
  {static} +String upgradeHeader
  {static} +String userAgentHeader
  {static} +String varyHeader
  {static} +String viaHeader
  {static} +String warningHeader
  {static} +String wwwAuthenticateHeader
  {static} +String contentDisposition
  {static} +String cookieHeader
  {static} +String setCookieHeader
  {static} +List<String> generalHeaders
  {static} +List<String> entityHeaders
  {static} +List<String> responseHeaders
  {static} +List<String> requestHeaders
  +DateTime? date
  +DateTime? expires
  +DateTime? ifModifiedSince
  +String? host
  +int? port
  +ContentType? contentType
  +int contentLength
  +bool persistentConnection
  +bool chunkedTransferEncoding
  +List<String>? []()
  +String? value()
  +void add()
  +void set()
  +void remove()
  +void removeAll()
  +void forEach()
  +void noFolding()
  +void clear()
}

class "lib::_http::http.dart::HeaderValue" {
  +String value
  +Map<String, String?> parameters
  {static} +HeaderValue parse()
  +String toString()
}

class "lib::_http::http.dart::HttpSession" {
  +String id
  +void Function() onTimeout
  +bool isNew
  +void destroy()
}

class "lib::_http::http.dart::ContentType" {
  {static} +ContentType text
  {static} +ContentType html
  {static} +ContentType json
  {static} +ContentType binary
  +String mimeType
  +String primaryType
  +String subType
  +String? charset
  {static} +ContentType parse()
}

class "lib::_http::http.dart::SameSite" {
  {static} +SameSite lax
  {static} +SameSite strict
  {static} +SameSite none
  {static} +List<SameSite> values
  +String name
  +String toString()
}

class "lib::_http::http.dart::Cookie" {
  +String name
  +String value
  +DateTime? expires
  +int? maxAge
  +String? domain
  +String? path
  +bool secure
  +bool httpOnly
  +SameSite? sameSite
  +String toString()
}

class "lib::_http::http.dart::HttpRequest" {
  +int contentLength
  +String method
  +Uri uri
  +Uri requestedUri
  +HttpHeaders headers
  +List<Cookie> cookies
  +bool persistentConnection
  +X509Certificate? certificate
  +HttpSession session
  +String protocolVersion
  +HttpConnectionInfo? connectionInfo
  +HttpResponse response
}

class "lib::_http::http.dart::HttpResponse" {
  +int contentLength
  +int statusCode
  +String reasonPhrase
  +bool persistentConnection
  +Duration? deadline
  +bool bufferOutput
  +HttpHeaders headers
  +List<Cookie> cookies
  +HttpConnectionInfo? connectionInfo
  +dynamic redirect()
  +dynamic detachSocket()
}

class "lib::_http::http.dart::HttpClient" {
  {static} +int defaultHttpPort
  {static} +int defaultHttpsPort
  {static} -bool _enableTimelineLogging
  +Duration idleTimeout
  +Duration? connectionTimeout
  +int? maxConnectionsPerHost
  +bool autoUncompress
  +String? userAgent
  {static} +bool enableTimelineLogging
  +dynamic Function(Uri, String, String?)? authenticate
  +dynamic Function(Uri, String?, int?)? connectionFactory
  +String Function(Uri)? findProxy
  +dynamic Function(String, int, String, String?)? authenticateProxy
  +bool Function(X509Certificate, String, int)? badCertificateCallback
  +dynamic Function(String)? keyLog
  +dynamic open()
  +dynamic openUrl()
  +dynamic get()
  +dynamic getUrl()
  +dynamic post()
  +dynamic postUrl()
  +dynamic put()
  +dynamic putUrl()
  +dynamic delete()
  +dynamic deleteUrl()
  +dynamic patch()
  +dynamic patchUrl()
  +dynamic head()
  +dynamic headUrl()
  +void addCredentials()
  {static} +String findProxyFromEnvironment()
  +void addProxyCredentials()
  +void close()
}

class "lib::_http::http.dart::HttpClientRequest" {
  +bool persistentConnection
  +bool followRedirects
  +int maxRedirects
  +int contentLength
  +bool bufferOutput
  +String method
  +Uri uri
  +HttpHeaders headers
  +List<Cookie> cookies
  +dynamic done
  +HttpConnectionInfo? connectionInfo
  +dynamic close()
  +void abort()
}

class "lib::_http::http.dart::HttpClientResponse" {
  +int statusCode
  +String reasonPhrase
  +int contentLength
  +HttpClientResponseCompressionState compressionState
  +bool persistentConnection
  +bool isRedirect
  +List<RedirectInfo> redirects
  +HttpHeaders headers
  +List<Cookie> cookies
  +X509Certificate? certificate
  +HttpConnectionInfo? connectionInfo
  +dynamic redirect()
  +dynamic detachSocket()
}

class "lib::_http::http.dart::HttpClientCredentials" {
}

abstract class "lib::_http::http.dart::HttpClientBasicCredentials" {
}

abstract class "lib::_http::http.dart::HttpClientDigestCredentials" {
}

class "lib::_http::http.dart::HttpConnectionInfo" {
  +InternetAddress remoteAddress
  +int remotePort
  +int localPort
}

class "lib::_http::http.dart::RedirectInfo" {
  +int statusCode
  +String method
  +Uri location
}

class "lib::_http::http.dart::HttpException" {
  +String message
  +Uri? uri
  +String toString()
}

class "lib::_http::http.dart::RedirectException" {
  +String message
  +List<RedirectInfo> redirects
  +Uri? uri
  +String toString()
}

class "lib::_http::http.dart::HttpClientResponseCompressionState" {
  +int index
  {static} +List<HttpClientResponseCompressionState> values
  {static} +HttpClientResponseCompressionState notCompressed
  {static} +HttpClientResponseCompressionState decompressed
  {static} +HttpClientResponseCompressionState compressed
}

class "lib::_http::http.dart::_CryptoUtils" {
  {static} +Uint8List getRandomBytes()
  {static} +String bytesToHex()
}

abstract class "lib::_http::http.dart::_HashBase" {
  -int _chunkSizeInWords
  -bool _bigEndianWords
  -int _lengthInBytes
  -List<int> _pendingData
  -Uint32List _currentChunk
  -Uint32List _h
  -bool _digestCalled
  +int blockSize
  +void add()
  +List<int> close()
  -dynamic _updateHash()
  -int _add32()
  -int _roundUp()
  -int _rotl32()
  -List<int> _resultAsBytes()
  -void _bytesToChunk()
  -List<int> _wordToBytes()
  -void _iterate()
  -void _finalizeData()
}

class "lib::_http::http.dart::_MD5" {
  {static} -List<int> _k
  {static} -List<int> _r
  -void _updateHash()
}

class "lib::_http::http.dart::_SHA1" {
  -List<int> _w
  -void _updateHash()
}

class "lib::_http::http.dart::HttpDate" {
  {static} +String format()
  {static} +DateTime parse()
  {static} -DateTime _parseCookieDate()
}

class "lib::_http::http.dart::_HttpHeaders" {
  -Map<String, List<String>> _headers
  -Map<String, String>? _originalHeaderNames
  +String protocolVersion
  -bool _mutable
  -List<String>? _noFoldingHeaders
  -int _contentLength
  -bool _persistentConnection
  -bool _chunkedTransferEncoding
  -String? _host
  -int? _port
  -int _defaultPortForScheme
  +bool persistentConnection
  +int contentLength
  +bool chunkedTransferEncoding
  +String? host
  +int? port
  +DateTime? ifModifiedSince
  +DateTime? date
  +DateTime? expires
  +ContentType? contentType
  +List<String>? []()
  +String? value()
  +void add()
  -void _addAll()
  +void set()
  +void remove()
  +void removeAll()
  +void forEach()
  +void noFolding()
  +void clear()
  -void _add()
  -void _addContentLength()
  -void _addTransferEncoding()
  -void _addDate()
  -void _addExpires()
  -void _addIfModifiedSince()
  -void _addHost()
  -void _addConnection()
  -void _addContentType()
  -void _addValue()
  -String _valueToString()
  -void _set()
  -void _checkMutable()
  -void _updateHostHeader()
  -bool _foldHeader()
  -void _finalize()
  -void _build()
  +String toString()
  -List<Cookie> _parseCookies()
  {static} -String _validateField()
  {static} -Object _validateValue()
  -String _originalHeaderName()
}

class "lib::_http::http.dart::_HeaderValue" {
  -String _value
  -Map<String, String?>? _parameters
  -Map<String, String?>? _unmodifiableParameters
  +String value
  +Map<String, String?> parameters
  {static} +_HeaderValue parse()
  -Map<String, String?> _ensureParameters()
  {static} -bool _isToken()
  +String toString()
  -void _parse()
}

class "lib::_http::http.dart::_ContentType" {
  -String _primaryType
  -String _subType
  +String mimeType
  +String primaryType
  +String subType
  +String? charset
  {static} +_ContentType parse()
}

class "lib::_http::http.dart::_Cookie" {
  -String _name
  -String _value
  +DateTime? expires
  +int? maxAge
  +String? domain
  -String? _path
  +bool httpOnly
  +bool secure
  +SameSite? sameSite
  +String name
  +String value
  +String? path
  -void _parseSetCookieValue()
  +String toString()
  {static} -String _validateName()
  {static} -String _validateValue()
  {static} -void _validatePath()
}

abstract class "lib::_http::http.dart::HttpProfiler" {
  {static} -String _kType
  {static} -Map<String, _HttpProfileData> _profile
  {static} +_HttpProfileData? startRequest()
  {static} +_HttpProfileData? getHttpProfileRequest()
  {static} +void clear()
  {static} +String toJson()
}

class "lib::_http::http.dart::_HttpProfileEvent" {
  +int timestamp
  +String name
  +Map<dynamic, dynamic>? arguments
  +Map<String, dynamic> toJson()
}

class "lib::_http::http.dart::_HttpProfileData" {
  {static} +String isolateId
  +bool requestInProgress
  +bool? responseInProgress
  +String id
  +String method
  +Uri uri
  +int requestStartTimestamp
  +int requestEndTimestamp
  +Map<String, dynamic>? requestDetails
  +Map<String, dynamic>? proxyDetails
  +List<int> requestBody
  +String? requestError
  +List<_HttpProfileEvent> requestEvents
  +int responseStartTimestamp
  +int responseEndTimestamp
  +Map<String, dynamic>? responseDetails
  +List<int> responseBody
  +String? responseError
  -int _lastUpdateTime
  -TimelineTask _timeline
  -TimelineTask _responseTimeline
  +int lastUpdateTime
  +void requestEvent()
  +void proxyEvent()
  +void appendRequestData()
  +Map<dynamic, dynamic> formatHeaders()
  +Map<dynamic, dynamic>? formatConnectionInfo()
  +void finishRequest()
  +void startResponse()
  +void finishRequestWithError()
  +void finishResponse()
  +void finishResponseWithError()
  +void appendResponseData()
  +Map<String, dynamic> toJson()
  -void _updated()
}

class "lib::_http::http.dart::_CopyingBytesBuilder" {
  {static} -int _INIT_SIZE
  {static} -Uint8List _emptyList
  -int _length
  -Uint8List _buffer
  +int length
  +bool isEmpty
  +bool isNotEmpty
  +void add()
  +void addByte()
  -void _grow()
  +Uint8List takeBytes()
  +Uint8List toBytes()
  +void clear()
  {static} -int _pow2roundup()
}

class "lib::_http::http.dart::_HttpIncoming" {
  -int _transferLength
  -Completer<bool> _dataCompleter
  -Stream<Uint8List> _stream
  +bool fullBodyRead
  +_HttpHeaders headers
  +bool upgraded
  +int? statusCode
  +String? reasonPhrase
  +String? method
  +Uri? uri
  +bool hasSubscriber
  +int transferLength
  +dynamic dataDone
  +StreamSubscription<Uint8List> listen()
  +void close()
}

abstract class "lib::_http::http.dart::_HttpInboundMessageListInt" {
  -_HttpIncoming _incoming
  -List<Cookie>? _cookies
  +List<Cookie> cookies
  +_HttpHeaders headers
  +String protocolVersion
  +int contentLength
  +bool persistentConnection
}

abstract class "lib::_http::http.dart::_HttpInboundMessage" {
  -_HttpIncoming _incoming
  -List<Cookie>? _cookies
  +List<Cookie> cookies
  +_HttpHeaders headers
  +String protocolVersion
  +int contentLength
  +bool persistentConnection
}

class "lib::_http::http.dart::_HttpRequest" {
  +HttpResponse response
  -_HttpServer _httpServer
  -_HttpConnection _httpConnection
  -_HttpSession? _session
  -Uri? _requestedUri
  +Uri uri
  +Uri requestedUri
  +String method
  +HttpSession session
  +HttpConnectionInfo? connectionInfo
  +X509Certificate? certificate
  +StreamSubscription<Uint8List> listen()
}

class "lib::_http::http.dart::_HttpClientResponse" {
  -_HttpClient _httpClient
  -_HttpClientRequest _httpRequest
  +HttpClientResponseCompressionState compressionState
  -_HttpProfileData? _profileData
  +List<RedirectInfo> redirects
  +int statusCode
  +String reasonPhrase
  +X509Certificate? certificate
  +List<Cookie> cookies
  +bool isRedirect
  +HttpConnectionInfo? connectionInfo
  -bool _shouldAuthenticateProxy
  -bool _shouldAuthenticate
  {static} -HttpClientResponseCompressionState _getCompressionState()
  +dynamic redirect()
  +StreamSubscription<Uint8List> listen()
  +dynamic detachSocket()
  -dynamic _authenticate()
}

class "lib::_http::http.dart::_ToUint8List" {
  +Uint8List convert()
  +Sink<List<int>> startChunkedConversion()
}

class "lib::_http::http.dart::_Uint8ListConversionSink" {
  -Sink<Uint8List> _target
  +void add()
  +void close()
}

class "lib::_http::http.dart::_StreamSinkImpl" {
  -StreamConsumer<T> _target
  -Completer<void> _doneCompleter
  -StreamController<T>? _controllerInstance
  -Completer<dynamic>? _controllerCompleter
  -bool _isClosed
  -bool _isBound
  -bool _hasError
  +dynamic done
  -StreamController<T> _controller
  +void add()
  +void addError()
  +dynamic addStream()
  +dynamic flush()
  +dynamic close()
  -void _closeTarget()
  -void _completeDoneValue()
  -void _completeDoneError()
}

class "lib::_http::http.dart::_IOSinkImpl" {
  -Encoding _encoding
  -bool _encodingMutable
  -_HttpProfileData? _profileData
  +Encoding encoding
  +void write()
  +void writeAll()
  +void writeln()
  +void writeCharCode()
}

abstract class "lib::_http::http.dart::_HttpOutboundMessage" {
  -bool _encodingSet
  -bool _bufferOutput
  -Uri _uri
  -_HttpOutgoing _outgoing
  +_HttpHeaders headers
  +int contentLength
  +bool persistentConnection
  +bool bufferOutput
  +Encoding encoding
  -bool _isConnectionClosed
  +void add()
  +dynamic addStream()
  +void write()
  -void _writeHeader()
}

class "lib::_http::http.dart::_HttpResponse" {
  -int _statusCode
  -String? _reasonPhrase
  -List<Cookie>? _cookies
  -_HttpRequest? _httpRequest
  -Duration? _deadline
  -Timer? _deadlineTimer
  -bool _isConnectionClosed
  +List<Cookie> cookies
  +int statusCode
  +String reasonPhrase
  +HttpConnectionInfo? connectionInfo
  +Duration? deadline
  +dynamic redirect()
  +dynamic detachSocket()
  -void _writeHeader()
  -String _findReasonPhrase()
}

class "lib::_http::http.dart::_HttpClientRequest" {
  +String method
  +Uri uri
  +List<Cookie> cookies
  -_HttpClient _httpClient
  -_HttpClientConnection _httpClientConnection
  -Completer<HttpClientResponse> _responseCompleter
  -_Proxy _proxy
  -dynamic _response
  -bool _followRedirects
  -int _maxRedirects
  -List<RedirectInfo> _responseRedirects
  -bool _aborted
  +dynamic done
  +int maxRedirects
  +bool followRedirects
  +HttpConnectionInfo? connectionInfo
  +dynamic close()
  -void _onIncoming()
  -void _onError()
  -String _requestUri()
  +void add()
  +void write()
  -void _writeHeader()
  +void abort()
}

class "lib::_http::http.dart::_HttpGZipSink" {
  -void Function(List<int>) _consume
  +void add()
  +void addSlice()
  +void close()
}

class "lib::_http::http.dart::_HttpOutgoing" {
  {static} -List<int> _footerAndChunk0Length
  {static} -List<int> _chunk0Length
  -Completer<Socket> _doneCompleter
  +Socket socket
  +bool ignoreBody
  +bool headersWritten
  -Uint8List? _buffer
  -int _length
  -dynamic _closeFuture
  +bool chunked
  -int _pendingChunkedFooter
  +int? contentLength
  -int _bytesWritten
  -bool _gzip
  -ByteConversionSink? _gzipSink
  -void Function(List<int>)? _gzipAdd
  -Uint8List? _gzipBuffer
  -int _gzipBufferLength
  -bool _socketError
  +_HttpOutboundMessage<dynamic>? outbound
  +dynamic done
  +bool gzip
  +dynamic writeHeaders()
  +dynamic addStream()
  +dynamic close()
  +void setHeader()
  -bool _ignoreError()
  -void _addGZipChunk()
  -void _addChunk()
  -List<int> _chunkHeader()
}

class "lib::_http::http.dart::_HttpClientConnection" {
  +String key
  -Socket _socket
  -bool _proxyTunnel
  -SecurityContext? _context
  -_HttpParser _httpParser
  -StreamSubscription<dynamic>? _subscription
  -_HttpClient _httpClient
  -bool _dispose
  -Timer? _idleTimer
  +bool closed
  -Uri? _currentUri
  -Completer<_HttpIncoming>? _nextResponseCompleter
  -dynamic _streamFuture
  +HttpConnectionInfo? connectionInfo
  +_HttpClientRequest send()
  +dynamic detachSocket()
  +void destroy()
  +void destroyFromExternal()
  +void close()
  +void closeFromExternal()
  +dynamic createProxyTunnel()
  {static} +dynamic makeKey()
  +void stopTimer()
  +void startTimer()
}

class "lib::_http::http.dart::_ConnectionInfo" {
  +_HttpClientConnection connection
  +_Proxy proxy
}

class "lib::_http::http.dart::_ConnectionTarget" {
  +String key
  +String host
  +int port
  +bool isSecure
  +SecurityContext? context
  +dynamic Function(Uri, String?, int?)? connectionFactory
  -Set<_HttpClientConnection> _idle
  -Set<_HttpClientConnection> _active
  -Set<ConnectionTask<Socket>> _socketTasks
  -ListQueue<void Function()> _pending
  -int _connecting
  +bool isEmpty
  +bool hasIdle
  +bool hasActive
  +_HttpClientConnection takeIdle()
  -dynamic _checkPending()
  +void addNewActive()
  +void returnConnection()
  +void connectionClosed()
  +void close()
  +dynamic connect()
}

class "lib::_http::http.dart::_HttpClient" {
  -bool _closing
  -bool _closingForcefully
  -Map<String, _ConnectionTarget> _connectionTargets
  -List<_Credentials> _credentials
  -List<_ProxyCredentials> _proxyCredentials
  -SecurityContext? _context
  -dynamic Function(Uri, String?, int?)? _connectionFactory
  -dynamic Function(Uri, String, String?)? _authenticate
  -dynamic Function(String, int, String, String?)? _authenticateProxy
  -String Function(Uri)? _findProxy
  -Duration _idleTimeout
  -bool Function(X509Certificate, String, int)? _badCertificateCallback
  -dynamic Function(String)? _keyLog
  +Duration? connectionTimeout
  +int? maxConnectionsPerHost
  +bool autoUncompress
  +String? userAgent
  {static} -Map<String, String> _platformEnvironmentCache
  +Duration idleTimeout
  +bool Function(X509Certificate, String, int)? badCertificateCallback
  +dynamic Function(String)? keyLog
  +dynamic Function(Uri, String, String?)? authenticate
  +dynamic Function(String, int, String, String?)? authenticateProxy
  +dynamic Function(Uri, String?, int?)? connectionFactory
  +String Function(Uri)? findProxy
  +dynamic open()
  +dynamic openUrl()
  +dynamic get()
  +dynamic getUrl()
  +dynamic post()
  +dynamic postUrl()
  +dynamic put()
  +dynamic putUrl()
  +dynamic delete()
  +dynamic deleteUrl()
  +dynamic head()
  +dynamic headUrl()
  +dynamic patch()
  +dynamic patchUrl()
  +void close()
  +void addCredentials()
  +void addProxyCredentials()
  {static} -void _startRequestTimelineEvent()
  -bool _isLoopback()
  -bool _isValidToken()
  -dynamic _openUrl()
  {static} -bool _isSubdomain()
  {static} +bool shouldCopyHeaderOnRedirect()
  -dynamic _openUrlFromRequest()
  -void _returnConnection()
  -void _connectionClosed()
  -void _connectionClosedNoFurtherClosing()
  -void _connectionsChanged()
  -void _closeConnections()
  -_ConnectionTarget _getConnectionTarget()
  -dynamic _getConnection()
  -_SiteCredentials? _findCredentials()
  -_ProxyCredentials? _findProxyCredentials()
  -void _removeCredentials()
  -void _removeProxyCredentials()
  {static} -String _findProxyFromEnvironment()
}

class "lib::_http::http.dart::_HttpConnection" {
  {static} -int _ACTIVE
  {static} -int _IDLE
  {static} -int _CLOSING
  {static} -int _DETACHED
  {static} -Map<int, _HttpConnection> _connections
  -Socket _socket
  -_HttpServer _httpServer
  -_HttpParser _httpParser
  -int _state
  -StreamSubscription<dynamic>? _subscription
  -bool _idleMark
  -dynamic _streamFuture
  +bool isMarkedIdle
  +HttpConnectionInfo? connectionInfo
  -bool _isActive
  -bool _isIdle
  -bool _isClosing
  -bool _isDetached
  -String _serviceTypePath
  -String _serviceTypeName
  +void markIdle()
  +void destroy()
  +dynamic detachSocket()
}

class "lib::_http::http.dart::ServerSocketBase" {
  +int port
  +InternetAddress address
  +dynamic close()
}

class "lib::_http::http.dart::_HttpServer" {
  {static} -Map<int, _HttpServer> _servers
  +String? serverHeader
  +HttpHeaders defaultResponseHeaders
  +bool autoCompress
  -Duration? _idleTimeout
  -Timer? _idleTimer
  -_HttpSessionManager? _sessionManagerInstance
  +bool closed
  -ServerSocketBase<Socket> _serverSocket
  -bool _closeServer
  -LinkedList<_HttpConnection> _activeConnections
  -LinkedList<_HttpConnection> _idleConnections
  -StreamController<HttpRequest> _controller
  +Duration? idleTimeout
  +int port
  +InternetAddress address
  +int sessionTimeout
  -_HttpSessionManager _sessionManager
  -String _serviceTypePath
  -String _serviceTypeName
  {static} +dynamic bind()
  {static} +dynamic bindSecure()
  {static} -HttpHeaders _initDefaultResponseHeaders()
  +StreamSubscription<HttpRequest> listen()
  +dynamic close()
  -void _maybePerformCleanup()
  -void _handleRequest()
  -void _connectionClosed()
  -void _markIdle()
  -void _markActive()
  +HttpConnectionsInfo connectionsInfo()
}

class "lib::_http::http.dart::_ProxyConfiguration" {
  {static} +String PROXY_PREFIX
  {static} +String DIRECT_PREFIX
  +List<_Proxy> proxies
}

class "lib::_http::http.dart::_Proxy" {
  +String? host
  +int? port
  +String? username
  +String? password
  +bool isDirect
  +bool isAuthenticated
}

class "lib::_http::http.dart::_HttpConnectionInfo" {
  +InternetAddress remoteAddress
  +int remotePort
  +int localPort
  {static} +_HttpConnectionInfo? create()
}

class "lib::_http::http.dart::_DetachedSocket" {
  -Stream<Uint8List> _incoming
  -Socket _socket
  +Encoding encoding
  +dynamic done
  +int port
  +InternetAddress address
  +InternetAddress remoteAddress
  +int remotePort
  +StreamSubscription<Uint8List> listen()
  +void write()
  +void writeln()
  +void writeCharCode()
  +void writeAll()
  +void add()
  +void addError()
  +dynamic addStream()
  +void destroy()
  +dynamic flush()
  +dynamic close()
  +bool setOption()
  +Uint8List getRawOption()
  +void setRawOption()
}

class "lib::_http::http.dart::_AuthenticationScheme" {
  -int _scheme
  {static} +_AuthenticationScheme UNKNOWN
  {static} +_AuthenticationScheme BASIC
  {static} +_AuthenticationScheme DIGEST
  +String toString()
}

abstract class "lib::_http::http.dart::_Credentials" {
  +_HttpClientCredentials credentials
  +String realm
  +bool used
  +String? ha1
  +String? nonce
  +String? algorithm
  +String? qop
  +int? nonceCount
  +_AuthenticationScheme scheme
  +void authorize()
}

class "lib::_http::http.dart::_SiteCredentials" {
  +Uri uri
  +bool applies()
  +void authorize()
}

class "lib::_http::http.dart::_ProxyCredentials" {
  +String host
  +int port
  +bool applies()
  +void authorize()
}

abstract class "lib::_http::http.dart::_HttpClientCredentials" {
  +_AuthenticationScheme scheme
  +void authorize()
  +void authorizeProxy()
}

class "lib::_http::http.dart::_HttpClientBasicCredentials" {
  +String username
  +String password
  +_AuthenticationScheme scheme
  +String authorization()
  +void authorize()
  +void authorizeProxy()
}

class "lib::_http::http.dart::_HttpClientDigestCredentials" {
  +String username
  +String password
  +_AuthenticationScheme scheme
  +String authorization()
  +void authorize()
  +void authorizeProxy()
}

class "lib::_http::http.dart::_RedirectInfo" {
  +int statusCode
  +String method
  +Uri location
}

abstract class "lib::_http::http.dart::_ServiceObject" {
  -int __serviceId
  -int _serviceId
  -String _servicePath
  -String _serviceTypePath
  -String _serviceTypeName
  -String _serviceType()
}

class "lib::_http::http.dart::_Const" {
  {static} +List<int> HTTP
  {static} +List<int> HTTP1DOT
  {static} +List<int> HTTP10
  {static} +List<int> HTTP11
  {static} +bool T
  {static} +bool F
  {static} +List<bool> SEPARATOR_MAP
}

class "lib::_http::http.dart::_CharCode" {
  {static} +int HT
  {static} +int LF
  {static} +int CR
  {static} +int SP
  {static} +int COMMA
  {static} +int SLASH
  {static} +int ZERO
  {static} +int ONE
  {static} +int COLON
  {static} +int SEMI_COLON
}

class "lib::_http::http.dart::_State" {
  {static} +int START
  {static} +int METHOD_OR_RESPONSE_HTTP_VERSION
  {static} +int RESPONSE_HTTP_VERSION
  {static} +int REQUEST_LINE_METHOD
  {static} +int REQUEST_LINE_URI
  {static} +int REQUEST_LINE_HTTP_VERSION
  {static} +int REQUEST_LINE_ENDING
  {static} +int RESPONSE_LINE_STATUS_CODE
  {static} +int RESPONSE_LINE_REASON_PHRASE
  {static} +int RESPONSE_LINE_ENDING
  {static} +int HEADER_START
  {static} +int HEADER_FIELD
  {static} +int HEADER_VALUE_START
  {static} +int HEADER_VALUE
  {static} +int HEADER_VALUE_FOLD_OR_END_CR
  {static} +int HEADER_VALUE_FOLD_OR_END
  {static} +int HEADER_ENDING
  {static} +int CHUNK_SIZE_STARTING_CR
  {static} +int CHUNK_SIZE_STARTING
  {static} +int CHUNK_SIZE
  {static} +int CHUNK_SIZE_EXTENSION
  {static} +int CHUNK_SIZE_ENDING
  {static} +int CHUNKED_BODY_DONE_CR
  {static} +int CHUNKED_BODY_DONE
  {static} +int BODY
  {static} +int CLOSED
  {static} +int UPGRADED
  {static} +int FAILURE
  {static} +int FIRST_BODY_STATE
}

class "lib::_http::http.dart::_HttpVersion" {
  {static} +int UNDETERMINED
  {static} +int HTTP10
  {static} +int HTTP11
}

class "lib::_http::http.dart::_MessageType" {
  {static} +int UNDETERMINED
  {static} +int REQUEST
  {static} +int RESPONSE
}

class "lib::_http::http.dart::_HttpDetachedStreamSubscription" {
  -StreamSubscription<Uint8List> _subscription
  -Uint8List? _injectData
  -void Function(Uint8List)? _userOnData
  -bool _isCanceled
  -bool _scheduled
  -int _pauseCount
  +bool isPaused
  +dynamic asFuture()
  +dynamic cancel()
  +void onData()
  +void onDone()
  +void onError()
  +void pause()
  +void resume()
  -void _maybeScheduleData()
}

class "lib::_http::http.dart::_HttpDetachedIncoming" {
  -StreamSubscription<Uint8List>? _subscription
  -Uint8List? _bufferedData
  +StreamSubscription<Uint8List> listen()
}

class "lib::_http::http.dart::_HttpParser" {
  -bool _parserCalled
  -Uint8List? _buffer
  -int _index
  -bool _requestParser
  -int _state
  -int? _httpVersionIndex
  -int _messageType
  -int _statusCode
  -int _statusCodeLength
  -List<int> _method
  -List<int> _uriOrReasonPhrase
  -List<int> _headerField
  -List<int> _headerValue
  {static} -int _headerTotalSizeLimit
  -int _headersReceivedSize
  -int _httpVersion
  -int _transferLength
  -bool _persistentConnection
  -bool _connectionUpgrade
  -bool _chunked
  -bool _noMessageBody
  -int _remainingContent
  -bool _contentLength
  -bool _transferEncoding
  +bool connectMethod
  -_HttpHeaders? _headers
  {static} -int _chunkSizeLimit
  -_HttpIncoming? _incoming
  -StreamSubscription<Uint8List>? _socketSubscription
  -bool _paused
  -bool _bodyPaused
  -StreamController<_HttpIncoming> _controller
  -StreamController<Uint8List>? _bodyController
  +String? version
  +int messageType
  +int transferLength
  +bool upgrade
  +bool persistentConnection
  +bool isHead
  +StreamSubscription<_HttpIncoming> listen()
  +void listenToStream()
  -void _parse()
  -bool _headersEnd()
  -void _doParse()
  -void _onData()
  -void _onDone()
  +_HttpDetachedIncoming detachIncoming()
  +Uint8List? readUnparsedData()
  -void _reset()
  -void _releaseBuffer()
  {static} -bool _isTokenChar()
  {static} -bool _isValueChar()
  {static} -void _removeTrailingSpaces()
  {static} -List<String> _tokenizeFieldValue()
  {static} -int _toLowerCaseByte()
  {static} -bool _caseInsensitiveCompare()
  -void _expect()
  -int _expectHexDigit()
  -void _addWithValidation()
  -void _reportSizeLimitError()
  -_HttpIncoming _createIncoming()
  -void _closeIncoming()
  -void _pauseStateChanged()
  -void _reportHttpError()
  -void _reportBodyError()
}

class "lib::_http::http.dart::_HttpSession" {
  -bool _destroyed
  -bool _isNew
  -DateTime _lastSeen
  -void Function()? _timeoutCallback
  -_HttpSessionManager _sessionManager
  -_HttpSession? _prev
  -_HttpSession? _next
  +String id
  -Map<dynamic, dynamic> _data
  +DateTime lastSeen
  +bool isNew
  +void Function()? onTimeout
  +Iterable<MapEntry<dynamic, dynamic>> entries
  +Iterable<dynamic> keys
  +Iterable<dynamic> values
  +int length
  +bool isEmpty
  +bool isNotEmpty
  +void destroy()
  -void _markSeen()
  +bool containsValue()
  +bool containsKey()
  +dynamic []()
  +void []=()
  +dynamic putIfAbsent()
  +void addAll()
  +dynamic remove()
  +void clear()
  +void forEach()
  +void addEntries()
  +Map<K, V> map()
  +void removeWhere()
  +Map<K, V> cast()
  +dynamic update()
  +void updateAll()
  +String toString()
}

class "lib::_http::http.dart::_HttpSessionManager" {
  -Map<String, _HttpSession> _sessions
  -int _sessionTimeout
  -_HttpSession? _head
  -_HttpSession? _tail
  -Timer? _timer
  +int sessionTimeout
  +String createSessionId()
  +_HttpSession? getSession()
  +_HttpSession createSession()
  +void close()
  -void _bumpToEnd()
  -void _addToTimeoutQueue()
  -void _removeFromTimeoutQueue()
  -void _timerTimeout()
  -void _startTimer()
  -void _stopTimer()
}

abstract class "lib::_http::http.dart::HttpOverrides" {
  {static} -HttpOverrides? _global
  {static} +HttpOverrides? current
  {static} +HttpOverrides? global
  {static} +R runZoned()
  {static} +R runWithHttpOverrides()
  +HttpClient createHttpClient()
  +String findProxyFromEnvironment()
}

class "lib::_http::http.dart::_HttpOverridesScope" {
  -HttpOverrides? _previous
  -HttpClient Function(SecurityContext?)? _createHttpClient
  -String Function(Uri, Map<String, String>?)? _findProxyFromEnvironment
  +HttpClient createHttpClient()
  +String findProxyFromEnvironment()
}

abstract class "lib::_http::http.dart::WebSocketStatus" {
  {static} +int normalClosure
  {static} +int goingAway
  {static} +int protocolError
  {static} +int unsupportedData
  {static} +int reserved1004
  {static} +int noStatusReceived
  {static} +int abnormalClosure
  {static} +int invalidFramePayloadData
  {static} +int policyViolation
  {static} +int messageTooBig
  {static} +int missingMandatoryExtension
  {static} +int internalServerError
  {static} +int reserved1015
}

class "lib::_http::http.dart::CompressionOptions" {
  {static} +CompressionOptions compressionDefault
  {static} +CompressionOptions compressionOff
  +bool clientNoContextTakeover
  +bool serverNoContextTakeover
  +int? clientMaxWindowBits
  +int? serverMaxWindowBits
  +bool enabled
  -_CompressionMaxWindowBits _createServerResponseHeader()
  -String _createClientRequestHeader()
  -_CompressionMaxWindowBits _createHeader()
}

abstract class "lib::_http::http.dart::WebSocketTransformer" {
  {static} +dynamic upgrade()
  {static} +bool isUpgradeRequest()
}

abstract class "lib::_http::http.dart::WebSocket" {
  {static} +int connecting
  {static} +int open
  {static} +int closing
  {static} +int closed
  +Duration? pingInterval
  +int readyState
  +String extensions
  +String? protocol
  +int? closeCode
  +String? closeReason
  {static} +String? userAgent
  {static} +dynamic connect()
  +dynamic close()
  +void add()
  +dynamic addStream()
  +void addUtf8Text()
}

class "lib::_http::http.dart::WebSocketException" {
  +String message
  +String toString()
}

class "lib::_http::http.dart::_WebSocketMessageType" {
  {static} +int NONE
  {static} +int TEXT
  {static} +int BINARY
}

class "lib::_http::http.dart::_WebSocketOpcode" {
  {static} +int CONTINUATION
  {static} +int TEXT
  {static} +int BINARY
  {static} +int RESERVED_3
  {static} +int RESERVED_4
  {static} +int RESERVED_5
  {static} +int RESERVED_6
  {static} +int RESERVED_7
  {static} +int CLOSE
  {static} +int PING
  {static} +int PONG
  {static} +int RESERVED_B
  {static} +int RESERVED_C
  {static} +int RESERVED_D
  {static} +int RESERVED_E
  {static} +int RESERVED_F
}

class "lib::_http::http.dart::_EncodedString" {
  +List<int> bytes
}

class "lib::_http::http.dart::_CompressionMaxWindowBits" {
  +String headerValue
  +int maxWindowBits
  +String toString()
}

class "lib::_http::http.dart::_WebSocketProtocolTransformer" {
  {static} +int START
  {static} +int LEN_FIRST
  {static} +int LEN_REST
  {static} +int MASK
  {static} +int PAYLOAD
  {static} +int CLOSED
  {static} +int FAILURE
  {static} +int FIN
  {static} +int RSV1
  {static} +int RSV2
  {static} +int RSV3
  {static} +int OPCODE
  -int _state
  -bool _fin
  -bool _compressed
  -int _opcode
  -int _len
  -bool _masked
  -int _remainingLenBytes
  -int _remainingMaskingKeyBytes
  -int _remainingPayloadBytes
  -int _unmaskingIndex
  -int _currentMessageType
  +int closeCode
  +String closeReason
  -EventSink<dynamic>? _eventSink
  -bool _serverSide
  -Uint8List _maskingBytes
  -BytesBuilder _payload
  -_WebSocketPerMessageDeflate? _deflate
  +Stream<dynamic> bind()
  +void addError()
  +void close()
  +void add()
  -void _unmask()
  -void _lengthDone()
  -void _maskDone()
  -void _startPayload()
  -void _messageFrameEnd()
  -void _controlFrameEnd()
  -bool _isControlFrame()
  -void _prepareForNextFrame()
}

class "lib::_http::http.dart::_WebSocketPing" {
  +List<int>? payload
}

class "lib::_http::http.dart::_WebSocketPong" {
  +List<int>? payload
}

class "lib::_http::http.dart::_WebSocketTransformerImpl" {
  -StreamController<WebSocket> _controller
  -dynamic Function(List<String>)? _protocolSelector
  -CompressionOptions _compression
  +Stream<WebSocket> bind()
  {static} -List<String> _tokenizeFieldValue()
  {static} -dynamic _upgrade()
  {static} -_WebSocketPerMessageDeflate? _negotiateCompression()
  {static} -bool _isUpgradeRequest()
}

class "lib::_http::http.dart::_WebSocketPerMessageDeflate" {
  +bool serverNoContextTakeover
  +bool clientNoContextTakeover
  +int clientMaxWindowBits
  +int serverMaxWindowBits
  +bool serverSide
  +RawZLibFilter? decoder
  +RawZLibFilter? encoder
  -RawZLibFilter _ensureDecoder()
  -RawZLibFilter _ensureEncoder()
  +Uint8List processIncomingMessage()
  +List<int> processOutgoingMessage()
}

class "lib::_http::http.dart::_WebSocketOutgoingTransformer" {
  +_WebSocketImpl webSocket
  -EventSink<List<int>>? _eventSink
  -_WebSocketPerMessageDeflate? _deflateHelper
  +Stream<List<int>> bind()
  +void add()
  +void addError()
  +void close()
  +void addFrame()
  {static} +Iterable<List<int>> createFrame()
}

class "lib::_http::http.dart::_WebSocketConsumer" {
  +_WebSocketImpl webSocket
  +Socket socket
  -StreamController<dynamic>? _controller
  -StreamSubscription<dynamic>? _subscription
  -bool _issuedPause
  -bool _closed
  -Completer<dynamic> _closeCompleter
  -Completer<dynamic>? _completer
  -void _onListen()
  -void _onPause()
  -void _onResume()
  -void _cancel()
  -StreamController<dynamic> _ensureController()
  -bool _done()
  +dynamic addStream()
  +dynamic close()
  +void add()
  +void closeSocket()
}

class "lib::_http::http.dart::_WebSocketImpl" {
  {static} -Map<int, _WebSocketImpl> _webSockets
  {static} +int DEFAULT_WINDOW_BITS
  {static} +String PER_MESSAGE_DEFLATE
  +String? protocol
  -StreamController<dynamic> _controller
  -StreamSubscription<dynamic>? _subscription
  -StreamSink<dynamic> _sink
  -Socket _socket
  -bool _serverSide
  -int _readyState
  -bool _writeClosed
  -int? _closeCode
  -String? _closeReason
  -Duration? _pingInterval
  -Timer? _pingTimer
  -_WebSocketConsumer _consumer
  -int? _outCloseCode
  -String? _outCloseReason
  -Timer? _closeTimer
  -_WebSocketPerMessageDeflate? _deflate
  {static} -HttpClient _httpClient
  +Duration? pingInterval
  +int readyState
  +String extensions
  +int? closeCode
  +String? closeReason
  +dynamic done
  {static} +String? userAgent
  -String _serviceTypePath
  -String _serviceTypeName
  {static} +dynamic connect()
  {static} +_WebSocketPerMessageDeflate? negotiateClientCompression()
  +StreamSubscription<dynamic> listen()
  +void add()
  +void addUtf8Text()
  +void addError()
  +dynamic addStream()
  +dynamic close()
  -void _close()
  {static} -bool _isReservedStatusCode()
}

abstract class "lib::typed_data::typed_data.dart::ByteBuffer" {
  +int lengthInBytes
  +Uint8List asUint8List()
  +Int8List asInt8List()
  +Uint8ClampedList asUint8ClampedList()
  +Uint16List asUint16List()
  +Int16List asInt16List()
  +Uint32List asUint32List()
  +Int32List asInt32List()
  +Uint64List asUint64List()
  +Int64List asInt64List()
  +Int32x4List asInt32x4List()
  +Float32List asFloat32List()
  +Float64List asFloat64List()
  +Float32x4List asFloat32x4List()
  +Float64x2List asFloat64x2List()
  +ByteData asByteData()
}

abstract class "lib::typed_data::typed_data.dart::TypedData" {
  +int elementSizeInBytes
  +int offsetInBytes
  +int lengthInBytes
  +ByteBuffer buffer
}

abstract class "lib::typed_data::typed_data.dart::_TypedIntList" {
  +List<int> +()
}

abstract class "lib::typed_data::typed_data.dart::_TypedFloatList" {
  +List<double> +()
}

class "lib::typed_data::typed_data.dart::Endian" {
  -bool _littleEndian
  {static} +Endian big
  {static} +Endian little
  {static} +Endian host
}

abstract class "lib::typed_data::typed_data.dart::ByteData" {
  +ByteData asUnmodifiableView()
  +int getInt8()
  +void setInt8()
  +int getUint8()
  +void setUint8()
  +int getInt16()
  +void setInt16()
  +int getUint16()
  +void setUint16()
  +int getInt32()
  +void setInt32()
  +int getUint32()
  +void setUint32()
  +int getInt64()
  +void setInt64()
  +int getUint64()
  +void setUint64()
  +double getFloat32()
  +void setFloat32()
  +double getFloat64()
  +void setFloat64()
}

abstract class "lib::typed_data::typed_data.dart::Int8List" {
  {static} +int bytesPerElement
  +Int8List asUnmodifiableView()
  +Int8List sublist()
}

abstract class "lib::typed_data::typed_data.dart::Uint8List" {
  {static} +int bytesPerElement
  +Uint8List asUnmodifiableView()
  +List<int> +()
  +Uint8List sublist()
}

abstract class "lib::typed_data::typed_data.dart::Uint8ClampedList" {
  {static} +int bytesPerElement
  +Uint8ClampedList asUnmodifiableView()
  +Uint8ClampedList sublist()
}

abstract class "lib::typed_data::typed_data.dart::Int16List" {
  {static} +int bytesPerElement
  +Int16List asUnmodifiableView()
  +Int16List sublist()
}

abstract class "lib::typed_data::typed_data.dart::Uint16List" {
  {static} +int bytesPerElement
  +Uint16List asUnmodifiableView()
  +Uint16List sublist()
}

abstract class "lib::typed_data::typed_data.dart::Int32List" {
  {static} +int bytesPerElement
  +Int32List asUnmodifiableView()
  +Int32List sublist()
}

abstract class "lib::typed_data::typed_data.dart::Uint32List" {
  {static} +int bytesPerElement
  +Uint32List asUnmodifiableView()
  +Uint32List sublist()
}

abstract class "lib::typed_data::typed_data.dart::Int64List" {
  {static} +int bytesPerElement
  +Int64List asUnmodifiableView()
  +Int64List sublist()
}

abstract class "lib::typed_data::typed_data.dart::Uint64List" {
  {static} +int bytesPerElement
  +Uint64List asUnmodifiableView()
  +Uint64List sublist()
}

abstract class "lib::typed_data::typed_data.dart::Float32List" {
  {static} +int bytesPerElement
  +Float32List asUnmodifiableView()
  +Float32List sublist()
}

abstract class "lib::typed_data::typed_data.dart::Float64List" {
  {static} +int bytesPerElement
  +Float64List asUnmodifiableView()
  +Float64List sublist()
}

abstract class "lib::typed_data::typed_data.dart::Float32x4List" {
  {static} +int bytesPerElement
  +Float32x4List asUnmodifiableView()
  +List<Float32x4> +()
  +Float32x4List sublist()
}

abstract class "lib::typed_data::typed_data.dart::Int32x4List" {
  {static} +int bytesPerElement
  +Int32x4List asUnmodifiableView()
  +List<Int32x4> +()
  +Int32x4List sublist()
}

abstract class "lib::typed_data::typed_data.dart::Float64x2List" {
  {static} +int bytesPerElement
  +List<Float64x2> +()
  +Float64x2List asUnmodifiableView()
  +Float64x2List sublist()
}

abstract class "lib::typed_data::typed_data.dart::Float32x4" {
  {static} +int xxxx
  {static} +int xxxy
  {static} +int xxxz
  {static} +int xxxw
  {static} +int xxyx
  {static} +int xxyy
  {static} +int xxyz
  {static} +int xxyw
  {static} +int xxzx
  {static} +int xxzy
  {static} +int xxzz
  {static} +int xxzw
  {static} +int xxwx
  {static} +int xxwy
  {static} +int xxwz
  {static} +int xxww
  {static} +int xyxx
  {static} +int xyxy
  {static} +int xyxz
  {static} +int xyxw
  {static} +int xyyx
  {static} +int xyyy
  {static} +int xyyz
  {static} +int xyyw
  {static} +int xyzx
  {static} +int xyzy
  {static} +int xyzz
  {static} +int xyzw
  {static} +int xywx
  {static} +int xywy
  {static} +int xywz
  {static} +int xyww
  {static} +int xzxx
  {static} +int xzxy
  {static} +int xzxz
  {static} +int xzxw
  {static} +int xzyx
  {static} +int xzyy
  {static} +int xzyz
  {static} +int xzyw
  {static} +int xzzx
  {static} +int xzzy
  {static} +int xzzz
  {static} +int xzzw
  {static} +int xzwx
  {static} +int xzwy
  {static} +int xzwz
  {static} +int xzww
  {static} +int xwxx
  {static} +int xwxy
  {static} +int xwxz
  {static} +int xwxw
  {static} +int xwyx
  {static} +int xwyy
  {static} +int xwyz
  {static} +int xwyw
  {static} +int xwzx
  {static} +int xwzy
  {static} +int xwzz
  {static} +int xwzw
  {static} +int xwwx
  {static} +int xwwy
  {static} +int xwwz
  {static} +int xwww
  {static} +int yxxx
  {static} +int yxxy
  {static} +int yxxz
  {static} +int yxxw
  {static} +int yxyx
  {static} +int yxyy
  {static} +int yxyz
  {static} +int yxyw
  {static} +int yxzx
  {static} +int yxzy
  {static} +int yxzz
  {static} +int yxzw
  {static} +int yxwx
  {static} +int yxwy
  {static} +int yxwz
  {static} +int yxww
  {static} +int yyxx
  {static} +int yyxy
  {static} +int yyxz
  {static} +int yyxw
  {static} +int yyyx
  {static} +int yyyy
  {static} +int yyyz
  {static} +int yyyw
  {static} +int yyzx
  {static} +int yyzy
  {static} +int yyzz
  {static} +int yyzw
  {static} +int yywx
  {static} +int yywy
  {static} +int yywz
  {static} +int yyww
  {static} +int yzxx
  {static} +int yzxy
  {static} +int yzxz
  {static} +int yzxw
  {static} +int yzyx
  {static} +int yzyy
  {static} +int yzyz
  {static} +int yzyw
  {static} +int yzzx
  {static} +int yzzy
  {static} +int yzzz
  {static} +int yzzw
  {static} +int yzwx
  {static} +int yzwy
  {static} +int yzwz
  {static} +int yzww
  {static} +int ywxx
  {static} +int ywxy
  {static} +int ywxz
  {static} +int ywxw
  {static} +int ywyx
  {static} +int ywyy
  {static} +int ywyz
  {static} +int ywyw
  {static} +int ywzx
  {static} +int ywzy
  {static} +int ywzz
  {static} +int ywzw
  {static} +int ywwx
  {static} +int ywwy
  {static} +int ywwz
  {static} +int ywww
  {static} +int zxxx
  {static} +int zxxy
  {static} +int zxxz
  {static} +int zxxw
  {static} +int zxyx
  {static} +int zxyy
  {static} +int zxyz
  {static} +int zxyw
  {static} +int zxzx
  {static} +int zxzy
  {static} +int zxzz
  {static} +int zxzw
  {static} +int zxwx
  {static} +int zxwy
  {static} +int zxwz
  {static} +int zxww
  {static} +int zyxx
  {static} +int zyxy
  {static} +int zyxz
  {static} +int zyxw
  {static} +int zyyx
  {static} +int zyyy
  {static} +int zyyz
  {static} +int zyyw
  {static} +int zyzx
  {static} +int zyzy
  {static} +int zyzz
  {static} +int zyzw
  {static} +int zywx
  {static} +int zywy
  {static} +int zywz
  {static} +int zyww
  {static} +int zzxx
  {static} +int zzxy
  {static} +int zzxz
  {static} +int zzxw
  {static} +int zzyx
  {static} +int zzyy
  {static} +int zzyz
  {static} +int zzyw
  {static} +int zzzx
  {static} +int zzzy
  {static} +int zzzz
  {static} +int zzzw
  {static} +int zzwx
  {static} +int zzwy
  {static} +int zzwz
  {static} +int zzww
  {static} +int zwxx
  {static} +int zwxy
  {static} +int zwxz
  {static} +int zwxw
  {static} +int zwyx
  {static} +int zwyy
  {static} +int zwyz
  {static} +int zwyw
  {static} +int zwzx
  {static} +int zwzy
  {static} +int zwzz
  {static} +int zwzw
  {static} +int zwwx
  {static} +int zwwy
  {static} +int zwwz
  {static} +int zwww
  {static} +int wxxx
  {static} +int wxxy
  {static} +int wxxz
  {static} +int wxxw
  {static} +int wxyx
  {static} +int wxyy
  {static} +int wxyz
  {static} +int wxyw
  {static} +int wxzx
  {static} +int wxzy
  {static} +int wxzz
  {static} +int wxzw
  {static} +int wxwx
  {static} +int wxwy
  {static} +int wxwz
  {static} +int wxww
  {static} +int wyxx
  {static} +int wyxy
  {static} +int wyxz
  {static} +int wyxw
  {static} +int wyyx
  {static} +int wyyy
  {static} +int wyyz
  {static} +int wyyw
  {static} +int wyzx
  {static} +int wyzy
  {static} +int wyzz
  {static} +int wyzw
  {static} +int wywx
  {static} +int wywy
  {static} +int wywz
  {static} +int wyww
  {static} +int wzxx
  {static} +int wzxy
  {static} +int wzxz
  {static} +int wzxw
  {static} +int wzyx
  {static} +int wzyy
  {static} +int wzyz
  {static} +int wzyw
  {static} +int wzzx
  {static} +int wzzy
  {static} +int wzzz
  {static} +int wzzw
  {static} +int wzwx
  {static} +int wzwy
  {static} +int wzwz
  {static} +int wzww
  {static} +int wwxx
  {static} +int wwxy
  {static} +int wwxz
  {static} +int wwxw
  {static} +int wwyx
  {static} +int wwyy
  {static} +int wwyz
  {static} +int wwyw
  {static} +int wwzx
  {static} +int wwzy
  {static} +int wwzz
  {static} +int wwzw
  {static} +int wwwx
  {static} +int wwwy
  {static} +int wwwz
  {static} +int wwww
  +double x
  +double y
  +double z
  +double w
  +int signMask
  +Float32x4 +()
  +Float32x4 unary-()
  +Float32x4 -()
  +Float32x4 *()
  +Float32x4 /()
  +Int32x4 lessThan()
  +Int32x4 lessThanOrEqual()
  +Int32x4 greaterThan()
  +Int32x4 greaterThanOrEqual()
  +Int32x4 equal()
  +Int32x4 notEqual()
  +Float32x4 scale()
  +Float32x4 abs()
  +Float32x4 clamp()
  +Float32x4 shuffle()
  +Float32x4 shuffleMix()
  +Float32x4 withX()
  +Float32x4 withY()
  +Float32x4 withZ()
  +Float32x4 withW()
  +Float32x4 min()
  +Float32x4 max()
  +Float32x4 sqrt()
  +Float32x4 reciprocal()
  +Float32x4 reciprocalSqrt()
}

abstract class "lib::typed_data::typed_data.dart::Int32x4" {
  {static} +int xxxx
  {static} +int xxxy
  {static} +int xxxz
  {static} +int xxxw
  {static} +int xxyx
  {static} +int xxyy
  {static} +int xxyz
  {static} +int xxyw
  {static} +int xxzx
  {static} +int xxzy
  {static} +int xxzz
  {static} +int xxzw
  {static} +int xxwx
  {static} +int xxwy
  {static} +int xxwz
  {static} +int xxww
  {static} +int xyxx
  {static} +int xyxy
  {static} +int xyxz
  {static} +int xyxw
  {static} +int xyyx
  {static} +int xyyy
  {static} +int xyyz
  {static} +int xyyw
  {static} +int xyzx
  {static} +int xyzy
  {static} +int xyzz
  {static} +int xyzw
  {static} +int xywx
  {static} +int xywy
  {static} +int xywz
  {static} +int xyww
  {static} +int xzxx
  {static} +int xzxy
  {static} +int xzxz
  {static} +int xzxw
  {static} +int xzyx
  {static} +int xzyy
  {static} +int xzyz
  {static} +int xzyw
  {static} +int xzzx
  {static} +int xzzy
  {static} +int xzzz
  {static} +int xzzw
  {static} +int xzwx
  {static} +int xzwy
  {static} +int xzwz
  {static} +int xzww
  {static} +int xwxx
  {static} +int xwxy
  {static} +int xwxz
  {static} +int xwxw
  {static} +int xwyx
  {static} +int xwyy
  {static} +int xwyz
  {static} +int xwyw
  {static} +int xwzx
  {static} +int xwzy
  {static} +int xwzz
  {static} +int xwzw
  {static} +int xwwx
  {static} +int xwwy
  {static} +int xwwz
  {static} +int xwww
  {static} +int yxxx
  {static} +int yxxy
  {static} +int yxxz
  {static} +int yxxw
  {static} +int yxyx
  {static} +int yxyy
  {static} +int yxyz
  {static} +int yxyw
  {static} +int yxzx
  {static} +int yxzy
  {static} +int yxzz
  {static} +int yxzw
  {static} +int yxwx
  {static} +int yxwy
  {static} +int yxwz
  {static} +int yxww
  {static} +int yyxx
  {static} +int yyxy
  {static} +int yyxz
  {static} +int yyxw
  {static} +int yyyx
  {static} +int yyyy
  {static} +int yyyz
  {static} +int yyyw
  {static} +int yyzx
  {static} +int yyzy
  {static} +int yyzz
  {static} +int yyzw
  {static} +int yywx
  {static} +int yywy
  {static} +int yywz
  {static} +int yyww
  {static} +int yzxx
  {static} +int yzxy
  {static} +int yzxz
  {static} +int yzxw
  {static} +int yzyx
  {static} +int yzyy
  {static} +int yzyz
  {static} +int yzyw
  {static} +int yzzx
  {static} +int yzzy
  {static} +int yzzz
  {static} +int yzzw
  {static} +int yzwx
  {static} +int yzwy
  {static} +int yzwz
  {static} +int yzww
  {static} +int ywxx
  {static} +int ywxy
  {static} +int ywxz
  {static} +int ywxw
  {static} +int ywyx
  {static} +int ywyy
  {static} +int ywyz
  {static} +int ywyw
  {static} +int ywzx
  {static} +int ywzy
  {static} +int ywzz
  {static} +int ywzw
  {static} +int ywwx
  {static} +int ywwy
  {static} +int ywwz
  {static} +int ywww
  {static} +int zxxx
  {static} +int zxxy
  {static} +int zxxz
  {static} +int zxxw
  {static} +int zxyx
  {static} +int zxyy
  {static} +int zxyz
  {static} +int zxyw
  {static} +int zxzx
  {static} +int zxzy
  {static} +int zxzz
  {static} +int zxzw
  {static} +int zxwx
  {static} +int zxwy
  {static} +int zxwz
  {static} +int zxww
  {static} +int zyxx
  {static} +int zyxy
  {static} +int zyxz
  {static} +int zyxw
  {static} +int zyyx
  {static} +int zyyy
  {static} +int zyyz
  {static} +int zyyw
  {static} +int zyzx
  {static} +int zyzy
  {static} +int zyzz
  {static} +int zyzw
  {static} +int zywx
  {static} +int zywy
  {static} +int zywz
  {static} +int zyww
  {static} +int zzxx
  {static} +int zzxy
  {static} +int zzxz
  {static} +int zzxw
  {static} +int zzyx
  {static} +int zzyy
  {static} +int zzyz
  {static} +int zzyw
  {static} +int zzzx
  {static} +int zzzy
  {static} +int zzzz
  {static} +int zzzw
  {static} +int zzwx
  {static} +int zzwy
  {static} +int zzwz
  {static} +int zzww
  {static} +int zwxx
  {static} +int zwxy
  {static} +int zwxz
  {static} +int zwxw
  {static} +int zwyx
  {static} +int zwyy
  {static} +int zwyz
  {static} +int zwyw
  {static} +int zwzx
  {static} +int zwzy
  {static} +int zwzz
  {static} +int zwzw
  {static} +int zwwx
  {static} +int zwwy
  {static} +int zwwz
  {static} +int zwww
  {static} +int wxxx
  {static} +int wxxy
  {static} +int wxxz
  {static} +int wxxw
  {static} +int wxyx
  {static} +int wxyy
  {static} +int wxyz
  {static} +int wxyw
  {static} +int wxzx
  {static} +int wxzy
  {static} +int wxzz
  {static} +int wxzw
  {static} +int wxwx
  {static} +int wxwy
  {static} +int wxwz
  {static} +int wxww
  {static} +int wyxx
  {static} +int wyxy
  {static} +int wyxz
  {static} +int wyxw
  {static} +int wyyx
  {static} +int wyyy
  {static} +int wyyz
  {static} +int wyyw
  {static} +int wyzx
  {static} +int wyzy
  {static} +int wyzz
  {static} +int wyzw
  {static} +int wywx
  {static} +int wywy
  {static} +int wywz
  {static} +int wyww
  {static} +int wzxx
  {static} +int wzxy
  {static} +int wzxz
  {static} +int wzxw
  {static} +int wzyx
  {static} +int wzyy
  {static} +int wzyz
  {static} +int wzyw
  {static} +int wzzx
  {static} +int wzzy
  {static} +int wzzz
  {static} +int wzzw
  {static} +int wzwx
  {static} +int wzwy
  {static} +int wzwz
  {static} +int wzww
  {static} +int wwxx
  {static} +int wwxy
  {static} +int wwxz
  {static} +int wwxw
  {static} +int wwyx
  {static} +int wwyy
  {static} +int wwyz
  {static} +int wwyw
  {static} +int wwzx
  {static} +int wwzy
  {static} +int wwzz
  {static} +int wwzw
  {static} +int wwwx
  {static} +int wwwy
  {static} +int wwwz
  {static} +int wwww
  +int x
  +int y
  +int z
  +int w
  +int signMask
  +bool flagX
  +bool flagY
  +bool flagZ
  +bool flagW
  +Int32x4 |()
  +Int32x4 &()
  +Int32x4 ^()
  +Int32x4 +()
  +Int32x4 -()
  +Int32x4 shuffle()
  +Int32x4 shuffleMix()
  +Int32x4 withX()
  +Int32x4 withY()
  +Int32x4 withZ()
  +Int32x4 withW()
  +Int32x4 withFlagX()
  +Int32x4 withFlagY()
  +Int32x4 withFlagZ()
  +Int32x4 withFlagW()
  +Float32x4 select()
}

abstract class "lib::typed_data::typed_data.dart::Float64x2" {
  +double x
  +double y
  +int signMask
  +Float64x2 +()
  +Float64x2 unary-()
  +Float64x2 -()
  +Float64x2 *()
  +Float64x2 /()
  +Float64x2 scale()
  +Float64x2 abs()
  +Float64x2 clamp()
  +Float64x2 withX()
  +Float64x2 withY()
  +Float64x2 min()
  +Float64x2 max()
  +Float64x2 sqrt()
}

class "dart::_internal::BytesBuilder" {
  +int length
  +bool isEmpty
  +bool isNotEmpty
  +void add()
  +void addByte()
  +Uint8List takeBytes()
  +Uint8List toBytes()
  +void clear()
}

abstract class "lib::typed_data::typed_data.dart::UnmodifiableByteBufferView" {
}

abstract class "lib::typed_data::typed_data.dart::UnmodifiableByteDataView" {
}

abstract class "lib::typed_data::typed_data.dart::UnmodifiableUint8ListView" {
}

abstract class "lib::typed_data::typed_data.dart::UnmodifiableInt8ListView" {
}

abstract class "lib::typed_data::typed_data.dart::UnmodifiableUint8ClampedListView" {
}

abstract class "lib::typed_data::typed_data.dart::UnmodifiableUint16ListView" {
}

abstract class "lib::typed_data::typed_data.dart::UnmodifiableInt16ListView" {
}

abstract class "lib::typed_data::typed_data.dart::UnmodifiableUint32ListView" {
}

abstract class "lib::typed_data::typed_data.dart::UnmodifiableInt32ListView" {
}

abstract class "lib::typed_data::typed_data.dart::UnmodifiableUint64ListView" {
}

abstract class "lib::typed_data::typed_data.dart::UnmodifiableInt64ListView" {
}

abstract class "lib::typed_data::typed_data.dart::UnmodifiableInt32x4ListView" {
}

abstract class "lib::typed_data::typed_data.dart::UnmodifiableFloat32x4ListView" {
}

abstract class "lib::typed_data::typed_data.dart::UnmodifiableFloat64x2ListView" {
}

abstract class "lib::typed_data::typed_data.dart::UnmodifiableFloat32ListView" {
}

abstract class "lib::typed_data::typed_data.dart::UnmodifiableFloat64ListView" {
}

class "lib::_js_annotations::_js_annotations.dart::JS" {
  +String? name
}

class "lib::_js_annotations::_js_annotations.dart::_Anonymous" {
}

class "lib::_js_annotations::_js_annotations.dart::_StaticInterop" {
}

class "lib::_js_annotations::_js_annotations.dart::_TrustTypes" {
}

class "lib::_js_annotations::_js_annotations.dart::JSExport" {
  +String name
}

class "lib::convert::convert.dart::AsciiCodec" {
  -bool _allowInvalid
  +String name
  +AsciiEncoder encoder
  +AsciiDecoder decoder
  +Uint8List encode()
  +String decode()
}

class "lib::convert::convert.dart::_UnicodeSubsetEncoder" {
  -int _subsetMask
  +Uint8List convert()
  +StringConversionSink startChunkedConversion()
  +Stream<List<int>> bind()
}

class "lib::convert::convert.dart::AsciiEncoder" {
}

class "lib::convert::convert.dart::_UnicodeSubsetEncoderSink" {
  -ByteConversionSink _sink
  -int _subsetMask
  +void close()
  +void addSlice()
}

abstract class "lib::convert::convert.dart::_UnicodeSubsetDecoder" {
  -bool _allowInvalid
  -int _subsetMask
  +String convert()
  -String _convertInvalid()
  +ByteConversionSink startChunkedConversion()
  +Stream<String> bind()
}

class "lib::convert::convert.dart::AsciiDecoder" {
  +ByteConversionSink startChunkedConversion()
}

class "lib::convert::convert.dart::_ErrorHandlingAsciiDecoderSink" {
  -ByteConversionSink _utf8Sink
  +void close()
  +void add()
  +void addSlice()
}

class "lib::convert::convert.dart::_SimpleAsciiDecoderSink" {
  -Sink<dynamic> _sink
  +void close()
  +void add()
  +void addSlice()
}

class "lib::convert::convert.dart::Base64Codec" {
  -Base64Encoder _encoder
  +Base64Encoder encoder
  +Base64Decoder decoder
  +Uint8List decode()
  +String normalize()
  {static} -void _checkPadding()
}

class "lib::convert::convert.dart::Base64Encoder" {
  -bool _urlSafe
  +String convert()
  +ByteConversionSink startChunkedConversion()
}

class "lib::convert::convert.dart::_Base64Encoder" {
  {static} -String _base64Alphabet
  {static} -String _base64UrlAlphabet
  {static} -int _valueShift
  {static} -int _countMask
  {static} -int _sixBitMask
  -int _state
  -String _alphabet
  {static} -int _encodeState()
  {static} -int _stateBits()
  {static} -int _stateCount()
  +Uint8List createBuffer()
  +Uint8List? encode()
  {static} +int encodeChunk()
  {static} +void writeFinalChunk()
}

class "lib::convert::convert.dart::_BufferCachingBase64Encoder" {
  +Uint8List? bufferCache
  +Uint8List createBuffer()
}

abstract class "lib::convert::convert.dart::_Base64EncoderSink" {
  +void add()
  +void close()
  +void addSlice()
  -void _add()
}

class "lib::convert::convert.dart::_AsciiBase64EncoderSink" {
  -Sink<String> _sink
  -_Base64Encoder _encoder
  -void _add()
}

class "lib::convert::convert.dart::_Utf8Base64EncoderSink" {
  -ByteConversionSink _sink
  -_Base64Encoder _encoder
  -void _add()
}

class "lib::convert::convert.dart::Base64Decoder" {
  +Uint8List convert()
  +StringConversionSink startChunkedConversion()
}

class "lib::convert::convert.dart::_Base64Decoder" {
  {static} -int _valueShift
  {static} -int _countMask
  {static} -int _invalid
  {static} -int _padding
  {static} -int __
  {static} -int _p
  {static} -List<int> _inverseAlphabet
  {static} -int _char_percent
  {static} -int _char_3
  {static} -int _char_d
  -int _state
  {static} -Uint8List _emptyBuffer
  {static} -int _encodeCharacterState()
  {static} -int _stateCount()
  {static} -int _stateBits()
  {static} -int _encodePaddingState()
  {static} -int _statePadding()
  {static} -bool _hasSeenPadding()
  +Uint8List? decode()
  +void close()
  {static} +int decodeChunk()
  {static} -Uint8List _allocateBuffer()
  {static} -int _trimPaddingChars()
  {static} -int _checkPadding()
}

class "lib::convert::convert.dart::_Base64DecoderSink" {
  -Sink<List<int>> _sink
  -_Base64Decoder _decoder
  +void add()
  +void close()
  +void addSlice()
}

class "lib::convert::convert.dart::ByteConversionSink" {
  +void addSlice()
}

class "lib::convert::convert.dart::_ByteAdapterSink" {
  -Sink<List<int>> _sink
  +void add()
  +void close()
}

class "lib::convert::convert.dart::_ByteCallbackSink" {
  {static} -int _INITIAL_BUFFER_SIZE
  -void Function(List<int>) _callback
  -List<int> _buffer
  -int _bufferIndex
  +void add()
  {static} -int _roundToPowerOf2()
  +void close()
}

class "lib::convert::convert.dart::ChunkedConversionSink" {
  +void add()
  +void close()
}

class "lib::convert::convert.dart::_SimpleCallbackSink" {
  -void Function(List<T>) _callback
  -List<T> _accumulated
  +void add()
  +void close()
}

class "lib::convert::convert.dart::_ConverterStreamEventSink" {
  -EventSink<T> _eventSink
  -Sink<S> _chunkedSink
  +void add()
  +void addError()
  +void close()
}

class "lib::convert::convert.dart::Codec" {
  +Converter<S, T> encoder
  +Converter<T, S> decoder
  +Codec<T, S> inverted
  +T encode()
  +S decode()
  +Codec<S, R> fuse()
}

class "lib::convert::convert.dart::_FusedCodec" {
  -Codec<S, M> _first
  -Codec<M, T> _second
  +Converter<S, T> encoder
  +Converter<T, S> decoder
}

class "lib::convert::convert.dart::_InvertedCodec" {
  -Codec<S, T> _codec
  +Converter<T, S> encoder
  +Converter<S, T> decoder
  +Codec<S, T> inverted
}


class "lib::convert::convert.dart::Converter" {
  {static} +Converter<TS, TT> castFrom()
  +T convert()
  +Converter<S, TT> fuse()
  +Sink<S> startChunkedConversion()
  +Stream<T> bind()
  +Converter<RS, RT> cast()
}

class "lib::convert::convert.dart::_FusedConverter" {
  -Converter<S, M> _first
  -Converter<M, T> _second
  +T convert()
  +Sink<S> startChunkedConversion()
}

abstract class "lib::convert::convert.dart::" {
}

abstract class "lib::convert::convert.dart::Encoding" {
  {static} -Map<String, Encoding> _nameToEncoding
  +Converter<String, List<int>> encoder
  +Converter<List<int>, String> decoder
  +String name
  +dynamic decodeStream()
  {static} +Encoding? getByName()
}

class "lib::convert::convert.dart::HtmlEscapeMode" {
  -String _name
  +bool escapeLtGt
  +bool escapeQuot
  +bool escapeApos
  +bool escapeSlash
  {static} +HtmlEscapeMode unknown
  {static} +HtmlEscapeMode attribute
  {static} +HtmlEscapeMode sqAttribute
  {static} +HtmlEscapeMode element
  +String toString()
}

class "lib::convert::convert.dart::HtmlEscape" {
  +HtmlEscapeMode mode
  +String convert()
  -String? _convert()
  +StringConversionSink startChunkedConversion()
}

class "lib::convert::convert.dart::_HtmlEscapeSink" {
  -HtmlEscape _escape
  -StringConversionSink _sink
  +void addSlice()
  +void close()
}

class "lib::convert::convert.dart::JsonUnsupportedObjectError" {
  +Object? unsupportedObject
  +Object? cause
  +String? partialResult
  +String toString()
}

class "lib::convert::convert.dart::JsonCyclicError" {
  +String toString()
}

class "lib::convert::convert.dart::JsonCodec" {
  -Object? Function(Object?, Object?)? _reviver
  -Object? Function(dynamic)? _toEncodable
  +JsonEncoder encoder
  +JsonDecoder decoder
  +dynamic decode()
  +String encode()
}

class "lib::convert::convert.dart::JsonEncoder" {
  +String? indent
  -Object? Function(dynamic)? _toEncodable
  +String convert()
  +ChunkedConversionSink<Object?> startChunkedConversion()
  +Stream<String> bind()
  +Converter<Object?, T> fuse()
}

class "lib::convert::convert.dart::JsonUtf8Encoder" {
  {static} -int _defaultBufferSize
  -List<int>? _indent
  -Object? Function(dynamic)? _toEncodable
  -int _bufferSize
  {static} -List<int>? _utf8Encode()
  +List<int> convert()
  +ChunkedConversionSink<Object?> startChunkedConversion()
  +Stream<List<int>> bind()
}

class "lib::convert::convert.dart::_JsonEncoderSink" {
  -String? _indent
  -Object? Function(dynamic)? _toEncodable
  -StringConversionSink _sink
  -bool _isDone
  +void add()
  +void close()
}

class "lib::convert::convert.dart::_JsonUtf8EncoderSink" {
  -ByteConversionSink _sink
  -List<int>? _indent
  -Object? Function(dynamic)? _toEncodable
  -int _bufferSize
  -bool _isDone
  -void _addChunk()
  +void add()
  +void close()
}

class "lib::convert::convert.dart::JsonDecoder" {
  -Object? Function(Object?, Object?)? _reviver
  +dynamic convert()
  +StringConversionSink startChunkedConversion()
  +Stream<Object?> bind()
}

abstract class "lib::convert::convert.dart::_JsonStringifier" {
  {static} +int backspace
  {static} +int tab
  {static} +int newline
  {static} +int carriageReturn
  {static} +int formFeed
  {static} +int quote
  {static} +int char_0
  {static} +int backslash
  {static} +int char_b
  {static} +int char_d
  {static} +int char_f
  {static} +int char_n
  {static} +int char_r
  {static} +int char_t
  {static} +int char_u
  {static} +int surrogateMin
  {static} +int surrogateMask
  {static} +int surrogateLead
  {static} +int surrogateTrail
  -List<dynamic> _seen
  -dynamic Function(dynamic) _toEncodable
  -String? _partialResult
  +void writeString()
  +void writeStringSlice()
  +void writeCharCode()
  +void writeNumber()
  {static} +int hexDigit()
  +void writeStringContent()
  -void _checkCycle()
  -void _removeSeen()
  +void writeObject()
  +bool writeJsonValue()
  +void writeList()
  +bool writeMap()
}

class "lib::convert::convert.dart::_JsonStringStringifier" {
  -StringSink _sink
  -String? _partialResult
  {static} +String stringify()
  {static} +void printOn()
  +void writeNumber()
  +void writeString()
  +void writeStringSlice()
  +void writeCharCode()
}

class "lib::convert::convert.dart::_JsonStringStringifierPretty" {
  -String _indent
  +void writeIndentation()
}

class "lib::convert::convert.dart::_JsonUtf8Stringifier" {
  +int bufferSize
  +void Function(Uint8List, int, int) addChunk
  +Uint8List buffer
  +int index
  -String? _partialResult
  {static} +void stringify()
  +void flush()
  +void writeNumber()
  +void writeAsciiString()
  +void writeString()
  +void writeStringSlice()
  +void writeCharCode()
  +void writeMultiByteCharCode()
  +void writeFourByteCharCode()
  +void writeByte()
}

class "lib::convert::convert.dart::_JsonUtf8StringifierPretty" {
  +List<int> indent
  +void writeIndentation()
}

abstract class "lib::convert::convert.dart::_JsonPrettyPrintMixin" {
  -int _indentLevel
  +void writeIndentation()
  +void writeList()
  +bool writeMap()
}

class "lib::convert::convert.dart::Latin1Codec" {
  -bool _allowInvalid
  +String name
  +Latin1Encoder encoder
  +Latin1Decoder decoder
  +Uint8List encode()
  +String decode()
}

class "lib::convert::convert.dart::Latin1Encoder" {
}

class "lib::convert::convert.dart::Latin1Decoder" {
  +ByteConversionSink startChunkedConversion()
}

class "lib::convert::convert.dart::_Latin1DecoderSink" {
  -StringConversionSink? _sink
  +void close()
  +void add()
  -void _addSliceToSink()
  +void addSlice()
  {static} -void _checkValidLatin1()
  {static} -void _reportInvalidLatin1()
}

class "lib::convert::convert.dart::_Latin1AllowInvalidDecoderSink" {
  +void addSlice()
}

class "lib::convert::convert.dart::LineSplitter" {
  {static} +Iterable<String> split()
  +List<String> convert()
  +StringConversionSink startChunkedConversion()
  +Stream<String> bind()
}

class "lib::convert::convert.dart::_LineSplitterSink" {
  -StringConversionSink _sink
  -String? _carry
  -StringBuffer? _multiCarry
  -bool _skipLeadingLF
  +void addSlice()
  +void close()
  -void _addLines()
  -void _addCarry()
  -String _useCarry()
}

class "lib::convert::convert.dart::_LineSplitterEventSink" {
  -EventSink<String> _eventSink
  +void addError()
}

class "lib::convert::convert.dart::_LineSplitIterable" {
  -String _source
  -int _start
  -int _end
  +Iterator<String> iterator
}

class "lib::convert::convert.dart::_LineSplitIterator" {
  -String _source
  -int _end
  -int _start
  -int _lineStart
  -int _lineEnd
  -String? _current
  +String current
  +bool moveNext()
}

class "lib::convert::convert.dart::StringConversionSink" {
  +void addSlice()
  +void add()
  +ByteConversionSink asUtf8Sink()
  +ClosableStringSink asStringSink()
}

class "lib::convert::convert.dart::ClosableStringSink" {
  +void close()
}

class "lib::convert::convert.dart::_ClosableStringSink" {
  -void Function() _callback
  -StringSink _sink
  +void close()
  +void writeCharCode()
  +void write()
  +void writeln()
  +void writeAll()
}

class "lib::convert::convert.dart::_StringConversionSinkAsStringSinkAdapter" {
  {static} -int _MIN_STRING_SIZE
  -StringBuffer _buffer
  -StringConversionSink _chunkedSink
  +void close()
  +void writeCharCode()
  +void write()
  +void writeln()
  +void writeAll()
  -void _flush()
}

class "lib::convert::convert.dart::_StringSinkConversionSink" {
  -TStringSink _stringSink
  +void close()
  +void addSlice()
  +void add()
  +ByteConversionSink asUtf8Sink()
  +ClosableStringSink asStringSink()
}

class "lib::convert::convert.dart::_StringCallbackSink" {
  -void Function(String) _callback
  +void close()
  +ByteConversionSink asUtf8Sink()
}

class "lib::convert::convert.dart::_StringAdapterSink" {
  -Sink<String> _sink
  +void add()
  +void addSlice()
  +void close()
}

class "lib::convert::convert.dart::_Utf8StringSinkAdapter" {
  -_Utf8Decoder _decoder
  -Sink<Object?> _sink
  -StringSink _stringSink
  +void close()
  +void add()
  +void addSlice()
}

class "lib::convert::convert.dart::_Utf8ConversionSink" {
  -_Utf8Decoder _decoder
  -StringConversionSink _chunkedSink
  -StringBuffer _buffer
  +void close()
  +void add()
  +void addSlice()
}

abstract class "lib::convert::convert.dart::" {
}

class "lib::convert::convert.dart::Utf8Codec" {
  -bool _allowMalformed
  +String name
  +Utf8Encoder encoder
  +Utf8Decoder decoder
  +String decode()
  +Uint8List encode()
}

class "lib::convert::convert.dart::Utf8Encoder" {
  +Uint8List convert()
  +StringConversionSink startChunkedConversion()
  +Stream<List<int>> bind()
}

class "lib::convert::convert.dart::_Utf8Encoder" {
  -int _carry
  -int _bufferIndex
  -Uint8List _buffer
  {static} -int _DEFAULT_BYTE_BUFFER_SIZE
  {static} -Uint8List _createBuffer()
  -void _writeReplacementCharacter()
  -bool _writeSurrogate()
  -int _fillBuffer()
}

class "lib::convert::convert.dart::_Utf8EncoderSink" {
  -ByteConversionSink _sink
  +void close()
  +void addSlice()
}

class "lib::convert::convert.dart::Utf8Decoder" {
  -bool _allowMalformed
  +String convert()
  +ByteConversionSink startChunkedConversion()
  +Stream<String> bind()
  +Converter<List<int>, T> fuse()
}

class "lib::convert::convert.dart::_Utf8Decoder" {
  +bool allowMalformed
  -int _state
  -int _charOrIndex
  {static} +int typeMask
  {static} +int shiftedByteMask
  {static} +String typeTable
  {static} +int IA
  {static} +int BB
  {static} +int AB
  {static} +int X1
  {static} +int X2
  {static} +int X3
  {static} +int TO
  {static} +int TS
  {static} +int QO
  {static} +int QR
  {static} +int B1
  {static} +int B2
  {static} +int E1
  {static} +int E2
  {static} +int E3
  {static} +int E4
  {static} +int E5
  {static} +int E6
  {static} +int E7
  {static} -String _IA
  {static} -String _BB
  {static} -String _AB
  {static} -String _X1
  {static} -String _X2
  {static} -String _X3
  {static} -String _TO
  {static} -String _TS
  {static} -String _QO
  {static} -String _QR
  {static} -String _B1
  {static} -String _B2
  {static} -String _E1
  {static} -String _E2
  {static} -String _E3
  {static} -String _E4
  {static} -String _E5
  {static} -String _E6
  {static} -String _E7
  {static} +String transitionTable
  {static} +int initial
  {static} +int accept
  {static} +int beforeBom
  {static} +int afterBom
  {static} +int errorMissingExtension
  {static} +int errorUnexpectedExtension
  {static} +int errorInvalid
  {static} +int errorOverlong
  {static} +int errorOutOfRange
  {static} +int errorSurrogate
  {static} +int errorUnfinished
  {static} +bool isErrorState()
  {static} +String errorDescription()
  +String convertSingle()
  +String convertChunked()
  +String convertGeneral()
  +void flush()
  +String decodeGeneral()
  {static} -Uint8List _makeUint8List()
}


@enduml