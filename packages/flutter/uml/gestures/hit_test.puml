@startuml
set namespaceSeparator ::

class "gestures::hit_test.dart::HitTestable" {
  +void hitTest()
  +void hitTestInView()
}

class "gestures::hit_test.dart::HitTestDispatcher" {
  +void dispatchEvent()
}

class "gestures::hit_test.dart::HitTestTarget" {
  +void handleEvent()
}

class "gestures::hit_test.dart::HitTestEntry" {
  +T target
  -Matrix4? _transform
  +Matrix4? transform
  +String toString()
}

abstract class "gestures::hit_test.dart::_TransformPart" {
  +Matrix4 multiply()
}

class "gestures::hit_test.dart::_MatrixTransformPart" {
  +Matrix4 matrix
  +Matrix4 multiply()
}

class "gestures::hit_test.dart::_OffsetTransformPart" {
  +dynamic offset
  +Matrix4 multiply()
}

class "gestures::hit_test.dart::HitTestResult" {
  -List<HitTestEntry<HitTestTarget>> _path
  -List<Matrix4> _transforms
  -List<_TransformPart> _localTransforms
  +Iterable<HitTestEntry<HitTestTarget>> path
  -Matrix4 _lastTransform
  -void _globalizeTransforms()
  +void add()
  #void pushTransform()
  #void pushOffset()
  #void popTransform()
  -bool _debugVectorMoreOrLessEquals()
  +String toString()
}

class "dart::ui::Offset" {
  {static} +Offset zero
  {static} +Offset infinite
  +double dx
  +double dy
  +double distance
  +double distanceSquared
  +double direction
  +int hashCode
  +Offset scale()
  +Offset translate()
  +Offset unary-()
  +Offset -()
  +Offset +()
  +Offset *()
  +Offset /()
  +Offset ~/()
  +Offset %()
  +Rect &()
  {static} +Offset? lerp()
  +bool ==()
  +String toString()
}

class "vector_math::vector_math_64.dart::Matrix4" {
  -Float64List _m4storage
  {static} -Vector3? _decomposeV
  {static} -Matrix4? _decomposeM
  {static} -Matrix3? _decomposeR
  +Float64List storage
  +int dimension
  +int hashCode
  +Vector4 row0
  +Vector4 row1
  +Vector4 row2
  +Vector4 row3
  +Vector3 right
  +Vector3 up
  +Vector3 forward
  {static} +void solve2()
  {static} +void solve3()
  {static} +void solve()
  {static} +Matrix4? tryInvert()
  +int index()
  +double entry()
  +void setEntry()
  +void splatDiagonal()
  +void setValues()
  +void setColumns()
  +void setFrom()
  +void setFromTranslationRotation()
  +void setFromTranslationRotationScale()
  +void setUpper2x2()
  +void setDiagonal()
  +void setOuter()
  +String toString()
  +double []()
  +void []=()
  +bool ==()
  +void setRow()
  +Vector4 getRow()
  +void setColumn()
  +Vector4 getColumn()
  +Matrix4 clone()
  +Matrix4 copyInto()
  +Matrix4 unary-()
  +dynamic *()
  +Matrix4 +()
  +Matrix4 -()
  +void translate()
  +void leftTranslate()
  +void rotate()
  +void rotateX()
  +void rotateY()
  +void rotateZ()
  +void scale()
  +Matrix4 scaled()
  +void setZero()
  +void setIdentity()
  +Matrix4 transposed()
  +void transpose()
  +Matrix4 absolute()
  +double determinant()
  +double dotRow()
  +double dotColumn()
  +double trace()
  +double infinityNorm()
  +double relativeError()
  +double absoluteError()
  +Vector3 getTranslation()
  +void setTranslation()
  +void setTranslationRaw()
  +Matrix3 getRotation()
  +void copyRotation()
  +void setRotation()
  +Matrix3 getNormalMatrix()
  +double getMaxScaleOnAxis()
  +void transposeRotation()
  +double invert()
  +double copyInverse()
  +double invertRotation()
  +void setRotationX()
  +void setRotationY()
  +void setRotationZ()
  +void scaleAdjoint()
  +Vector3 absoluteRotate()
  +void add()
  +void sub()
  +void negate()
  +void multiply()
  +Matrix4 multiplied()
  +void transposeMultiply()
  +void multiplyTranspose()
  +void decompose()
  +Vector3 rotate3()
  +Vector3 rotated3()
  +Vector3 transform3()
  +Vector3 transformed3()
  +Vector4 transform()
  +Vector3 perspectiveTransform()
  +Vector4 transformed()
  +void copyIntoArray()
  +void copyFromArray()
  +List<double> applyToVector3Array()
  +bool isIdentity()
  +bool isZero()
}


@enduml